
'for cookies
Imports System.ComponentModel
Imports System.Data.SqlClient
Imports System.IO
Imports System.Net
Imports System.Text
Imports Twilio
Imports Twilio.Rest.Api.V2010.Account
Imports Twilio.Types

Imports Amazon.Polly
Imports Amazon.Polly.Model

Imports System.Globalization
Imports System.Security.Cryptography

Imports Microsoft.Office.Interop


Public Class FrmMain


    Private DailyReportHTMLEmailString As String = ""
    Private UrlOfReport As String = ""
    Private DesktopText As String = ""
    Private TitleOfNotification As String = ""
    Private DesktopReference As String = ""
    Private SMSTest As String = ""
    'gets the email list
    Private EmailString As String = ""
    Private SpeechString As String = ""



    Private Sub FrmMain_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        'this stops any older versions being run in the wild
        If Now.Year = "2018" Then
            If Now.Month > 6 Then
                MsgBox("version is depreciated, contact support")
                End
            End If
        End If
        If Now.Year <> "2018" Then
            MsgBox("version is depreciated, contact support")
        End If
        Dim WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode
        ListBoxUtilitiesInfo.Items.Add("System started at " & ControlChars.Tab & ControlChars.Tab & Now)
        '       WhatsAppNotification("Notification system started at : " & Format(Now, "ddd dd-MMM H:MM tt"), "+85291961834", WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)
        '      WhatsAppNotification("Notification system started at : " & Format(Now, "ddd dd-MMM H:MM tt"), "+85290910313", WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)
        '     WhatsAppNotification("Notification system started at : " & Format(Now, "ddd dd-MMM H:MM tt"), "+85261102164", WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)
        LoadTimerSettings()

        LoadCustomers()

        LoadStandardKPIs()

        LoadNotifications()

    End Sub


    Private Sub LoadTimerSettings()

        'this loads the timer settings
        'and sets the timers
        Try
            NumericUpDownVendNewCustomerCheckTimerSettings.Value = My.Settings.VendnewCustomerTimer
        Catch ex As Exception
            NumericUpDownVendNewCustomerCheckTimerSettings.Value = 4
        End Try

        Try
            NumericUpDownNotificationTimerSettings.Value = My.Settings.NotificationsTimer
        Catch ex As Exception
            NumericUpDownNotificationTimerSettings.Value = 15
        End Try

        Try
            NumericUpDownVendCopyG1DataTimerSettings.Value = My.Settings.CopyG1DataTimer
        Catch ex As Exception
            NumericUpDownVendCopyG1DataTimerSettings.Value = 90
        End Try

        Try
            NumericUpDownVendKPIRunTimerSettings.Value = My.Settings.KPIRunTimer
        Catch ex As Exception
            NumericUpDownVendKPIRunTimerSettings.Value = 120
        End Try

        Try
            NumericUpDownVendNumberInstancesTimerSettings.Value = My.Settings.NumberOfInstances
        Catch ex As Exception
            NumericUpDownVendNumberInstancesTimerSettings.Value = 20
        End Try


        '60000 is 1 minute
        '600000 is 10 minutes
        '6000000 is 100 minutes

        TimerNumberInstances.Interval = 60000 * NumericUpDownVendNumberInstancesTimerSettings.Value
        TimerG1CopyToITS.Interval = 60000 * NumericUpDownVendCopyG1DataTimerSettings.Value
        TimerNotifications.Interval = 60000 * NumericUpDownNotificationTimerSettings.Value
        TimerKPIs.Interval = 60000 * NumericUpDownVendKPIRunTimerSettings.Value
        TimerVend.Interval = 60000 * NumericUpDownVendNewCustomerCheckTimerSettings.Value

    End Sub


    Private Sub LoadStandardKPIs()
        'this loads the standard KPI's
        ListBoxKPITest.Items.Clear()
        Dim BizCoachCustomers As ADODB.Connection
        Dim RecordsCustomers As ADODB._Recordset
        BizCoachCustomers = New ADODB.Connection
        Try
            BizCoachCustomers.Open(strconnectSQLBizCoachSettings)
        Catch ex As Exception
            MessageBox.Show("Problem connecting to database!", "Connection Issues")
            Exit Sub
        End Try
        RecordsCustomers = BizCoachCustomers.Execute("Select * from KPIFormulaes where StandardKPI = '1' and [KPI In Use] ='1' and VendKPI ='True' and BizCoach2Kpi ='1'")
        While Not RecordsCustomers.EOF
            ListBoxKPITest.Items.Add(RecordsCustomers.Fields("KPIName").Value.ToString.Trim)
            RecordsCustomers.MoveNext()
        End While
        RecordsCustomers.Close()
        BizCoachCustomers.Close()
    End Sub

    Private Sub LoadNotifications()

        'gets details needed for the report

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        Dim ErrDesc As String = ""
        Dim ReportName As String = ""
        ListBoxNotificationType.Items.Clear()

        Try
            erpdb.Open(strconnectSQLBizCoachSettings)
            records = erpdb.Execute("Select * from NotificationDetails order by NotificationName")

            While Not records.EOF
                Try
                    If ListBoxNotificationType.FindStringExact(records.Fields("NotificationName").Value.ToString.Trim) = True Then
                        ListBoxNotificationType.Items.Add(records.Fields("NotificationName").Value.ToString.Trim)
                    End If
                Catch ex As Exception
                    ReportName = ""
                End Try
                records.MoveNext()
            End While
            records.Close()
        Catch ex As Exception
            ErrDesc = Err.Description
            MsgBox(Err.Description)
        End Try

        Try
            erpdb.Close()
        Catch ex As Exception

        End Try
    End Sub



    Private Sub LoadCustomers()

        'this loads the customers from the 'BizCoachCustomers' database
        'some companies have a parent company so load that
        Dim IsParentCompany As Boolean = False
        Dim IsDemoCompany As Boolean = False

        ListBoxCustomerInfo.Items.Clear()

        Dim BizCoachCustomers As ADODB.Connection
        Dim RecordsCustomers As ADODB._Recordset
        BizCoachCustomers = New ADODB.Connection
        Try
            BizCoachCustomers.Open(strconnectSQLBizCoachCustomerInformationDatabase)
        Catch ex As Exception
            MessageBox.Show("Problem connecting to database!", "Connection Issues")
            Exit Sub
        End Try
        RecordsCustomers = BizCoachCustomers.Execute("Select * from CustomerNames")
        While Not RecordsCustomers.EOF
            Try
                IsParentCompany = RecordsCustomers.Fields("IsParentCompany").Value
            Catch ex As Exception
                IsParentCompany = False
            End Try
            Try
                IsDemoCompany = RecordsCustomers.Fields("DemoCompany").Value
            Catch ex As Exception
                IsDemoCompany = False
            End Try
            If IsParentCompany = True And IsDemoCompany = False Then
                If ListBoxCustomerInfo.FindStringExact(RecordsCustomers.Fields("ParentCompany").Value.ToString.Trim) = True Then
                    ListBoxCustomerInfo.Items.Add(RecordsCustomers.Fields("ParentCompany").Value.ToString.Trim)
                End If
            Else
                If IsDemoCompany = False Then
                    ListBoxCustomerInfo.Items.Add(RecordsCustomers.Fields("CustomerName").Value.ToString.Trim)
                End If
            End If
            If IsParentCompany = True And IsDemoCompany = True Then
                If ListBoxCustomerInfo.FindStringExact(RecordsCustomers.Fields("ParentCompany").Value.ToString.Trim) = True Then
                    ListBoxCustomerInfo.Items.Add(RecordsCustomers.Fields("ParentCompany").Value.ToString.Trim)
                End If
            Else
                If IsDemoCompany = True Then
                    ListBoxCustomerInfo.Items.Add(RecordsCustomers.Fields("CustomerName").Value.ToString.Trim)
                End If
            End If
            RecordsCustomers.MoveNext()
        End While
        RecordsCustomers.Close()
        BizCoachCustomers.Close()
    End Sub

    Private Sub TimerRunningProgressBar_Tick(sender As Object, e As EventArgs) Handles TimerRunningProgressBar.Tick
        ToolStripProgressBarRunning.Value = ToolStripProgressBarRunning.Value + 1
    End Sub

    Private Sub OnToolStripMenuItem_Click(sender As Object, e As EventArgs)
        TimerRunningProgressBar.Enabled = False
        OnToolStripMenuItemKPI.Checked = True
        OffToolStripMenuItemKPI.Checked = False
        ToolStripProgressBarRunning.Style = ProgressBarStyle.Marquee
    End Sub

    Private Sub OffToolStripMenuItem_Click(sender As Object, e As EventArgs)
        TimerRunningProgressBar.Enabled = True
        OffToolStripMenuItemKPI.Checked = True
        OnToolStripMenuItemKPI.Checked = False
        ToolStripProgressBarRunning.Style = ProgressBarStyle.Blocks
        ToolStripProgressBarRunning.Value = 0
    End Sub

    Private Sub ButtonCreateDatabase_Click(sender As Object, e As EventArgs) Handles ButtonCreateDatabase.Click

        CreateDataBaseTables(ListBoxCluster.SelectedItem)

    End Sub


    Private Sub CreateDataBaseTables(ByVal ClusterName)

        If ListBoxCustomerInfo.SelectedIndex = -1 Then
            MessageBox.Show("Select Company for Update", "Select", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Exit Sub
        End If


        ButtonCreateDatabase.BackColor = Color.LightSalmon
        ButtonCreateDatabase.Refresh()

        Dim tablestring As String = ""
        Dim strconnectSQLCommandTypeControl As SqlConnection = New SqlConnection("")
        CustomerDatabaseName = TextBoxDBName.Text.Trim()

        If CustomerDatabaseName = "" Then
            MsgBox("Select Customer")
            Exit Sub
        End If
        Try
            strconnectSQLCommandTypeControl.Close()
        Catch ex As Exception
        End Try

        Dim SqlStringUpdateTemp As String = ""
        Dim CustomerNameTemp As String = ListBoxCustomerInfo.SelectedItem


        'this is for the sql command connection
        If ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Standard" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachSQLStd" & ";PWD=" & "PaLm78jxY" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "awsrdsbizcoachsqlstandard.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433"

        ElseIf ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "ImpRDSBizCoach" & ";PWD=" & "impBiz16!" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "awsrdsbizcoach.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433"
        ElseIf ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express - BizCoach2" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachDataLoading" & ";PWD=" & "JaMyt45!ord" &
                ";DATABASE=" & "BizCoachData" & CustomerNameTemp &
             ";SERVER=" & "ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433"
        Else
            MsgBox("Invalid Cluster")
            Exit Sub
        End If



        Dim CreateDBOK As Boolean = False

        Dim myCommand As String
        Dim cmd As SqlCommand

        'Now the base tables
        'table created
        '[Outlet Details]
        '[KPI Measures]
        '[KPI Values]
        '[KPI Values Archive]
        '[CRMActivities]
        '[Alias]
        '[AssetDepreciation]
        '[AssetHeader]
        '[AssetLines]
        '[AutomaticDataFeeds]
        '[BudgetLines]
        '[ChartOfAccounts]

        tablestring =
                "        CREATE TABLE [dbo].[POSSales]( " &
                "    [ParentCompany] [nvarchar](50) NULL, " &
                "    [CompanyName] [nvarchar](50) NULL, " &
                "    [IndexNumber] [Int] NULL, " &
                "	[Date Record] [date] NULL, " &
                "	[Outlet Name] [nvarchar](50) NULL, " &
                "	[Reference Number] [nchar](30) NULL, " &
                "	[Food] [Decimal](18, 4) NULL, " &
                "    [Beverage] [Decimal](18, 4) NULL, " &
                "    [Wine] [Decimal](18, 4) NULL, " &
                "    [Others] [Decimal](18, 4) NULL, " &
                "	[ECP BV] [decimal](18, 4) NULL, " &
                "	[ECP Wine] [decimal](18, 4) NULL, " &
                "	[Date Time] [datetime] NULL, " &
                "	[Unique Identity] [uniqueidentifier] Not NULL, " &
                "	[OutletName] [nvarchar](50) NULL, " &
                "	[Total Net Sales] [decimal](18, 3) NULL, " &
                "	[CurrencyCode] [nchar](15) NULL, " &
                "	[Total Gross Sales] [decimal](18, 3) NULL, " &
                "	[Remarks] [ntext] NULL, " &
                "    [Weather] [nvarchar](30) NULL, " &
                "    [TestData] [bit] NULL, " &
                "    [YearCode] [nchar](10) NULL, " &
                "    [MonthCode] [nchar](10) NULL, " &
                "    [DayOfWeekNumber] [nchar](10) NULL, " &
                "    [DayOfYear] [nchar](10) NULL, " &
                "    [MonthCodeShort] [nchar](10) NULL, " &
                "    [DayOfWeekName] [nchar](10) NULL, " &
                "    [DayOfWeekNameShort] [nchar](10) NULL, " &
                "	[Dinner Covers] [decimal](18, 0) NULL, " &
                "	[Lunch Covers] [decimal](18, 0) NULL, " &
                "	[Breakfast Covers] [decimal](18, 0) NULL, " &
                "	[Lunch Cover Average] [decimal](18, 3) NULL, " &
                "	[Average Check] [decimal](18, 3) NULL, " &
                "	[Breakfast Cover Average] [decimal](18, 3) NULL, " &
                "	[Payment Total] [decimal](18, 3) NULL, " &
                "	[Discount Total] [decimal](18, 3) NULL, " &
                "	[Five Percent Tax] [decimal](18, 3) NULL, " &
                "	[Ten Percent Charge] [decimal](18, 3) NULL, " &
                "	[Dinner Cover Average] [decimal](18, 3) NULL, " &
                "	[Manager Dining Benefit] [decimal](18, 3) NULL, " &
                "	[EntbyEclipseCharge] [Decimal](18, 3) NULL, " &
                "    [EntbyManagersCharge] [Decimal](18, 3) NULL, " &
                "    [EntPromotionsCharge] [Decimal](18, 3) NULL, " &
                "	[Octopus Charge] [decimal](18, 3) NULL, " &
                "	[Points Charge] [decimal](18, 3) NULL, " &
                "	[China CC Charge] [decimal](18, 3) NULL, " &
                "	[JCB Charge] [decimal](18, 3) NULL, " &
                "	[Diner Charge] [decimal](18, 3) NULL, " &
                "	[Master Charge] [decimal](18, 3) NULL, " &
                "	[VISA Charge] [decimal](18, 3) NULL, " &
                "	[Amex Charge] [decimal](18, 3) NULL, " &
                "	[Cash Charge] [decimal](18, 3) NULL, " &
                "	[Wastage Charge] [decimal](18, 3) NULL, " &
                "	[Staff Drinks Charge] [decimal](18, 3) NULL, " &
                "	[Manager Meals Charge] [decimal](18, 3) NULL, " &
                "	[Food Tasting Charge] [decimal](18, 3) NULL, " &
                "	[Discount 50 Total] [decimal](18, 3) NULL, " &
                "	[Cigarette Charge] [decimal](18, 3) NULL, " &
                "	[City Ledger Charge] [decimal](18, 3) NULL, " &
                "	[Less Cr Card Tips Charge] [decimal](18, 3) NULL, " &
                "	[Gross Sales] [decimal](18, 3) NULL, " &
                "	[Rounding Total] [decimal](18, 3) NULL, " &
                "	[CashVoucherCoupon] [Decimal](18, 3) NULL, " &
                "    [Barter] [Decimal](18, 3) NULL, " &
                "    [Discount5] [Decimal](18, 3) NULL, " &
                "    [Discount10] [Decimal](18, 3) NULL, " &
                "    [Discount15] [Decimal](18, 3) NULL, " &
                "    [Discount20] [Decimal](18, 3) NULL, " &
                "    [Discount25] [Decimal](18, 3) NULL, " &
                "    [Discount25_30] [Decimal](18, 3) NULL, " &
                "    [Discount30] [Decimal](18, 3) NULL, " &
                "    [Discount35] [Decimal](18, 3) NULL, " &
                "    [Description] [nvarchar](250) NULL, " &
                "    [DescriptionLong] [ntext] NULL, " &
                "    [ItemName] [nvarchar](50) NULL, " &
                "    [ItemCode] [nchar](20) NULL, " &
                "    [CustomerName] [nvarchar](50) NULL, " &
                "    [CustomerCode] [nchar](20) NULL, " &
                "	[Quantity Sold] [decimal](18, 4) NULL, " &
                "	[Return] [bit] NULL, " &
                "    [Group01] [nvarchar](30) NULL, " &
                "    [POSSalesGroup01] [nvarchar](30) NULL, " &
                "    [Group02] [nvarchar](30) NULL, " &
                "    [POSSalesGroup02] [nvarchar](30) NULL, " &
                "    [Group03] [nvarchar](30) NULL, " &
                "    [POSSalesGroup03] [nvarchar](30) NULL, " &
                "    [Group04] [nvarchar](30) NULL, " &
                "    [POSSalesGroup04] [nvarchar](30) NULL, " &
                "    [Group05] [nvarchar](30) NULL, " &
                "    [POSSalesGroup05] [nvarchar](30) NULL, " &
                "    [Group06] [nvarchar](30) NULL, " &
                "    [POSSalesGroup06] [nvarchar](30) NULL, " &
                "    [Group07] [nvarchar](30) NULL, " &
                "    [POSSalesGroup07] [nvarchar](30) NULL, " &
                "    [DayOfMonth] [nchar](2) NULL, " &
                "    [LoadName] [nvarchar](30) NULL, " &
                "	[Brunch Covers] [decimal](18, 0) NULL, " &
                "	[Brunch Cover Average] [decimal](18, 3) NULL, " &
                "	[Foodora] [Decimal](18, 3) NULL, " &
                "	[Food By Web] [decimal](18, 3) NULL, " &
                "	[Delivery Dot com] [decimal](18, 3) NULL, " &
                "	[Food Panda] [decimal](18, 3) NULL, " &
                "	[DAD] [Decimal](18, 3) NULL, " &
                "	[Soho Delivery] [decimal](18, 3) NULL, " &
                "	[Food By Fone] [decimal](18, 3) NULL, " &
                "	[Uber] [Decimal](18, 3) NULL, " &
                "    [Cigarette] [Decimal](18, 3) NULL, " &
                "    [Merchandise] [Decimal](18, 3) NULL, " &
                "	[Other Income] [decimal](18, 3) NULL, " &
                "	[10% Service Charge] [decimal](18, 3) NULL, " &
                "	[Covers] [Decimal](18, 0) NULL, " &
                "    [COGS] [Decimal](18, 3) NULL, " &
                "    [Expenses] [Decimal](18, 3) NULL, " &
                "    [WeekEnd] [bit] NULL, " &
                "    [Weekday] [bit] NULL, " &
                "    [WorkDay] [bit] NULL, " &
                "	[Number Work Days In Month] [int] NULL, " &
                "	[Number NonWork Days In Month] [int] NULL, " &
                "	[Number Days In Month] [int] NULL, " &
                "	[Day Of Month] [int] NULL, " &
                "	[WeekNumber] [Decimal](18, 0) NULL, " &
                "    [HourCode] [nchar](10) NULL, " &
                "    [MinuteCode] [nchar](10) NULL, " &
                "    [SecondCode] [nchar](10) NULL, " &
                "    [LastUpdated] [DateTime] NULL, " &
                "    [PublicHoliday] [bit] NULL, " &
                "	[Line Number] [int] NULL, " &
                "	[Line Total] [decimal](18, 3) NULL, " &
                "	[MonthNumber] [nchar](2) NULL, " &
                "    [MonthNumber2Digits] [nchar](2) NULL, " &
                "    [Brand] [nvarchar](50) NULL, " &
                "    [PaymentType01] [nchar](20) NULL, " &
                "    [PaymentType02] [nchar](20) NULL, " &
                "    [PaymentAmount01] [Decimal](18, 3) NULL, " &
                "    [PaymentAmount02] [Decimal](18, 3) NULL, " &
                "    [AMPM] [nchar](2) NULL, " &
                "	[10 Percent Service Charge] [decimal](18, 3) NULL, " &
                "	[Breakfast Check Average] [decimal](18, 3) NULL, " &
                "	[Breakfast PAX] [decimal](18, 3) NULL, " &
                "	[Breakfast Sales] [decimal](18, 3) NULL, " &
                "	[Brunch Sales] [decimal](18, 3) NULL, " &
                "	[Brunch Check Average] [decimal](18, 3) NULL, " &
                "	[Brunch PAX] [decimal](18, 3) NULL, " &
                "	[Tea Sales] [decimal](18, 3) NULL, " &
                "	[Tea Check Average] [decimal](18, 3) NULL, " &
                "	[Tea PAX] [decimal](18, 3) NULL, " &
                "	[Dinner Sales] [decimal](18, 3) NULL, " &
                "	[Dinner Check Average] [decimal](18, 3) NULL, " &
                "	[Dinner PAX] [decimal](18, 3) NULL, " &
                "	[Late Night Sales] [decimal](18, 3) NULL, " &
                "	[Late Night Check Average] [decimal](18, 3) NULL, " &
                "	[Late Night PAX] [decimal](18, 3) NULL, " &
                "	[Party Sales] [decimal](18, 3) NULL, " &
                "	[Party Check Average] [decimal](18, 3) NULL, " &
                "	[Party PAX] [decimal](18, 3) NULL, " &
                "	[Number of Events] [decimal](18, 3) NULL, " &
                "	[Revenue per Event] [decimal](18, 3) NULL, " &
                "	[Number of Event Pax] [decimal](18, 3) NULL, " &
                "	[Number of Loyalty Pax] [decimal](18, 3) NULL, " &
                "	[Number of Cards Loyalty] [decimal](18, 3) NULL, " &
                "	[Daily Income from Takeaway] [decimal](18, 3) NULL, " &
                "	[Revenue Generated Loyalty] [decimal](18, 3) NULL, " &
                "	[Deliveroo] [Decimal](18, 3) NULL, " &
                "	[Catering Lunch Box Income] [decimal](18, 3) NULL, " &
                "	[Loyalty Card Income] [decimal](18, 3) NULL, " &
                "	[Delivery Settlement] [decimal](18, 3) NULL, " &
                "	[Discount] [Decimal](18, 3) NULL, " &
                "	[Union Pay] [decimal](18, 3) NULL, " &
                "	[Gift Certificate] [decimal](18, 3) NULL, " &
                "	[Deposit Redemption Paid] [decimal](18, 3) NULL, " &
                "	[Total PAX] [decimal](18, 3) NULL, " &
                "	[Lunch Sales] [decimal](18, 3) NULL, " &
                "	[Lunch Check Average] [decimal](18, 3) NULL, " &
                "	[Lunch PAX] [decimal](18, 3) NULL, " &
                "	[Tips] [Decimal](18, 3) NULL, " &
                "    [Complaint] [Decimal](18, 3) NULL, " &
                " Constraint [PK_POSSales] PRIMARY KEY CLUSTERED " &
                "( " &
                "	[Unique Identity] ASC " &
                ")WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] " &
                ") ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]"

        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try


        tablestring =
"        CREATE TABLE [dbo].[ChartOfAccounts]( " &
"    [ParentCompany] [nvarchar](50) NULL, " &
"    [CompanyName] [nvarchar](50) NULL, " &
"    [AccountType] [nvarchar](50) NULL, " &
"    [AccountNumber] [nvarchar](35) NULL, " &
"    [AccountName] [nvarchar](150) NULL, " &
"    [Currency] [nchar](15) NULL, " &
"    [SummaryAccount] [bit] NULL, " &
"    [UniqueIndex] [uniqueidentifier] NULL, " &
"    [LanguageCode] [nchar](10) NULL, " &
"    [Description] [nvarchar](250) NULL, " &
"    [AccountBalance] [Decimal](18, 3) NULL, " &
"	[Main Type] [nvarchar](50) NULL, " &
"	[Sub Type] [nvarchar](50) NULL, " &
"	[Segment] [nvarchar](15) NULL, " &
"    [Division] [nchar](30) NULL, " &
"    [Department] [nchar](30) NULL, " &
"    [TaxType] [nchar](10) NULL, " &
"    [SortType01] [nchar](15) NULL, " &
"    [SortOrder01] [nchar](10) NULL, " &
"    [SortType02] [nchar](15) NULL, " &
"    [SortOrder02] [nchar](10) NULL, " &
"    [SortType03] [nchar](15) NULL, " &
"    [SortOrder03] [nchar](10) NULL, " &
"    [SortType04] [nchar](15) NULL, " &
"    [SortOrder04] [nchar](10) NULL, " &
"    [BizCoachDateCreated] [DateTime] NULL, " &
"    [Location] [nvarchar](30) NULL, " &
"	[Analytics Measure 01] [nchar](30) NULL, " &
"	[Analytics Measure 02] [nchar](30) NULL, " &
"	[Analytics Measure 03] [nchar](30) NULL, " &
"	[Analytics Measure 04] [nchar](30) NULL, " &
"	[ExternalSystemID] [nchar](40) NULL, " &
 "   [ExternalSystemQualifier] [nchar](40) NULL, " &
 "   [LastUpdated] [DateTime] NULL " &
") ON [PRIMARY]"

        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try


        tablestring =
"        CREATE TABLE [dbo].[BudgetLines]( " &
"    [ParentCompany] [nvarchar](50) NULL, " &
"    [CompanyName] [nvarchar](50) NULL, " &
"	[Budget Date] [date] NULL, " &
"	[AccountNumber] [nvarchar](80) NULL, " &
"    [Description] [nvarchar](255) NULL, " &
"    [Currency] [nvarchar](50) NULL, " &
"	[Exchange Rate] [decimal](18, 4) NULL, " &
"	[Column08] [nvarchar](50) NULL, " &
"    [Column09] [nvarchar](50) NULL, " &
"    [Column10] [nvarchar](50) NULL, " &
"    [Amount] [Decimal](18, 4) NULL, " &
"    [MonthCode01] [nvarchar](50) NULL, " &
"    [Group01] [nvarchar](50) NULL, " &
"    [BudgetLinesGroup01] [nvarchar](50) NULL, " &
"    [Group02] [nvarchar](50) NULL, " &
"    [BudgetLinesGroup02] [nvarchar](50) NULL, " &
"    [Group03] [nvarchar](50) NULL, " &
"    [BudgetLinesGroup03] [nvarchar](50) NULL, " &
"    [Group04] [nvarchar](50) NULL, " &
"    [BudgetLinesGroup04] [nvarchar](50) NULL, " &
"    [Group05] [nvarchar](50) NULL, " &
"    [BudgetLinesGroup05] [nvarchar](50) NULL, " &
"    [YearCode] [nchar](4) NULL, " &
"    [MonthCode] [nchar](10) NULL, " &
"    [DayOfWeekNumber] [nchar](3) NULL, " &
"    [DayOfYear] [nchar](3) NULL, " &
"    [MonthCodeShort] [nchar](3) NULL, " &
"    [DayOfWeekName] [nchar](9) NULL, " &
"    [DayOfWeekNameShort] [nchar](4) NULL, " &
"    [AmountCurrency] [Decimal](18, 4) NULL, " &
"    [Sales] [Decimal](18, 3) NULL, " &
"    [UniqueID] [uniqueidentifier] Not NULL, " &
"    [AmountBase] [Decimal](18, 3) NULL, " &
"    [DayOfMonth] [nchar](2) NULL, " &
"    [LoadName] [nvarchar](30) NULL, " &
"	[Vendor Code] [nvarchar](100) NULL, " &
"	[Customer Code] [nvarchar](100) NULL, " &
"	[WeekEnd] [bit] NULL, " &
"    [Weekday] [bit] NULL, " &
"    [WorkDay] [bit] NULL, " &
"	[Number Work Days In Month] [int] NULL, " &
"	[Number NonWork Days In Month] [int] NULL, " &
"	[Number Days In Month] [int] NULL, " &
"	[Day Of Month] [int] NULL, " &
"	[WeekNumber] [Decimal](18, 0) NULL, " &
"    [LastDateModified] [DateTime] NULL, " &
"    [LastUpdated] [DateTime] NULL, " &
"	[Outlet Name] [nvarchar](50) NULL, " &
"	[HourCode] [nchar](2) NULL, " &
"    [MinuteCode] [nchar](2) NULL, " &
"    [SecondCode] [nchar](2) NULL, " &
"    [AMPM] [nchar](2) NULL, " &
"    [MonthNumber] [nchar](2) NULL, " &
"    [MonthNumber2Digits] [nchar](2) NULL, " &
"    [ItemCode] [nchar](60) NULL, " &
"    [Brand] [nvarchar](50) NULL, " &
"    [ItemName] [nvarchar](50) NULL, " &
"    [Quantity] [Decimal](18, 3) NULL, " &
"    [BudgetName] [nvarchar](50) NULL, " &
" Constraint [PK_BudgetLines] PRIMARY KEY CLUSTERED " &
"( " &
"	[UniqueID] Asc " &
")WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] " &
") ON [PRIMARY]"

        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try


        tablestring =
"        CREATE TABLE [dbo].[AutomaticDataFeeds]( " &
"    [ParentCompany] [nvarchar](50) NULL, " &
"    [CustomerName] [nvarchar](50) NULL, " &
"    [DataType] [nvarchar](50) NULL, " &
"	[Data Reading] [decimal](18, 4) NULL, " &
"	[Data Unit] [nvarchar](20) NULL, " &
"	[DateTimeReading] [DateTime] NULL, " &
"    [TraceUnit] [nvarchar](50) NULL, " &
"    [SerialNumber] [nvarchar](50) NULL, " &
"    [MeterType] [nchar](15) NULL, " &
"    [UniqueID] [uniqueidentifier] NULL, " &
"    [YearCode] [nchar](4) NULL, " &
"    [DayOfYear] [nchar](3) NULL, " &
"    [DayOfMonth] [nchar](3) NULL, " &
"    [MonthCode] [nchar](10) NULL, " &
"    [DayOfWeekNumber] [nchar](10) NULL, " &
"    [MonthCodeShort] [nchar](10) NULL, " &
"    [DayOfWeekName] [nchar](10) NULL, " &
"    [DayOfWeekNameShort] [nchar](5) NULL, " &
"    [HourCode] [nchar](3) NULL, " &
"    [MinuteCode] [nchar](3) NULL, " &
"    [SecondCode] [nchar](3) NULL, " &
"    [AMPM] [nchar](5) NULL " &
") ON [PRIMARY]"

        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try

        tablestring =
"        CREATE TABLE [dbo].[AssetLines]( " &
"    [ParentCompany] [nvarchar](50) NULL, " &
"    [CompanyName] [nvarchar](50) NULL, " &
"    [AssetClass] [nvarchar](50) NULL, " &
"    [AssetCode] [nvarchar](50) NULL, " &
"    [AssetName] [nvarchar](50) NULL, " &
"    [LastUpdated] [DateTime] NULL " &
") On [PRIMARY]"

        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try

        tablestring =
"        CREATE TABLE [dbo].[AssetHeader]( " &
"    [ParentCompany] [nvarchar](50) NULL, " &
"    [CompanyName] [nvarchar](50) NULL, " &
"    [AssetClass] [nvarchar](50) NULL " &
") On [PRIMARY]"

        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try

        tablestring =
"        CREATE TABLE [dbo].[AssetDepreciation]( " &
"    [ParentCompany] [nvarchar](50) NULL, " &
"    [CompanyName] [nvarchar](50) NULL, " &
"    [AssetClass] [nvarchar](50) NULL, " &
"    [AssetCode] [nvarchar](50) NULL, " &
"    [AssetName] [nvarchar](50) NULL, " &
"    [DepreciationsCode] [nvarchar](50) NULL " &
") On [PRIMARY]"

        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try


        tablestring =
"        CREATE TABLE [dbo].[Alias]( " &
"    [ParentCompany] [nvarchar](50) NULL, " &
"    [CompanyName] [nvarchar](50) NULL, " &
"    [TableName] [nvarchar](30) NULL, " &
"    [ColumnName] [nvarchar](30) NULL, " &
"    [ColumnAlias] [nvarchar](30) NULL " &
") On [PRIMARY]"

        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try

        tablestring =
"        CREATE TABLE [dbo].[Outlet Details]( " &
"    [ParentCompany] [nvarchar](50) NULL, " &
"    [CompanyName] [nvarchar](50) NULL, " &
"	[Outlet Name] [nvarchar](50) NULL, " &
"	[Unique Identity] [uniqueidentifier] NULL, " &
"	[Date Opened] [date] NULL, " &
"	[Date Closed] [date] NULL, " &
"	[Tables] [Int] NULL, " &
"    [Seats] [Decimal](18, 1) NULL, " &
"	[Square Meter] [numeric](18, 2) NULL, " &
"	[Square Foot] [numeric](18, 2) NULL, " &
"	[Description] [nvarchar](250) NULL, " &
"	[Description Long] [nvarchar](500) NULL, " &
"	[Longitude] [Decimal](18, 8) NULL, " &
"    [Lattitude] [Decimal](18, 8) NULL, " &
"    [LastUpdated] [DateTime] NULL, " &
"    [OutletGroup01] [nvarchar](50) NULL, " &
"    [OutletGroup02] [nvarchar](50) NULL, " &
"    [OutletGroup03] [nvarchar](50) NULL, " &
"    [OutletGroup04] [nvarchar](50) NULL, " &
"    [OutletGroup05] [nvarchar](50) NULL, " &
"    [OutletCountry] [nchar](20) NULL, " &
"    [Lattitude01] [numeric](18, 7) NULL, " &
"    [Lattitude02] [numeric](18, 7) NULL, " &
"    [Lattitude03] [numeric](18, 7) NULL, " &
"    [Longitude01] [numeric](18, 7) NULL, " &
"    [Longitude02] [numeric](18, 7) NULL, " &
"    [Longitude03] [numeric](18, 7) NULL, " &
"	[Outlet Code] [nvarchar](50) NULL, " &
"	[Prediction Model Name] [nvarchar](50) NULL " &
") On [PRIMARY]"

        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try


        tablestring =
"        CREATE TABLE [dbo].[CRMActivities]( " &
"    [ParentCompany] [nvarchar](50) NULL, " &
"    [CompanyName] [nvarchar](50) NULL, " &
"    [BizCoachActivityType] [nchar](15) NULL, " &
"    [CRMActivitiesGroup01] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup02] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup03] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup04] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup05] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup06] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup07] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup08] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup09] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup10] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup11] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup12] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup13] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup14] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup15] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup16] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup17] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup18] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup19] [nvarchar](50) NULL, " &
"    [CRMActivitiesGroup20] [nvarchar](50) NULL, " &
"	[Customer Name] [nvarchar](50) NULL, " &
"	[Unique Identity] [uniqueidentifier] NULL, " &
"	[Customer Code] [nchar](15) NULL, " &
"	[ActivityDate] [DateTime] NULL, " &
"    [ActivityStatus] [nvarchar](50) NULL, " &
"    [LastUpdated] [DateTime] NULL, " &
"    [ActivityDescription] [nvarchar](250) NULL, " &
"    [ActivityObjective] [nvarchar](50) NULL, " &
"    [AdditionalNotes] [nvarchar](250) NULL, " &
"    [ActivitySubject] [nvarchar](100) NULL, " &
"    [ActivityType] [nvarchar](50) NULL, " &
"    [ActivitySubType] [nvarchar](50) NULL, " &
"    [DataSource] [nchar](10) NULL, " &
"    [DataType] [nchar](10) NULL, " &
"    [ActivityLocation] [nvarchar](100) NULL, " &
"    [YearCode] [nchar](10) NULL, " &
"    [MonthCode] [nchar](10) NULL, " &
"    [DayOfWeekNumber] [nchar](10) NULL, " &
"    [DayOfYear] [nchar](10) NULL, " &
"    [MonthCodeShort] [nchar](10) NULL, " &
"    [DayOfWeekName] [nchar](10) NULL, " &
"    [DayOfWeekNameShort] [nchar](10) NULL, " &
"    [DayOfMonth] [nchar](2) NULL, " &
"    [WeekEnd] [bit] NULL, " &
"    [Weekday] [bit] NULL, " &
"    [WorkDay] [bit] NULL, " &
"	[Number Work Days In Month] [int] NULL, " &
"	[Number NonWork Days In Month] [int] NULL, " &
"	[Number Days In Month] [int] NULL, " &
"	[Day Of Month] [int] NULL, " &
"	[WeekNumber] [Decimal](18, 0) NULL, " &
"    [HourCode] [nchar](2) NULL, " &
"    [MinuteCode] [nchar](2) NULL, " &
"    [SecondCode] [nchar](2) NULL, " &
"    [AMPM] [nchar](2) NULL, " &
"    [LastUpdated1] [DateTime] NULL, " &
"    [PublicHoliday] [bit] NULL, " &
"    [MonthNumber] [nchar](2) NULL, " &
"    [MonthNumber2Digits] [nchar](2) NULL " &
") On [PRIMARY]"


        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try



        tablestring =
"        CREATE TABLE [dbo].[KPI Measures]( " &
"    [ParentCompany] [nvarchar](50) NULL, " &
"    [CompanyName] [nvarchar](50) NULL, " &
"	[KPI Type] [nvarchar](50) NULL, " &
"	[KPI Measure Name] [nvarchar](50) NULL, " &
"	[KPI Measure Order] [int] NULL " &
") On [PRIMARY]"

        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try


        tablestring =
"CREATE TABLE [dbo].[KPI Values Archive]( " &
"	[ParentCompany] [nvarchar](50) NULL, " &
"    [CompanyName] [nvarchar](50) NULL, " &
"    [YearCode] [nchar](10) NULL, " &
"    [MonthCode] [nchar](10) NULL, " &
"    [DayOfWeekNumber] [nchar](10) NULL, " &
"    [DayOfYear] [nchar](10) NULL, " &
"    [MonthCodeShort] [nchar](10) NULL, " &
"    [DayOfWeekName] [nchar](10) NULL, " &
"    [DayOfWeekNameShort] [nchar](10) NULL, " &
"    [DayOfMonth] [nchar](2) NULL, " &
"    [WeekEnd] [bit] NULL, " &
"    [Weekday] [bit] NULL, " &
"    [WorkDay] [bit] NULL, " &
"	[Number Work Days In Month] [int] NULL, " &
"	[Number NonWork Days In Month] [int] NULL, " &
"	[Number Days In Month] [int] NULL, " &
"	[Day Of Month] [int] NULL, " &
"	[WeekNumber] [Decimal](18, 0) NULL, " &
"	[KPI Name] [nvarchar](100) NULL, " &
"	[KPI Value Number] [decimal](18, 5) NULL, " &
"	[KPI Value String] [nvarchar](255) NULL, " &
"	[KPI Value YesNo] [bit] NULL, " &
"	[Outlet Name] [nvarchar](50) NULL, " &
"	[LastUpdated] [DateTime] NULL, " &
"	[Unique Identity] [uniqueidentifier] NULL, " &
"	[HourCode] [nchar](2) NULL, " &
"    [MinuteCode] [nchar](2) NULL, " &
"    [SecondCode] [nchar](2) NULL, " &
"    [AMPM] [nchar](2) NULL, " &
"    [PublicHoliday] [bit] NULL, " &
"	[Date Record] [date] NULL, " &
"	[CalculationDetails] [ntext] NULL, " &
"    [KPIGroup01] [nchar](40) NULL, " &
"    [KPIGroup02] [nchar](40) NULL, " &
"    [KPIGroup03] [nchar](40) NULL, " &
"    [KPIGroup04] [nchar](40) NULL, " &
"    [KPIGroup05] [nchar](40) NULL, " &
"    [KPIGroup06] [nchar](40) NULL, " &
"    [KPIGroup07] [nchar](40) NULL, " &
"    [KPIGroup08] [nchar](40) NULL, " &
"    [KPIGroup09] [nchar](40) NULL, " &
"    [KPIGroup10] [nchar](40) NULL, " &
"	[Detailed Description] [ntext] NULL, " &
"	[Gross Margin] [decimal](18, 3) NULL, " &
"	[Cost Of Sales] [decimal](18, 3) NULL, " &
"	[Expenses] [Decimal](18, 3) NULL, " &
"	[Net Profit] [decimal](18, 3) NULL, " &
"	[Net Profit %] [decimal](18, 3) NULL, " &
"	[Gross Margin %] [decimal](18, 3) NULL, " &
"	[Sales] [Decimal](18, 3) NULL, " &
"	[Date Of KPI] [date] NULL " &
") On [PRIMARY] TEXTIMAGE_ON [PRIMARY]"



        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try

        tablestring =
"        CREATE TABLE [dbo].[KPI Values]( " &
"    [ParentCompany] [nvarchar](50) NULL, " &
"    [CompanyName] [nvarchar](50) NULL, " &
"    [YearCode] [nchar](10) NULL, " &
"    [MonthCode] [nchar](10) NULL, " &
"    [DayOfWeekNumber] [nchar](10) NULL, " &
"    [DayOfYear] [nchar](10) NULL, " &
"    [MonthCodeShort] [nchar](10) NULL, " &
"    [DayOfWeekName] [nchar](10) NULL, " &
"    [DayOfWeekNameShort] [nchar](10) NULL, " &
"    [DayOfMonth] [nchar](2) NULL, " &
"    [WeekEnd] [bit] NULL, " &
"    [Weekday] [bit] NULL, " &
"    [WorkDay] [bit] NULL, " &
"	[Number Work Days In Month] [int] NULL, " &
"	[Number NonWork Days In Month] [int] NULL, " &
"	[Number Days In Month] [int] NULL, " &
"	[Day Of Month] [int] NULL, " &
"	[WeekNumber] [Decimal](18, 0) NULL, " &
"	[KPI Name] [nvarchar](100) NULL, " &
"	[KPI Value Number] [decimal](18, 5) NULL, " &
"	[KPI Value String] [nvarchar](255) NULL, " &
"	[KPI Value YesNo] [bit] NULL, " &
"	[Outlet Name] [nvarchar](50) NULL, " &
"	[Unique Identity] [uniqueidentifier] NULL, " &
"	[HourCode] [nchar](2) NULL, " &
"    [MinuteCode] [nchar](2) NULL, " &
"    [SecondCode] [nchar](2) NULL, " &
"    [AMPM] [nchar](2) NULL, " &
"    [LastUpdated] [DateTime] NULL, " &
"	[Date Record] [date] NULL, " &
"	[Detailed Description] [ntext] NULL, " &
"	[Gross Margin] [decimal](18, 3) NULL, " &
"	[Cost Of Sales] [decimal](18, 3) NULL, " &
"	[Expenses] [Decimal](18, 3) NULL, " &
"	[Net Profit] [decimal](18, 3) NULL, " &
"	[Net Profit %] [decimal](18, 3) NULL, " &
"	[Gross Margin %] [decimal](18, 3) NULL, " &
"	[Sales] [Decimal](18, 3) NULL, " &
"    [MonthNumber] [nchar](2) NULL, " &
"    [MonthNumber2Digits] [nchar](2) NULL, " &
"    [PublicHoliday] [bit] NULL, " &
"    [CalculationDetails] [ntext] NULL, " &
"    [KPIGroup01] [nchar](40) NULL, " &
"    [KPIGroup02] [nchar](40) NULL, " &
"    [KPIGroup03] [nchar](40) NULL, " &
"    [KPIGroup04] [nchar](40) NULL, " &
"    [KPIGroup05] [nchar](40) NULL, " &
"    [KPIGroup06] [nchar](40) NULL, " &
"    [KPIGroup07] [nchar](40) NULL, " &
"    [KPIGroup08] [nchar](40) NULL, " &
"    [KPIGroup09] [nchar](40) NULL, " &
"    [KPIGroup10] [nchar](40) NULL " &
 "       ) On [PRIMARY] TEXTIMAGE_ON [PRIMARY]"


        myCommand = tablestring
        Try
            cmd = New SqlCommand(tablestring, strconnectSQLCommandTypeControl) ' create command with connection and query string 
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
        Catch
            'err 5 is already exists
            If Err.Number <> 5 Then
                MsgBox(Err.Description)
            End If
        End Try
        Try
            cmd.Connection.Close()
        Catch ex As Exception
        End Try



        ButtonCreateDatabase.BackColor = Color.LightGreen
        ButtonCreateDatabase.Refresh()



    End Sub

    Private Sub ButtonCreateViews_Click(sender As Object, e As EventArgs) Handles ButtonCreateViews.Click

        If ListBoxCustomerInfo.SelectedIndex = -1 Then
            MessageBox.Show("Select Company For Update", "Select", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Exit Sub
        End If
        ButtonCreateViews.BackColor = Color.LightSalmon
        ButtonCreateViews.Refresh()

        CreateViews(ListBoxCluster.SelectedItem)

        ButtonCreateViews.BackColor = Color.LightGreen
        ButtonCreateViews.Refresh()

    End Sub


    Private Sub CreateViews(ByRef ClusterName)

        'this is for the sql command connection

        CustomerDatabaseName = TextBoxDBName.Text.Trim()

        If CustomerDatabaseName = "" Then
            MsgBox("Select Customer")
            Exit Sub
        End If
        Try
            strconnectSQLCommandTypeControl.Close()
        Catch ex As Exception
        End Try

        Dim SqlStringUpdateTemp As String = ""
        Dim CustomerNameTemp As String = ListBoxCustomerInfo.SelectedItem


        'this is for the sql command connection
        If ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Standard" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachSQLStd" & ";PWD=" & "PaLm78jxY" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "awsrdsbizcoachsqlstandard.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433"

        ElseIf ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "ImpRDSBizCoach" & ";PWD=" & "impBiz16!" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "awsrdsbizcoach.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433"
        ElseIf ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express - BizCoach2" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachDataLoading" & ";PWD=" & "JaMyt45!ord" &
                ";DATABASE=" & "BizCoach" & CustomerNameTemp &
             ";SERVER=" & "ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433"
        Else
            MsgBox("Invalid Cluster")
            Exit Sub
        End If


        Dim myCommand As String 'to store the sql command to be executed
        '        myCommand = "Alter Table JournalLines add HourCode nchar(10),  MinuteCode nchar(10), SecondCode nchar(10),  AMPM nchar(3)" 'the command that creates new database
        Dim cmd As SqlCommand = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            '           cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Added HourCode MinuteCode SecondCode AMPM To JournalLines For " & ListBoxCustomerInfo.SelectedItem)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()
        ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
        ListBoxUpdateStatus.Refresh()

    End Sub

    Private Sub ButtonDBUpdate_Click(sender As Object, e As EventArgs) Handles ButtonDBUpdate.Click

        DBUpdate()

    End Sub


    Private Sub DBUpdate()

        'now sets the tab back to here
        TabControlMain.SelectedIndex = 1
        TabControlMain.Refresh()


        ListBoxUpdateStatus.Items.Clear()
        ButtonDBUpdate.BackColor = Color.LightSalmon
        ButtonDBUpdate.Refresh()

        If CheckBoxUpdateAll.Checked = True Then
            For tt = 0 To ListBoxCustomerInfo.Items.Count - 1
                ListBoxCustomerInfo.SelectedIndex = tt
                ListBoxUpdateStatus.Items.Add("-------------------------------------------------")
                ListBoxUpdateStatus.Items.Add("Processing " & ListBoxCustomerInfo.SelectedItem)
                DatabaseUpdates("Customer")
                ListBoxUpdateStatus.Items.Add("-------------------------------------------------")
                ListBoxUpdateStatus.Refresh()
            Next
            'this does the standard database also
            DatabaseUpdates("Standard")
        Else
            DatabaseUpdates("Customer")
        End If
        ButtonDBUpdate.BackColor = Color.LightGreen
        ButtonDBUpdate.Refresh()
    End Sub


    Private Sub DatabaseUpdates(ByVal TypeOfUpdate)

        'The older routines are at DatabaseUpdatesArchive

        'newer routines are at
        'DatabaseUpdatesFeb2018(TypeOfUpdate)


        Dim RecordExists As Boolean = False

        CustomerDatabaseName = TextBoxDBName.Text.Trim()

        If CustomerDatabaseName = "" Then
            MsgBox("Select Customer")
            Exit Sub
        End If
        Try
            strconnectSQLCommandTypeControl.Close()
        Catch ex As Exception
        End Try

        Dim SqlStringUpdateTemp As String = ""
        Dim CustomerNameTemp As String = ListBoxCustomerInfo.SelectedItem
        If UCase(TypeOfUpdate) = "STANDARD" Then
            CustomerNameTemp = "Master Database"
        End If



        'this is for the sql command connection
        If ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Standard" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachSQLStd" & ";PWD=" & "PaLm78jxY" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "awsrdsbizcoachsqlstandard.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433"

        ElseIf ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "ImpRDSBizCoach" & ";PWD=" & "impBiz16!" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "awsrdsbizcoach.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433"


        ElseIf ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express - BizCoach2" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachDataLoading" & ";PWD=" & "JaMyt45!ord" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433"

        Else

            MsgBox("Invalid Cluster")
            Exit Sub

        End If

        If UCase(TypeOfUpdate) = "STANDARD" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachDataLoading" & ";PWD=" & "JaMyt45!ord" &
                ";DATABASE=" & "BizCoachDataStandardDatabase" &
             ";SERVER=" & "ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433"


        End If

        Dim myCommand As String 'to store the sql command to be executed
        Dim cmd As SqlCommand = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution


        'this for doing lookups

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        Try
            erpdb.Open(strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MessageBox.Show("An error occured connecting to the server, the error was:" & ControlChars.CrLf & Err.Description, "Connection error")
            Exit Sub
        End Try


        '********************************************************************************
        '**********   Common Code Above
        '********************************************************************************



        '*****************************************
        '****** Below after 15 Sep 2017
        '*****************************************



        'new table
        'Creates the         PurchaseOrderReceiptLines table

        myCommand = "       CREATE TABLE [dbo].[PurchaseOrderReceiptLines]( " &
"     [ParentCompany] [nvarchar](50) NULL, " &
"     [CompanyName] [nvarchar](50) NULL, " &
"     [IndexNumber] [Int] NULL, " &
"     [SupplierName] [nvarchar](70) NULL, " &
" 	[Date Record] [date] NULL, " &
" 	[Reference Number] [nchar](30) NULL, " &
" 	[UniqueIdentity] [uniqueidentifier] NULL, " &
" 	[PO Number] [nvarchar](50) NULL, " &
" 	[ItemCode] [nchar](60) NULL, " &
"     [Brand] [nvarchar](50) NULL, " &
"     [ItemName] [nvarchar](50) NULL, " &
" 	[PO Date] [date] NULL, " &
" 	[Related Invoices] [nvarchar](250) NULL, " &
" 	[Invoice Date] [date] NULL, " &
" 	[Status] [nvarchar](20) NULL, " &
" 	[Invoice Status] [nvarchar](20) NULL, " &
" 	[Comments] [ntext] NULL, " &
" 	[Vendor Name] [nvarchar](70) NULL, " &
" 	[Vendor Code] [nchar](70) NULL, " &
" 	[Quantity] [Decimal](18, 5) NULL, " &
" 	[Unit Of Measure] [nchar](15) NULL, " &
" 	[Cost Per UOM] [decimal](18, 3) NULL, " &
" 	[Total Line Cost] [decimal](18, 3) NULL, " &
" 	[Description] [nvarchar](255) NULL, " &
" 	[Description Long] [ntext] NULL, " &
" 	[Required Date] [date] NULL, " &
" 	[LastUpdated] [DateTime] NULL, " &
" 	[Unique Identity] [uniqueidentifier] NULL, " &
" 	[ExternalSystemID] [nchar](20) NULL, " &
"     [ExternalSystemQualifier] [nchar](10) NULL, " &
"     [Currency] [nchar](20) NULL, " &
"     [Amount] [Decimal](18, 3) NULL, " &
" 	[Exchange Rate] [decimal](18, 8) NULL, " &
" 	[Amount Tax] [decimal](18, 3) NULL, " &
" 	[HeaderRecord] [bit] NULL, " &
" 	[Line Number] [int] NULL, " &
" 	[Outlet Name] [nvarchar](50) NULL, " &
" 	[Date Time] [datetime] NULL, " &
" 	[PurchaseCountryCode] [nvarchar](20) NULL, " &
"     [PurchaseCountry] [nvarchar](20) NULL, " &
"     [PurchaseCity] [nvarchar](20) NULL, " &
"     [PurchaseAddress] [nvarchar](200) NULL, " &
"     [PurchaseStateCounty] [nvarchar](40) NULL, " &
"     [PurchaseOrderReceiptLineGroup10] [nvarchar](30) NULL, " &
"     [PurchaseOrderReceiptLineGroup01] [nvarchar](30) NULL, " &
"     [PurchaseOrderReceiptLineGroup02] [nvarchar](30) NULL, " &
"     [PurchaseOrderReceiptLineGroup03] [nvarchar](30) NULL, " &
"     [PurchaseOrderReceiptLineGroup04] [nvarchar](30) NULL, " &
"     [PurchaseOrderReceiptLineGroup05] [nvarchar](30) NULL, " &
"     [PurchaseOrderReceiptLineGroup06] [nvarchar](30) NULL, " &
"     [PurchaseOrderReceiptLineGroup07] [nvarchar](30) NULL, " &
"     [PurchaseOrderReceiptLineGroup08] [nvarchar](30) NULL, " &
"     [PurchaseOrderReceiptLineGroup09] [nvarchar](30) NULL, " &
"     [Header] [bit] NULL, " &
" 	[Receipt Number] [nvarchar](20) NULL, " &
" 	[Receipt Line Number] [nvarchar](20) NULL " &
" ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY] "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Created Table PurchaseOrderReceiptLines" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()

            '        Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'add table 'Sales Order Headers'

        myCommand = "          CREATE TABLE [dbo].[SalesOrderHeaders](
    [ParentCompany] [nvarchar](50) NULL,
    [CompanyName] [nvarchar](50) NULL,
    [IndexNumber] [Int] NULL,
    [SupplierName] [nvarchar](50) NULL,
	[Date Record] [date] NULL,
	[Outlet Name] [nvarchar](50) NULL,
	[Reference Number] [nchar](30) NULL,
	[Date Time] [datetime] NULL,
	[Unique Identity] [uniqueidentifier] NULL,
	[LastUpdated] [DateTime] NULL,
    [ExternalSystemID] [nchar](20) NULL,
    [ExternalSystemQualifier] [nchar](10) NULL,
	[Customer Code] [nvarchar](50) NULL,
	[Customer Name] [nvarchar](50) NULL,
	[Currency] [nchar](20) NULL,
    [Amount] [Decimal](18, 3) NULL,
	[Exchange Rate] [decimal](18, 5) NULL,
	[SO Number] [nchar](20) NULL,
	[Amount Tax] [decimal](18, 3) NULL,
	[HeaderRecord] [bit] NULL,
    [SalesCountryCode] [nvarchar](20) NULL,
    [SalesCountry] [nvarchar](20) NULL,
    [SalesCity] [nvarchar](40) NULL,
    [SalesAddress] [nvarchar](200) NULL,
    [SalesStateCounty] [nvarchar](40) NULL,
	[Line Number] [int] NULL,
	[Sales Rep] [nvarchar](50) NULL,
	[Sales Post Code] [nchar](10) NULL,
	[SalesHeaderGroup01] [nvarchar](60) NULL,
    [SalesHeaderGroup02] [nvarchar](60) NULL,
    [SalesHeaderGroup03] [nvarchar](60) NULL,
    [SalesHeaderGroup04] [nvarchar](60) NULL,
    [SalesHeaderGroup05] [nvarchar](60) NULL,
    [SalesHeaderGroup06] [nvarchar](60) NULL,
    [SalesHeaderGroup07] [nvarchar](60) NULL,
    [SalesHeaderGroup08] [nvarchar](60) NULL
) ON [PRIMARY]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Added SalesOrderHeaders table " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '         Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'change length

        'sales order header
        myCommand = "Alter Table SalesOrderHeaders alter Column SalesCity nvarchar(40)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered SalesOrderHeaders alter Column SalesCity " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "          CREATE TABLE [dbo].[NumericSingleDataPoint](
    [DataName] [nvarchar](50) NULL,
	[Sub Category] [nvarchar](50) NULL,
	[DateOfRecord] [DateTime] NULL,
    [DataValue] [Decimal](18, 4) NULL,
    [Units] [nchar](10) NULL,
    [DataText] [nvarchar](255) NULL,
    [UniqueID] [uniqueidentifier] NULL,
    [CurrencyName] [nvarchar](20) NULL,
	[Weight Or Volume] [nvarchar](20) NULL,
	[YearCode] [nchar](10) NULL,
    [MonthCode] [nchar](10) NULL,
    [DayOfWeekNumber] [nchar](10) NULL,
    [DayOfYear] [nchar](10) NULL,
    [MonthCodeShort] [nchar](10) NULL,
    [DayOfWeekName] [nchar](10) NULL,
    [DayOfWeekNameShort] [nchar](10) NULL,
    [DayOfMonth] [nchar](2) NULL,
    [WeekEnd] [bit] NULL,
    [Weekday] [bit] NULL,
    [WorkDay] [bit] NULL,
	[Number Work Days In Month] [int] NULL,
	[Number NonWork Days In Month] [int] NULL,
	[Number Days In Month] [int] NULL,
	[Day Of Month] [int] NULL,
	[LastUpdated] [DateTime] NULL,
    [MonthNumber] [nchar](2) NULL,
    [MonthNumber2Digits] [nchar](2) NULL,
    [TypeOfData] [nvarchar](15) NULL,
    [DataBit] [bit] NULL
) ON [PRIMARY]"

        'single point data

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Create NumericSingleDataPoint table " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '        Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()







        'single point data
        myCommand = "Alter Table NumericSingleDataPoint add TypeOfData nvarchar(15), DataBit bit"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered NumericSingleDataPoint alter Column DataType " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '    Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        '[POSSales]
        myCommand = "Alter Table [POSSales] add Price Decimal(18, 3), [Staff ID]	nvarchar(15),  [Outlet Code]	nvarchar(50)	"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered NumericSingleDataPoint alter Column DataType " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        '[POSSales]
        myCommand = "Alter Table [POSSales] add POSSalesGroup08	nvarchar(30), POSSalesGroup09	nvarchar(30), POSSalesGroup10	nvarchar(30), " &
            "POSSalesGroup11 nvarchar(30), POSSalesGroup12 nvarchar(30), POSSalesGroup13 nvarchar(30), POSSalesGroup14 nvarchar(30), POSSalesGroup15 nvarchar(30), " &
            "POSSalesGroup16 nvarchar(30), POSSalesGroup17 nvarchar(30), POSSalesGroup18 nvarchar(30), POSSalesGroup19 nvarchar(30), POSSalesGroup20 nvarchar(30), " &
            "POSSalesGroup21 nvarchar(30), POSSalesGroup22 nvarchar(30) "
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales add  POSSalesGroup08 to POSSalesGroup22" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '          Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()




        myCommand = "Alter Table CRMActivities add [Activity Cost]	decimal(18, 3)	, [Estimated Cost]	decimal(18, 3)		"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered NumericSingleDataPoint alter Column DataType " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        'sql archive view


        myCommand = "       CREATE View [dbo].[KPIArchiveView]
AS
Select dbo.[KPI Values Archive].ParentCompany, dbo.[KPI Values Archive].CompanyName, dbo.[KPI Values Archive].YearCode, dbo.[KPI Values Archive].MonthCode, dbo.[KPI Values Archive].DayOfWeekNumber, 
                         dbo.[KPI Values Archive].DayOfYear, dbo.[KPI Values Archive].MonthCodeShort, dbo.[KPI Values Archive].DayOfWeekName, dbo.[KPI Values Archive].DayOfWeekNameShort, dbo.[KPI Values Archive].DayOfMonth, 
                         dbo.[KPI Values Archive].WeekEnd, dbo.[KPI Values Archive].WeekDay, dbo.[KPI Values Archive].WorkDay, dbo.[KPI Values Archive].[Number Work Days In Month], 
                         dbo.[KPI Values Archive].[Number NonWork Days In Month], dbo.[KPI Values Archive].[Number Days In Month], dbo.[KPI Values Archive].[Day Of Month], dbo.[KPI Values Archive].WeekNumber, 
                         dbo.[KPI Values Archive].[KPI Name], dbo.[KPI Values Archive].[KPI Value Number], dbo.[KPI Values Archive].[KPI Value String], dbo.[KPI Values Archive].[KPI Value YesNo], dbo.[KPI Values Archive].[Outlet Name], 
                         dbo.[KPI Values Archive].LastUpdated, dbo.[KPI Values Archive].[Unique Identity], dbo.[KPI Values Archive].HourCode, dbo.[KPI Values Archive].MinuteCode, dbo.[KPI Values Archive].SecondCode, 
                         dbo.[KPI Values Archive].AMPM, dbo.[KPI Values Archive].PublicHoliday, dbo.[KPI Values Archive].[Date Record], dbo.[KPI Values Archive].CalculationDetails, dbo.[KPI Values Archive].KPIGroup01, 
                         dbo.[KPI Values Archive].KPIGroup02, dbo.[KPI Values Archive].KPIGroup03, dbo.[KPI Values Archive].KPIGroup04, dbo.[KPI Values Archive].KPIGroup05, dbo.[KPI Values Archive].KPIGroup06, 
                         dbo.[KPI Values Archive].KPIGroup07, dbo.[KPI Values Archive].KPIGroup08, dbo.[KPI Values Archive].KPIGroup09, dbo.[KPI Values Archive].KPIGroup10, dbo.[KPI Values Archive].[Detailed Description], 
                         dbo.[KPI Values Archive].[Gross Margin], dbo.[KPI Values Archive].[Cost Of Sales], dbo.[KPI Values Archive].Expenses, dbo.[KPI Values Archive].[Net Profit], dbo.[KPI Values Archive].[Net Profit %], 
                         dbo.[KPI Values Archive].[Gross Margin %], dbo.[KPI Values Archive].Sales, dbo.[KPI Values Archive].[Date Of KPI], dbo.[Outlet Details].[Date Opened], dbo.[Outlet Details].[Date Closed], dbo.[Outlet Details].Tables, 
                         dbo.[Outlet Details].Seats, dbo.[Outlet Details].[Square Meter], dbo.[Outlet Details].[Square Foot], dbo.[Outlet Details].Description, dbo.[Outlet Details].[Description Long], dbo.[Outlet Details].Longitude, 
                         dbo.[Outlet Details].Lattitude, dbo.[Outlet Details].LastUpdated AS Expr1, dbo.[Outlet Details].OutletGroup01, dbo.[Outlet Details].OutletGroup02, dbo.[Outlet Details].OutletGroup03, 
                         dbo.[Outlet Details].OutletGroup05, dbo.[Outlet Details].OutletGroup04, dbo.[Outlet Details].OutletCountry, dbo.[Outlet Details].Lattitude01, dbo.[Outlet Details].Lattitude02, dbo.[Outlet Details].Lattitude03, 
                         dbo.[Outlet Details].Longitude01, dbo.[Outlet Details].Longitude02, dbo.[Outlet Details].Longitude03, dbo.[Outlet Details].[Outlet Code], dbo.[Outlet Details].[Prediction Model Name]
From dbo.[KPI Values Archive] LEFT OUTER Join
              dbo.[Outlet Details] ON dbo.[KPI Values Archive].CompanyName = dbo.[Outlet Details].CompanyName And dbo.[KPI Values Archive].[Outlet Name] = dbo.[Outlet Details].[Outlet Name]"




        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE View [dbo].[KPIArchiveView] " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '    Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "         CREATE TABLE [dbo].[SalesOrderLines](
    [ParentCompany] [nvarchar](50) NULL,
    [CompanyName] [nvarchar](50) NULL,
    [IndexNumber] [Int] NULL,
	[Date Record] [date] NULL,
	[Reference Number] [nchar](30) NULL,
	[Unique Identity] [uniqueidentifier] NULL,
	[SO Number] [nvarchar](50) NULL,
	[ItemCode] [nchar](60) NULL,
    [Brand] [nvarchar](50) NULL,
    [ItemName] [nvarchar](50) NULL,
	[SO Date] [date] NULL,
	[Related Invoices] [nvarchar](250) NULL,
	[Shipped Date] [date] NULL,
	[Status] [nvarchar](20) NULL,
	[Invoice Status] [nvarchar](20) NULL,
	[Comments] [ntext] NULL,
	[Customer Name] [nvarchar](70) NULL,
	[Customer Code] [nchar](50) NULL,
	[Quantity] [Decimal](18, 5) NULL,
	[Unit Of Measure] [nchar](15) NULL,
	[Cost Per UOM] [decimal](18, 3) NULL,
	[Total Line Cost] [decimal](18, 3) NULL,
	[Description] [nvarchar](255) NULL,
	[Description Long] [ntext] NULL,
	[Required Date] [date] NULL,
	[Sales Rep] [nvarchar](50) NULL,
	[COGS] [Decimal](18, 3) NULL,
    [Profit] [Decimal](18, 3) NULL,
    [Sale] [Decimal](18, 3) NULL,
	[Line Number] [int] NULL,
	[Outlet Name] [nvarchar](50) NULL,
	[SalesLineGroup01] [nvarchar](60) NULL,
    [SalesLineGroup02] [nvarchar](60) NULL,
    [SalesLineGroup03] [nvarchar](60) NULL,
    [SalesLineGroup04] [nvarchar](60) NULL,
    [SalesLineGroup05] [nvarchar](60) NULL,
    [SalesLineGroup06] [nvarchar](60) NULL,
    [SalesLineGroup07] [nvarchar](60) NULL,
    [AccountNumber] [nvarchar](35) NULL,
    [AccountName] [nvarchar](150) NULL,
    [LastUpdated] [DateTime] NULL,
	[Invoice Date] [date] NULL,
	[Exchange Rate] [decimal](18, 5) NULL,
	[Amount] [Decimal](18, 3) NULL,
    [Currency] [nchar](30) NULL,
    [ExternalSystemID] [nchar](20) NULL,
    [ExternalSystemQualifier] [nchar](10) NULL,
	[Amount Tax] [decimal](18, 3) NULL,
	[HeaderRecord] [bit] NULL,
    [Group01] [nvarchar](60) NULL,
    [Group02] [nvarchar](60) NULL,
    [Group03] [nvarchar](60) NULL,
    [Group04] [nvarchar](60) NULL,
    [Group05] [nvarchar](60) NULL,
    [Group06] [nvarchar](60) NULL,
    [Group07] [nvarchar](60) NULL,
    [UniqueIdentity] [uniqueidentifier] NULL,
    [AMPM] [nchar](2) NULL,
    [PublicHoliday] [bit] NULL,
    [HourCode] [nchar](2) NULL,
    [MinuteCode] [nchar](2) NULL,
    [SecondCode] [nchar](2) NULL,
    [WeekNumber] [Decimal](18, 0) NULL,
	[Day Of Month] [int] NULL,
	[Number Work Days In Month] [int] NULL,
	[Number NonWork Days In Month] [int] NULL,
	[Number Days In Month] [int] NULL,
	[WeekEnd] [bit] NULL,
    [Weekday] [bit] NULL,
    [WorkDay] [bit] NULL,
    [MonthNumber] [nchar](2) NULL,
    [MonthNumber2Digits] [nchar](2) NULL,
    [YearCode] [nchar](10) NULL,
    [MonthCode] [nchar](10) NULL,
    [DayOfWeekNumber] [nchar](10) NULL,
    [DayOfYear] [nchar](10) NULL,
    [MonthCodeShort] [nchar](10) NULL,
    [DayOfWeekName] [nchar](10) NULL,
    [DayOfWeekNameShort] [nchar](10) NULL,
    [DayOfMonth] [nchar](2) NULL,
    [SalesCountryCode] [nvarchar](20) NULL,
    [SalesCountry] [nvarchar](20) NULL,
    [SalesCity] [nvarchar](20) NULL,
    [SalesAddress] [nvarchar](200) NULL,
    [SalesStateCounty] [nvarchar](40) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]"


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Adding table Sales Order Lines " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        'SalesOrderLines

        myCommand = "Alter Table SalesOrderLines alter Column ExternalSystemQualifier nchar(40)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered SalesOrderLines alter Column ExternalSystemQualifier " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'CRMActivities
        'remove LastUpdated1
        myCommand = "Alter Table CRMActivities drop Column LastUpdated1"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered SalesOrderLines alter Column ExternalSystemQualifier " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        '***************************
        '   dec 4   2017
        '***************************

        myCommand = "CREATE TABLE [dbo].[AssetDepreciation](
    [ParentCompany] [nvarchar](50) NULL,
    [CompanyName] [nvarchar](50) NULL,
    [AssetClass] [nvarchar](50) NULL,
    [AssetCode] [nvarchar](50) NULL,
    [AssetName] [nvarchar](50) NULL,
    [DepreciationsCode] [nvarchar](50) NULL
) ON [PRIMARY]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[AssetDepreciation] " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "       CREATE TABLE [dbo].[Coefficients](
    [coefficients_id] [uniqueidentifier] Not NULL,
    [models_id] [uniqueidentifier] Not NULL,
    [indicator_name] [nvarchar](50) Not NULL,
    [indicator_source] [nvarchar](max) Not NULL,
    [estimated_coefficent] [numeric](18, 10) Not NULL,
    [std_error] [numeric](18, 10) Not NULL,
    [t_value] [numeric](18, 10) Not NULL,
	[Pr(>|t|)] [numeric](18, 10) Not NULL,
 Constraint [PK_Coefficients] PRIMARY KEY CLUSTERED 
(
	[coefficients_id] Asc
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[Coefficients]" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()




        myCommand = "CREATE TABLE [dbo].[Models](
	[models_id] [uniqueidentifier] Not NULL,
    [model_name] [nvarchar](50) Not NULL,
    [formula] [nvarchar](50) Not NULL,
    [response_name] [nvarchar](50) Not NULL,
    [p_value] [nvarchar](50) Not NULL,
    [multiple_r_squared] [nvarchar](50) Not NULL,
    [adjusted_r_squared] [nvarchar](50) Not NULL,
    [F_statistic] [nvarchar](50) Not NULL,
    [residual_min] [numeric](18, 10) Not NULL,
    [residual_1Q] [numeric](18, 10) Not NULL,
    [residual_median] [numeric](18, 10) Not NULL,
    [residual_3Q] [numeric](18, 10) Not NULL,
    [residual_max] [numeric](18, 10) Not NULL,
    [residual_std_error] [nvarchar](50) Not NULL,
    [model_usage] [nvarchar](max) NULL,
 Constraint [PK_Models] PRIMARY KEY CLUSTERED 
(
	[models_id] Asc
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 Constraint [IX_Models] UNIQUE NONCLUSTERED 
(
	[model_name] Asc
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY] "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[Models]( " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "   ALTER TABLE [dbo].[Coefficients]  With CHECK ADD  CONSTRAINT [FK_Coefficents_Models] FOREIGN KEY([models_id])
REFERENCES [dbo].[Models] ([models_id])"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("ALTER TABLE [dbo].[Coefficients] " & CustomerNameTemp)
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "     ALTER TABLE [dbo].[Coefficients] CHECK CONSTRAINT [FK_Coefficents_Models]"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("ALTER TABLE [dbo].[Coefficients] CHECK CONSTRAINT " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "       CREATE TABLE [dbo].[CustomerContacts](
    [ParentCompany] [nvarchar](50) NULL,
    [CompanyName] [nvarchar](50) NULL,
	[Customer Name] [nvarchar](50) NULL,
	[Customer Code] [nchar](15) NULL,
	[Contact Code] [nchar](15) NULL,
	[First Name] [nvarchar](50) NULL,
	[Middle Name] [nvarchar](50) NULL,
	[Surname] [nvarchar](50) NULL,
	[Email Addresss] [nchar](10) NULL,
	[ActiveContact] [bit] NULL,
    [AddressLine01] [nvarchar](50) NULL,
    [AddressLine02] [nvarchar](50) NULL,
    [AddressLine03] [nvarchar](50) NULL,
    [AddressLine04] [nvarchar](50) NULL,
    [AddressLine05] [nvarchar](50) NULL,
    [GoogleCoordinates] [nvarchar](50) NULL,
	[Birth Date] [date] NULL,
	[Mobile Number] [nvarchar](50) NULL
) ON [PRIMARY]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(" CREATE TABLE [dbo].[CustomerContacts] " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "  CREATE TABLE [dbo].[CustomerHeaders](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Customer Name] [nvarchar](50) NULL,
	[Customer Code] [nchar](15) NULL,
	[First Name] [nvarchar](50) NULL,
	[Middle Name] [nvarchar](50) NULL,
	[Surname] [nvarchar](50) NULL,
	[Email Addresss] [nchar](10) NULL,
	[ActiveContact] [bit] NULL,
	[AddressLine01] [nvarchar](50) NULL,
	[AddressLine02] [nvarchar](50) NULL,
	[AddressLine03] [nvarchar](50) NULL,
	[AddressLine04] [nvarchar](50) NULL,
	[AddressLine05] [nvarchar](50) NULL,
	[GoogleCoordinates] [nvarchar](50) NULL,
	[Birth Date] [date] NULL,
	[Mobile Number] [nvarchar](50) NULL,
	[BR Certificate] [nvarchar](50) NULL,
	[Column1] [nvarchar](50) NULL,
	[Column2] [nvarchar](50) NULL,
	[Column3] [nvarchar](50) NULL,
	[Unique Identity] [uniqueidentifier] NULL,
	[EMail] [nvarchar](50) NULL,
	[CountryCode] [nchar](20) NULL,
	[CountryRegion] [nchar](20) NULL,
	[County] [nchar](20) NULL,
	[Currency] [nchar](15) NULL,
	[City] [nvarchar](50) NULL,
	[DistributorName] [nvarchar](50) NULL,
	[PostCode] [nchar](20) NULL,
	[LastUpdated] [datetime] NULL,
	[Contact] [nvarchar](50) NULL
) ON [PRIMARY]   "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[CustomerHeaders] " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "  CREATE TABLE [dbo].[Dimensions](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Source] [nchar](25) NULL,
	[IndexNumber] [int] NULL,
	[Unique Identity] [uniqueidentifier] NOT NULL,
	[Date Record] [date] NULL,
	[Outlet Name] [nvarchar](50) NULL,
	[Reference Number] [nchar](30) NULL,
	[Dimension Value] [nchar](30) NULL,
	[Parent 1] [nchar](30) NULL,
	[Parent 2] [nchar](30) NULL,
	[Description Short] [nchar](50) NULL,
	[Description Long] [nchar](155) NULL,
 CONSTRAINT [PK_Dimensions_1] PRIMARY KEY CLUSTERED 
(
	[Unique Identity] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]     "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[Dimensions] " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "CREATE TABLE [dbo].[ExchangeRates](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Rate From] [nvarchar](50) NULL,
	[Rate To] [nvarchar](50) NULL,
	[Exchange Rate] [decimal](18, 6) NULL,
	[Date Of Rate] [date] NULL,
	[DateTime Of Rate] [datetime] NULL,
	[Monthly Rate] [decimal](18, 6) NULL,
	[Annual Rate] [decimal](18, 6) NULL,
	[Company Specific] [bit] NULL,
	[CustomerName] [nvarchar](50) NULL,
	[UniqueID] [uniqueidentifier] NULL,
	[YearCode] [nvarchar](4) NULL,
	[MonthCode] [nvarchar](10) NULL,
	[DayOfWeekNumber] [nvarchar](1) NULL,
	[DayOfYear] [nvarchar](3) NULL,
	[MonthCodeShort] [nvarchar](4) NULL,
	[DayOfWeekName] [nvarchar](10) NULL,
	[DayOfWeekNameShort] [nvarchar](3) NULL,
	[WeekNumber] [int] NULL,
	[Weekend] [bit] NULL,
	[WeekDay] [bit] NULL,
	[Workday] [bit] NULL,
	[NumberWorkDaysInMonth] [int] NULL,
	[NumberNonWorkDaysInMonth] [int] NULL,
	[PublicHoliday] [bit] NULL,
	[NumberOfDaysInMonth] [int] NULL
) ON [PRIMARY] "



        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[ExchangeRates]" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = " CREATE TABLE [dbo].[Inventory](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Description] [nvarchar](250) NULL,
	[DescriptionLong] [ntext] NULL,
	[ItemName] [nvarchar](50) NULL,
	[ItemCode] [nvarchar](50) NULL,
	[CustomerName] [nvarchar](50) NULL,
	[CustomerCode] [nchar](20) NULL,
	[Quantity On Hand] [decimal](18, 4) NULL,
	[Return] [bit] NULL,
	[Quantity Reserved] [decimal](18, 4) NULL,
	[Quantity on Hold] [nchar](10) NULL,
	[Value In Base] [decimal](18, 3) NULL,
	[Standard Cost] [decimal](18, 3) NULL,
	[Location Name] [nvarchar](50) NULL,
	[LocationCode] [nchar](20) NULL,
	[Group01] [nvarchar](20) NULL,
	[InventoryGroup01] [nvarchar](20) NULL,
	[Group02] [nvarchar](20) NULL,
	[InventoryGroup02] [nvarchar](20) NULL,
	[Group03] [nvarchar](20) NULL,
	[InventoryGroup03] [nvarchar](20) NULL,
	[Group04] [nvarchar](20) NULL,
	[InventoryGroup04] [nvarchar](20) NULL,
	[Group05] [nvarchar](20) NULL,
	[InventoryGroup05] [nvarchar](20) NULL,
	[Group06] [nvarchar](20) NULL,
	[InventoryGroup06] [nvarchar](20) NULL,
	[Group07] [nvarchar](20) NULL,
	[InventoryGroup07] [nvarchar](20) NULL,
	[Group08] [nvarchar](20) NULL,
	[InventoryGroup08] [nvarchar](20) NULL,
	[Group09] [nvarchar](20) NULL,
	[InventoryGroup09] [nvarchar](20) NULL,
	[Group10] [nvarchar](20) NULL,
	[InventoryGroup10] [nvarchar](20) NULL,
	[Group11] [nvarchar](20) NULL,
	[InventoryGroup11] [nvarchar](20) NULL,
	[TagPrice] [decimal](18, 3) NULL,
	[PromotionalPrice01] [decimal](18, 3) NULL,
	[PromotionalPrice02] [decimal](18, 3) NULL,
	[PromotionalPrice03] [decimal](18, 3) NULL,
	[LowestPrice] [decimal](18, 3) NULL,
	[Cost] [decimal](18, 3) NULL,
	[WeightedAverageCost] [decimal](18, 3) NULL,
	[LastReceiptDate] [date] NULL,
	[LicenseCost] [decimal](18, 3) NULL,
	[SafetyLevel] [decimal](18, 3) NULL,
	[ReorderPoint] [decimal](18, 3) NULL,
	[SeasonalFactor] [decimal](18, 3) NULL,
	[Unit Of Measure] [nchar](15) NULL,
	[UOM Type] [nchar](15) NULL,
	[ExternalSystemID] [nchar](20) NULL,
	[ExternalSystemQualifier] [nchar](10) NULL,
	[Brand] [nvarchar](50) NULL,
	[Outlet Name] [nvarchar](50) NULL,
	[Warehouse Name] [nvarchar](50) NULL,
	[Date Entered] [date] NULL,
	[UniqueIndex] [uniqueidentifier] NULL,
	[LastUpdated] [date] NULL,
	[LastModified] [date] NULL,
	[Consignment] [bit] NULL,
	[UniqueIdentity] [uniqueidentifier] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]    "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(" CREATE TABLE [dbo].[Inventory]" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "  CREATE TABLE [dbo].[InvoiceHeaders](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[ExternalId] [nvarchar](45) NULL,
	[InvoiceId] [nvarchar](55) NULL,
	[Description] [nvarchar](255) NULL,
	[LastUpdated] [datetime] NULL,
	[ContactId] [nvarchar](55) NULL,
	[ContactName] [nvarchar](85) NULL,
	[ItemDescription] [nvarchar](255) NULL,
	[ItemQuantity] [decimal](18, 4) NULL,
	[ItemAmount] [decimal](18, 4) NULL,
	[Units] [nvarchar](50) NULL,
	[ItemCode] [nvarchar](35) NULL,
	[AccountNumber] [nvarchar](35) NULL,
	[TaxType] [nvarchar](35) NULL,
	[TaxAmount] [decimal](18, 4) NULL,
	[LineAmount] [decimal](18, 4) NULL,
	[DateEntered] [datetime] NULL,
	[DueDate] [datetime] NULL,
	[InvoiceNumber] [nvarchar](50) NULL,
	[CurrencyCode] [nvarchar](35) NULL,
	[Rate] [decimal](18, 4) NULL,
	[Status] [nvarchar](35) NULL,
	[SubTotal] [decimal](18, 4) NULL,
	[TotalTax] [decimal](18, 4) NULL,
	[Total] [decimal](18, 4) NULL,
	[TotalDiscount] [decimal](18, 4) NULL,
	[YearCode] [nchar](4) NULL,
	[MonthCode] [nchar](10) NULL,
	[DayOfWeekNumber] [nchar](3) NULL,
	[DayOfYear] [nchar](3) NULL,
	[MonthCodeShort] [nchar](3) NULL,
	[DayOfWeekName] [nchar](9) NULL,
	[DayOfWeekNameShort] [nchar](4) NULL,
	[DayOfMonth] [nchar](2) NULL,
	[LoadName] [nvarchar](30) NULL,
	[UniqueID] [uniqueidentifier] NULL,
	[MonthCode01] [nvarchar](20) NULL,
	[TaxCode01] [nvarchar](50) NULL,
	[TaxCodeRate01] [decimal](18, 4) NULL,
	[TaxCodeAmount01] [decimal](18, 4) NULL,
	[TaxCode02] [nvarchar](50) NULL,
	[TaxCodeRate02] [decimal](18, 4) NULL,
	[TaxCodeAmount02] [decimal](18, 4) NULL,
	[TaxCode03] [nvarchar](50) NULL,
	[TaxCodeRate03] [decimal](18, 4) NULL,
	[TaxCodeAmount03] [decimal](18, 4) NULL,
	[TaxCode04] [nvarchar](50) NULL,
	[TaxCodeRate04] [decimal](18, 4) NULL,
	[TaxCodeAmount04] [decimal](18, 4) NULL,
	[WeekEnd] [bit] NULL,
	[Weekday] [bit] NULL,
	[WorkDay] [bit] NULL,
	[Number Work Days In Month] [int] NULL,
	[Number NonWork Days In Month] [int] NULL,
	[Number Days In Month] [int] NULL,
	[Day Of Month] [int] NULL,
	[WeekNumber] [decimal](18, 0) NULL,
	[HourCode] [nchar](10) NULL,
	[MinuteCode] [nchar](10) NULL,
	[SecondCode] [nchar](10) NULL,
	[Outlet Name] [nvarchar](50) NULL,
	[Group01] [nvarchar](30) NULL,
	[InvoicesGroup01] [nvarchar](30) NULL,
	[Group02] [nvarchar](30) NULL,
	[InvoicesGroup02] [nvarchar](30) NULL,
	[Group03] [nvarchar](30) NULL,
	[InvoicesGroup03] [nvarchar](30) NULL,
	[Group04] [nvarchar](30) NULL,
	[InvoicesGroup04] [nvarchar](30) NULL,
	[Group05] [nvarchar](30) NULL,
	[InvoicesGroup05] [nvarchar](30) NULL,
	[Group06] [nvarchar](30) NULL,
	[InvoicesGroup06] [nvarchar](30) NULL,
	[Group07] [nvarchar](30) NULL,
	[InvoicesGroup07] [nvarchar](30) NULL,
	[Group08] [nvarchar](30) NULL,
	[InvoicesGroup08] [nvarchar](30) NULL,
	[Group09] [nvarchar](30) NULL,
	[InvoicesGroup09] [nvarchar](30) NULL,
	[LastUpdated1] [datetime] NULL,
	[AMPM] [nchar](2) NULL,
	[Group10] [decimal](18, 0) NULL,
	[InvoicesGroup10] [nvarchar](30) NULL,
	[Group11] [decimal](18, 0) NULL,
	[InvoicesGroup11] [nvarchar](30) NULL,
	[Group12] [decimal](18, 0) NULL,
	[InvoicesGroup12] [nvarchar](30) NULL,
	[MonthNumber] [nchar](2) NULL,
	[MonthNumber2Digits] [nchar](2) NULL,
	[Header] [bit] NULL,
	[BillToCity] [nchar](30) NULL,
	[BillToCustomerCode] [nvarchar](50) NULL,
	[BillToPostCode] [nchar](10) NULL,
	[ParentCustomerName] [nvarchar](50) NULL,
	[SalesRepCode] [nchar](20) NULL,
	[SalesOrderNumber] [nvarchar](30) NULL,
	[ShipToCustomerCode] [nvarchar](50) NULL,
	[ShipToPostCode] [nchar](10) NULL,
	[UniqueIdentity] [uniqueidentifier] NULL,
	[ShipToCity] [nchar](30) NULL,
	[ShipToCustomerName] [nvarchar](50) NULL
) ON [PRIMARY]
   "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[InvoiceHeaders]" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "   CREATE TABLE [dbo].[Invoices](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[ExternalId] [nvarchar](45) NULL,
	[InvoiceId] [nvarchar](55) NULL,
	[Description] [nvarchar](255) NULL,
	[ContactId] [nvarchar](55) NULL,
	[ContactName] [nvarchar](85) NULL,
	[ItemDescription] [nvarchar](255) NULL,
	[ItemQuantity] [decimal](18, 4) NULL,
	[ItemAmount] [decimal](18, 4) NULL,
	[Units] [nvarchar](50) NULL,
	[ItemCode] [nvarchar](35) NULL,
	[AccountNumber] [nvarchar](35) NULL,
	[TaxType] [nvarchar](35) NULL,
	[TaxAmount] [decimal](18, 4) NULL,
	[LineAmount] [decimal](18, 4) NULL,
	[DateEntered] [date] NULL,
	[DueDate] [date] NULL,
	[InvoiceNumber] [nvarchar](50) NULL,
	[CurrencyCode] [nvarchar](35) NULL,
	[Rate] [decimal](18, 4) NULL,
	[Status] [nvarchar](35) NULL,
	[SubTotal] [decimal](18, 4) NULL,
	[TotalTax] [decimal](18, 4) NULL,
	[Total] [decimal](18, 4) NULL,
	[TotalDiscount] [decimal](18, 4) NULL,
	[YearCode] [nchar](4) NULL,
	[MonthCode] [nchar](10) NULL,
	[DayOfWeekNumber] [nchar](3) NULL,
	[DayOfYear] [nchar](3) NULL,
	[MonthCodeShort] [nchar](3) NULL,
	[DayOfWeekName] [nchar](9) NULL,
	[DayOfWeekNameShort] [nchar](4) NULL,
	[DayOfMonth] [nchar](2) NULL,
	[LoadName] [nvarchar](30) NULL,
	[UniqueID] [uniqueidentifier] NULL,
	[MonthCode01] [nvarchar](20) NULL,
	[TaxCode01] [nvarchar](50) NULL,
	[TaxCodeRate01] [decimal](18, 4) NULL,
	[TaxCodeAmount01] [decimal](18, 4) NULL,
	[TaxCode02] [nvarchar](50) NULL,
	[TaxCodeRate02] [decimal](18, 4) NULL,
	[TaxCodeAmount02] [decimal](18, 4) NULL,
	[TaxCode03] [nvarchar](50) NULL,
	[TaxCodeRate03] [decimal](18, 4) NULL,
	[TaxCodeAmount03] [decimal](18, 4) NULL,
	[TaxCode04] [nvarchar](50) NULL,
	[TaxCodeRate04] [decimal](18, 4) NULL,
	[TaxCodeAmount04] [decimal](18, 4) NULL,
	[WeekEnd] [bit] NULL,
	[WeekDay] [bit] NULL,
	[WorkDay] [bit] NULL,
	[Number Work Days In Month] [int] NULL,
	[Number NonWork Days In Month] [int] NULL,
	[Number Days In Month] [int] NULL,
	[Day Of Month] [int] NULL,
	[WeekNumber] [decimal](18, 0) NULL,
	[HourCode] [nchar](10) NULL,
	[MinuteCode] [nchar](10) NULL,
	[SecondCode] [nchar](10) NULL,
	[Outlet Name] [nvarchar](50) NULL,
	[Group01] [nvarchar](30) NULL,
	[InvoicesGroup01] [nvarchar](30) NULL,
	[Group02] [nvarchar](30) NULL,
	[InvoicesGroup02] [nvarchar](30) NULL,
	[Group03] [nvarchar](30) NULL,
	[InvoicesGroup03] [nvarchar](30) NULL,
	[Group04] [nvarchar](30) NULL,
	[InvoicesGroup04] [nvarchar](30) NULL,
	[Group05] [nvarchar](30) NULL,
	[InvoicesGroup05] [nvarchar](30) NULL,
	[Group06] [nvarchar](30) NULL,
	[InvoicesGroup06] [nvarchar](30) NULL,
	[Group07] [nvarchar](30) NULL,
	[InvoicesGroup07] [nvarchar](30) NULL,
	[Group08] [nvarchar](30) NULL,
	[InvoicesGroup08] [nvarchar](30) NULL,
	[Group09] [nvarchar](30) NULL,
	[InvoicesGroup09] [nvarchar](30) NULL,
	[LastUpdated] [datetime] NULL,
	[AMPM] [nchar](2) NULL,
	[Group10] [decimal](18, 0) NULL,
	[InvoicesGroup10] [nvarchar](30) NULL,
	[Group11] [decimal](18, 0) NULL,
	[InvoicesGroup11] [nvarchar](30) NULL,
	[Group12] [decimal](18, 0) NULL,
	[InvoicesGroup12] [nvarchar](30) NULL,
	[MonthNumber] [nchar](2) NULL,
	[MonthNumber2Digits] [nchar](2) NULL,
	[Header] [bit] NULL,
	[BillToCity] [nchar](30) NULL,
	[BillToCustomerCode] [nvarchar](50) NULL,
	[BillToPostCode] [nchar](10) NULL,
	[ParentCustomerName] [nvarchar](50) NULL,
	[SalesRepCode] [nchar](20) NULL,
	[SalesOrderNumber] [nvarchar](30) NULL,
	[ShipToCustomerCode] [nvarchar](50) NULL,
	[ShipToPostCode] [nchar](10) NULL,
	[UniqueIdentity] [uniqueidentifier] NULL,
	[ShipToCity] [nchar](30) NULL,
	[ShipToCustomerName] [nvarchar](50) NULL,
	[UnitCost] [decimal](18, 3) NULL,
	[LineNumber] [int] NULL
) ON [PRIMARY]
  "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[Invoices]" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            ' Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()




        myCommand = "      CREATE TABLE [dbo].[ItemDetails](
    [ParentCompany] [nvarchar](50) NULL,
    [CompanyName] [nvarchar](50) NULL,
    [ItemCode] [nchar](60) NULL,
    [Brand] [nvarchar](50) NULL,
    [ItemName] [nvarchar](50) NULL,
    [Description] [nvarchar](250) NULL,
    [DescriptionLong] [nvarchar](500) NULL,
    [CustomerName] [nvarchar](50) NULL,
    [CustomerCode] [nchar](20) NULL,
	[Quantity On Hand] [decimal](18, 4) NULL,
	[Return] [bit] NULL,
	[Quantity Reserved] [decimal](18, 4) NULL,
	[Quantity on Hold] [nchar](10) NULL,
	[Value In Base] [decimal](18, 3) NULL,
	[Standard Cost] [decimal](18, 3) NULL,
	[Location Name] [nvarchar](50) NULL,
	[LocationCode] [nchar](20) NULL,
    [Class] [nvarchar](50) NULL,
    [Type] [nvarchar](50) NULL,
    [Group01] [nvarchar](50) NULL,
    [ItemDetailsGroup01] [nvarchar](50) NULL,
    [Group02] [nvarchar](50) NULL,
    [ItemDetailsGroup02] [nvarchar](50) NULL,
    [Group03] [nvarchar](50) NULL,
    [ItemDetailsGroup03] [nvarchar](50) NULL,
    [Group04] [nvarchar](50) NULL,
    [ItemDetailsGroup04] [nvarchar](50) NULL,
    [Group05] [nvarchar](50) NULL,
    [ItemDetailsGroup05] [nvarchar](50) NULL,
    [Group06] [nvarchar](50) NULL,
    [ItemDetailsGroup06] [nvarchar](50) NULL,
    [Group07] [nvarchar](50) NULL,
    [ItemDetailsGroup07] [nvarchar](50) NULL,
    [Group08] [nvarchar](50) NULL,
    [ItemDetailsGroup08] [nvarchar](50) NULL,
    [Group09] [nvarchar](50) NULL,
    [ItemDetailsGroup09] [nvarchar](50) NULL,
    [Group10] [nvarchar](50) NULL,
    [ItemDetailsGroup10] [nvarchar](50) NULL,
    [Group11] [nvarchar](50) NULL,
    [ItemDetailsGroup11] [nvarchar](50) NULL,
    [TagPrice] [Decimal](18, 3) NULL,
    [PromotionalPrice01] [Decimal](18, 3) NULL,
    [PromotionalPrice02] [Decimal](18, 3) NULL,
    [PromotionalPrice03] [Decimal](18, 3) NULL,
    [LowestPrice] [Decimal](18, 3) NULL,
    [Cost] [Decimal](18, 3) NULL,
    [WeightedAverageCost] [Decimal](18, 3) NULL,
    [LastReceiptDate] [DateTime] NULL,
    [LicenseCost] [Decimal](18, 3) NULL,
    [SafetyLevel] [Decimal](18, 3) NULL,
    [ReorderPoint] [Decimal](18, 3) NULL,
    [SeasonalFactor] [Decimal](18, 3) NULL,
	[Unit Of Measure] [nchar](15) NULL,
	[UOM Type] [nchar](15) NULL,
	[VendorName] [nvarchar](50) NULL,
    [VendorCode] [nchar](20) NULL,
	[Retail Price] [decimal](18, 3) NULL,
	[Trade Price] [decimal](18, 3) NULL,
	[Cost Price] [decimal](18, 3) NULL,
	[Average Cost] [decimal](18, 3) NULL,
	[UniqueIndex] [uniqueidentifier] NULL,
	[Item Group] [nvarchar](50) NULL,
	[LastUpdated] [DateTime] NULL,
    [ItemType] [nchar](20) NULL,
	[Parent 1] [nchar](20) NULL,
	[Parent 2] [nchar](20) NULL,
	[ExternalSystemID] [nchar](20) NULL,
    [ExternalSystemQualifier] [nchar](10) NULL,
    [ItemGroup] [nchar](20) NULL,
	[Unique Identity] [uniqueidentifier] NULL,
	[Description02] [nvarchar](250) NULL,
	[Country Of Origin] [nchar](20) NULL,
	[Material Cost] [decimal](18, 3) NULL
) ON [PRIMARY]"


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[ItemDetails]" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "  CREATE TABLE [dbo].[JournalLines](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Voucher Date] [date] NULL,
	[Voucher Number] [nvarchar](50) NULL,
	[CustVendorCode] [nvarchar](100) NULL,
	[AccountNumber] [nvarchar](80) NULL,
	[Description] [nvarchar](255) NULL,
	[Currency] [nvarchar](50) NULL,
	[Exchange Rate] [decimal](18, 4) NULL,
	[Column08] [nvarchar](50) NULL,
	[Column09] [nvarchar](50) NULL,
	[Column10] [nvarchar](50) NULL,
	[Main Type] [nvarchar](50) NULL,
	[Amount] [decimal](18, 4) NULL,
	[SubType] [nvarchar](50) NULL,
	[MonthCode01] [nvarchar](50) NULL,
	[Account Name] [nvarchar](100) NULL,
	[Group01] [nvarchar](50) NULL,
	[JournalLinesGroup01] [nvarchar](50) NULL,
	[Group02] [nvarchar](50) NULL,
	[JournalLinesGroup02] [nvarchar](50) NULL,
	[Group03] [nvarchar](50) NULL,
	[JournalLinesGroup03] [nvarchar](50) NULL,
	[Group04] [nvarchar](50) NULL,
	[JournalLinesGroup04] [nvarchar](50) NULL,
	[Group05] [nvarchar](50) NULL,
	[JournalLinesGroup05] [nvarchar](50) NULL,
	[Debitbase] [decimal](18, 2) NULL,
	[CreditBase] [decimal](18, 2) NULL,
	[IndexNumber] [decimal](18, 0) NULL,
	[YearCode] [nchar](10) NULL,
	[MonthCode] [nchar](10) NULL,
	[DayOfWeekNumber] [nchar](10) NULL,
	[DayOfYear] [nchar](10) NULL,
	[MonthCodeShort] [nchar](10) NULL,
	[DayOfWeekName] [nchar](10) NULL,
	[DayOfWeekNameShort] [nchar](10) NULL,
	[AmountCurrency] [decimal](18, 4) NULL,
	[DebitPosting] [bit] NULL,
	[CreditPosting] [bit] NULL,
	[Sales] [decimal](18, 3) NULL,
	[UniqueID] [uniqueidentifier] NOT NULL,
	[Revenue] [decimal](18, 3) NULL,
	[COGS] [decimal](18, 3) NULL,
	[Expenses] [decimal](18, 3) NULL,
	[DateTimeLoaded] [datetime] NULL,
	[Prototypetest] [bit] NULL,
	[testLoad1] [bit] NULL,
	[AmountBase] [decimal](18, 3) NULL,
	[DayOfMonth] [nchar](2) NULL,
	[LoadName] [nvarchar](30) NULL,
	[Vendor Code] [nvarchar](100) NULL,
	[Customer Code] [nvarchar](100) NULL,
	[Cash] [decimal](18, 3) NULL,
	[Current Assets] [decimal](18, 4) NULL,
	[Long Term Assets] [decimal](18, 3) NULL,
	[Retained Earnings] [decimal](18, 3) NULL,
	[Current Liabilities] [decimal](18, 3) NULL,
	[Long Term Liabilities] [decimal](18, 3) NULL,
	[Equity] [decimal](18, 3) NULL,
	[WeekEnd] [bit] NULL,
	[WeekDay] [bit] NULL,
	[WorkDay] [bit] NULL,
	[Number Work Days In Month] [int] NULL,
	[Number NonWork Days In Month] [int] NULL,
	[Number Days In Month] [int] NULL,
	[Day Of Month] [int] NULL,
	[WeekNumber] [decimal](18, 0) NULL,
	[LastDateModified] [datetime] NULL,
	[COS] [decimal](18, 3) NULL,
	[LastUpdated] [datetime] NULL,
	[Outlet Name] [nvarchar](50) NULL,
	[HourCode] [nchar](10) NULL,
	[MinuteCode] [nchar](10) NULL,
	[SecondCode] [nchar](10) NULL,
	[AMPM] [nchar](3) NULL,
	[MonthNumber] [nchar](2) NULL,
	[MonthNumber2Digits] [nchar](2) NULL,
	[LastUpdate] [datetime] NULL
) ON [PRIMARY]
   "





        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[JournalLines]" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "         CREATE TABLE [dbo].[Journals](
    [ParentCompany] [nvarchar](50) NULL,
    [CompanyName] [nvarchar](50) NULL,
    [Col01] [nvarchar](50) NULL,
    [Col011] [nvarchar](50) NULL,
    [Col012] [nvarchar](50) NULL,
    [Col013] [nvarchar](50) NULL,
    [Col014] [nvarchar](50) NULL,
    [Col015] [nvarchar](50) NULL,
    [Col016] [nvarchar](50) NULL,
    [Col017] [nvarchar](50) NULL,
    [Col018] [nvarchar](50) NULL,
    [Col019] [nvarchar](50) NULL,
    [LastUpdated] [DateTime] NULL
) ON [PRIMARY]"



        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[Journals]" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = " CREATE TABLE [dbo].[KPI Measures](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[KPI Type] [nvarchar](50) NULL,
	[KPI Measure Name] [nvarchar](50) NULL,
	[KPI Measure Order] [int] NULL
) ON [PRIMARY]    "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[KPI Measures]" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        'only do this if it dosent exist
        RecordExists = False
        records = erpdb.Execute("Select * FROM [KPI Measures]")
        While Not records.EOF
            RecordExists = True
            records.MoveNext()
        End While
        records.Close()


        If RecordExists = False Then


            myCommand = "Insert into [KPI Measures] (CompanyName, [KPI Type], [KPI Measure Name], [KPI Measure Order]) Values ('" &
            ListBoxCustomerInfo.SelectedItem & "','POSSales','Outlet Name','1')"
            cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
            Try
                cmd.Connection.Open()
                cmd.ExecuteNonQuery()
                ListBoxUpdateStatus.Items.Add("Insert into [KPI Measures] " & CustomerNameTemp)
                ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
                ListBoxUpdateStatus.Refresh()
                ' Delay(5)
            Catch
                'error 5 = duplicate
                If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                    MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                End If
                If Err.Number <> 5 Then
                    MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                End If
            End Try
            cmd.Connection.Close()
        End If


        RecordExists = False

        myCommand = " CREATE TABLE [dbo].[OutletEmployeeLevels](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Date Record] [date] NOT NULL,
	[Outlet Name] [nvarchar](50) NULL,
	[Staff Type] [nchar](15) NULL,
	[Number Employees] [decimal](18, 1) NULL,
	[Shift Name] [nchar](15) NULL,
	[UniqueIndex] [uniqueidentifier] NOT NULL,
	[YearCode] [nchar](10) NULL,
	[MonthCode] [nchar](10) NULL,
	[DayOfWeekNumber] [nchar](10) NULL,
	[DayOfYear] [nchar](10) NULL,
	[MonthCodeShort] [nchar](10) NULL,
	[DayOfWeekName] [nchar](10) NULL,
	[DayOfWeekNameShort] [nchar](10) NULL,
	[DayOfMonth] [nchar](2) NULL,
	[WeekEnd] [bit] NULL,
	[WeekDay] [bit] NULL,
	[WorkDay] [bit] NULL,
	[Number Work Days In Month] [int] NULL,
	[Number NonWork Days In Month] [int] NULL,
	[Number Days In Month] [int] NULL,
	[Day Of Month] [int] NULL,
	[WeekNumber] [decimal](18, 0) NULL,
	[HourCode] [nchar](2) NULL,
	[MinuteCode] [nchar](2) NULL,
	[SecondCode] [nchar](2) NULL,
	[AMPM] [nchar](2) NULL,
	[LastUpdated] [datetime] NULL,
	[Employee Cost] [decimal](18, 3) NULL,
	[Employee Group01] [nchar](50) NULL,
	[Employee Group02] [nchar](50) NULL,
	[Employee Group03] [nchar](50) NULL,
	[Employee Group04] [nchar](50) NULL,
	[Employee Group05] [nchar](50) NULL,
	[Employee Group06] [nchar](50) NULL,
	[Employee Group07] [nchar](50) NULL,
	[Employee Group08] [nchar](50) NULL,
	[Employee Group09] [nchar](50) NULL,
	[Employee Group10] [nchar](50) NULL,
	[Number Of Man Hours] [decimal](18, 2) NULL,
	[MonthNumber] [nchar](2) NULL,
	[MonthNumber2Digits] [nchar](2) NULL,
 CONSTRAINT [PK_OutletEmployeeLevels] PRIMARY KEY CLUSTERED 
(
	[UniqueIndex] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
  "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(" CREATE TABLE [dbo].[OutletEmployeeLevels] " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = " CREATE TABLE [dbo].[Parameters](
	[parameters_id] [uniqueidentifier] NOT NULL,
	[models_id] [uniqueidentifier] NOT NULL,
	[parameter_name] [nvarchar](50) NOT NULL,
	[parameter_value_numeric] [numeric](18, 10) NULL,
	[parameter_value_nvarchar] [nvarchar](50) NULL,
	[parameter_value_decimal] [numeric](18, 10) NULL,
	[parameter_value_int] [int] NULL,
 CONSTRAINT [PK_Parameters_1] PRIMARY KEY CLUSTERED 
(
	[parameters_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]   "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[Parameters] " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "   ALTER TABLE [dbo].[Parameters]  WITH CHECK ADD  CONSTRAINT [FK_Parameters_Models] FOREIGN KEY([models_id])
REFERENCES [dbo].[Models] ([models_id])   "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("ALTER TABLE [dbo].[Parameters]   " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            ' Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "   ALTER TABLE [dbo].[Parameters] CHECK CONSTRAINT [FK_Parameters_Models]  "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("ALTER TABLE [dbo].[Parameters]   " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "  CREATE TABLE [dbo].[POSPurchasing](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[IndexNumber] [int] NULL,
	[SupplierName] [nvarchar](50) NULL,
	[Date Record] [date] NULL,
	[Outlet Name] [nvarchar](50) NULL,
	[Reference Number] [nchar](30) NULL,
	[Unique Identity] [uniqueidentifier] NULL,
	[LastUpdated] [datetime] NULL,
	[ExternalSystemID] [nchar](20) NULL,
	[ExternalSystemQualifier] [nchar](10) NULL,
	[Vendor Code] [nvarchar](20) NULL,
	[Vendor Name] [nvarchar](50) NULL,
	[Currency] [nchar](10) NULL,
	[Amount] [decimal](18, 3) NULL,
	[Exchange Rate] [decimal](18, 5) NULL,
	[PO Number] [nchar](20) NULL,
	[Amount Tax] [decimal](18, 3) NULL,
	[Food] [decimal](18, 4) NULL,
	[Beverage] [decimal](18, 4) NULL,
	[Wine] [decimal](18, 4) NULL,
	[Others] [decimal](18, 4) NULL,
	[ECP BV] [decimal](18, 4) NULL,
	[ECP Wine] [decimal](18, 4) NULL,
	[Date Time] [datetime] NULL,
	[OutletName] [nvarchar](50) NULL
) ON [PRIMARY] "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[POSPurchasing]    " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = " CREATE TABLE [dbo].[POSSalesDetailed](
	[Date Of Sale] [datetime] NULL,
	[Data Reading] [decimal](18, 4) NULL,
	[IndexNumber] [int] NULL,
	[Unique Identity] [uniqueidentifier] NULL,
	[IndexNumber1] [int] NULL
) ON [PRIMARY]
   "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[POSSalesDetailed]    " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            ' Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "  CREATE TABLE [dbo].[Predictions](
	[predictions_id] [uniqueidentifier] NOT NULL,
	[models_id] [uniqueidentifier] NOT NULL,
	[model_name] [nvarchar](50) NOT NULL,
	[predicted_date] [date] NULL,
	[predicted_value_nvarchar] [nvarchar](50) NULL,
	[predicted_value_decimal] [decimal](18, 10) NULL,
	[predicted_value_numeric] [numeric](18, 10) NULL,
 CONSTRAINT [PK_Predictions] PRIMARY KEY CLUSTERED 
(
	[predictions_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]  "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[Predictions]    " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = " ALTER TABLE [dbo].[Predictions]  WITH CHECK ADD  CONSTRAINT [FK_Predictions_Models] FOREIGN KEY([models_id])
REFERENCES [dbo].[Models] ([models_id])   "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[Predictions]    " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '   Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "   ALTER TABLE [dbo].[Predictions] CHECK CONSTRAINT [FK_Predictions_Models]  "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("ALTER TABLE [dbo].[Predictions]    " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '    Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = " CREATE TABLE [dbo].[PurchaseOrderHeaders](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[IndexNumber] [int] NULL,
	[Date Record] [date] NULL,
	[Outlet Name] [nvarchar](50) NULL,
	[Reference Number] [nchar](30) NULL,
	[Date Time] [datetime] NULL,
	[Unique Identity] [uniqueidentifier] NULL,
	[OutletName] [nvarchar](50) NULL,
	[LastUpdated] [datetime] NULL,
	[ExternalSystemID] [nchar](20) NULL,
	[ExternalSystemQualifier] [nchar](10) NULL,
	[Vendor Code] [nvarchar](35) NULL,
	[Vendor Name] [nvarchar](70) NULL,
	[Currency] [nchar](20) NULL,
	[Amount] [decimal](18, 3) NULL,
	[Exchange Rate] [decimal](18, 8) NULL,
	[PO Number] [nchar](20) NULL,
	[Amount Tax] [decimal](18, 3) NULL,
	[HeaderRecord] [bit] NULL,
	[PurchaseCountryCode] [nvarchar](20) NULL,
	[PurchaseCountry] [nvarchar](20) NULL,
	[PurchaseCity] [nvarchar](20) NULL,
	[PurchaseAddress] [nvarchar](200) NULL,
	[PurchaseStateCounty] [nvarchar](40) NULL,
	[Line Number] [int] NULL
) ON [PRIMARY]   "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[PurchaseOrderHeaders]   " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()




        myCommand = "  CREATE TABLE [dbo].[PurchaseOrderLines](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[IndexNumber] [int] NULL,
	[SupplierName] [nvarchar](70) NULL,
	[Date Record] [date] NULL,
	[Reference Number] [nchar](30) NULL,
	[UniqueIdentity] [uniqueidentifier] NULL,
	[PO Number] [nvarchar](50) NULL,
	[ItemCode] [nchar](60) NULL,
	[Brand] [nvarchar](50) NULL,
	[ItemName] [nvarchar](50) NULL,
	[PO Date] [date] NULL,
	[Related Invoices] [nvarchar](250) NULL,
	[Invoice Date] [date] NULL,
	[Status] [nvarchar](20) NULL,
	[Invoice Status] [nvarchar](20) NULL,
	[Comments] [ntext] NULL,
	[Vendor Name] [nvarchar](70) NULL,
	[Vendor Code] [nchar](70) NULL,
	[Quantity] [decimal](18, 5) NULL,
	[Unit Of Measure] [nchar](15) NULL,
	[Cost Per UOM] [decimal](18, 3) NULL,
	[Total Line Cost] [decimal](18, 3) NULL,
	[Description] [nvarchar](255) NULL,
	[Description Long] [ntext] NULL,
	[Required Date] [date] NULL,
	[LastUpdated] [datetime] NULL,
	[Unique Identity] [uniqueidentifier] NULL,
	[ExternalSystemID] [nchar](20) NULL,
	[ExternalSystemQualifier] [nchar](10) NULL,
	[Currency] [nchar](20) NULL,
	[Amount] [decimal](18, 3) NULL,
	[Exchange Rate] [decimal](18, 8) NULL,
	[Amount Tax] [decimal](18, 3) NULL,
	[HeaderRecord] [bit] NULL,
	[Line Number] [int] NULL,
	[Outlet Name] [nvarchar](50) NULL,
	[Date Time] [datetime] NULL,
	[PurchaseCountryCode] [nvarchar](20) NULL,
	[PurchaseCountry] [nvarchar](20) NULL,
	[PurchaseCity] [nvarchar](20) NULL,
	[PurchaseAddress] [nvarchar](200) NULL,
	[PurchaseStateCounty] [nvarchar](40) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
   "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[PurchaseOrderLines]   " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()




        myCommand = "  CREATE TABLE [dbo].[ReportsStandard](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[ReportType] [nchar](30) NULL,
	[Period] [nchar](15) NULL,
	[Year] [nchar](15) NULL,
	[Report Title] [nchar](60) NULL,
	[Account Name] [nvarchar](150) NULL,
	[Main Type] [nvarchar](50) NULL,
	[MonthCode01] [nvarchar](50) NULL,
	[Amount] [decimal](18, 4) NULL,
	[AmountYTD] [decimal](18, 4) NULL,
	[AmountLastYear] [decimal](18, 4) NULL,
	[AmountPriorPriorYear] [decimal](18, 4) NULL,
	[Analytics Measure 01] [nchar](30) NULL,
	[Analytics Measure 02] [nchar](30) NULL,
	[Analytics Measure 03] [nchar](30) NULL,
	[Analytics Measure 04] [nchar](30) NULL,
	[SortType01] [nchar](30) NULL,
	[SortType02] [nchar](30) NULL,
	[SortType03] [nchar](30) NULL,
	[SortType04] [nchar](30) NULL,
	[ConsolidatedCompanies] [bit] NULL,
	[LastUpdated] [datetime] NULL
) ON [PRIMARY]     "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[ReportsStandard]   " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "  CREATE TABLE [dbo].[TransactionHeaders](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Main Line] [bit] NOT NULL,
	[Line Seq Number] [int] NOT NULL,
	[Autonumber] [nvarchar](50) NULL,
	[Actual Date Time Entered] [datetime] NULL,
	[Amount] [decimal](18, 3) NULL,
	[Amount Remaining] [decimal](18, 3) NULL,
	[Amount Paid] [decimal](18, 3) NULL,
	[Amount Line Discount] [decimal](18, 3) NULL,
	[Amount Transaction Discount] [decimal](18, 3) NULL,
	[Amount Unbilled] [decimal](18, 3) NULL,
	[Bill City] [nvarchar](35) NULL,
	[Bill Country] [nvarchar](50) NULL,
	[Billing Zip] [nvarchar](25) NULL,
	[Billing State Province] [nvarchar](30) NULL,
	[Billing Address] [nvarchar](200) NULL,
	[Bill Country Code] [nvarchar](8) NULL,
	[Currency] [nvarchar](50) NULL,
	[Created From] [nvarchar](50) NULL,
	[Customer Name] [nvarchar](80) NULL,
	[Customer Category] [nvarchar](50) NULL,
	[Company Trading Name] [nvarchar](100) NULL,
	[Date Created] [datetime] NULL,
	[Date Closed] [datetime] NULL,
	[Date Updated Integration] [datetime] NULL,
	[Department] [nvarchar](50) NULL,
	[Exchange Rate] [decimal](18, 9) NULL,
	[Employee Name] [nvarchar](50) NULL,
	[FX Amount] [decimal](18, 5) NULL,
	[Item] [nvarchar](80) NULL,
	[Item Category] [nvarchar](100) NULL,
	[Item Class] [nvarchar](30) NULL,
	[Item Costing Method] [nchar](10) NULL,
	[Item Type] [nchar](20) NULL,
	[Item Sub Type] [nchar](20) NULL,
	[Item Sales Description] [ntext] NULL,
	[Item Display Name] [nvarchar](100) NULL,
	[Line ID] [int] NULL,
	[Location] [nvarchar](50) NULL,
	[Last Modified] [datetime] NULL,
	[Memo] [nvarchar](350) NULL,
	[Memo Main] [nvarchar](350) NULL,
	[Quantity] [decimal](18, 5) NULL,
	[Quantity Billed] [decimal](18, 5) NULL,
	[Quantity Committed] [decimal](18, 5) NULL,
	[Quantity Packed] [decimal](18, 5) NULL,
	[Vendor Name] [nvarchar](80) NULL,
	[Rate] [decimal](18, 8) NULL,
	[Sales Rep] [nvarchar](30) NULL,
	[Ship City] [nvarchar](50) NULL,
	[Ship Country] [nvarchar](50) NULL,
	[Ship Country Code] [nvarchar](6) NULL,
	[Shipping Zip] [nvarchar](30) NULL,
	[Shipping State Province] [nvarchar](30) NULL,
	[Shipping Address] [nvarchar](200) NULL,
	[Tax Total] [decimal](18, 3) NULL,
	[Type] [nchar](25) NULL,
	[Transaction Number] [nvarchar](60) NULL,
	[Transaction Total] [decimal](18, 3) NULL,
	[Transaction Date NS] [date] NULL,
	[Tax Item] [nvarchar](30) NULL,
	[Tax Period] [nchar](15) NULL,
	[Tax Line] [bit] NULL,
	[Terms] [nvarchar](50) NULL,
	[CustomFieldsUpdated] [bit] NULL,
	[Vendor Category] [nvarchar](50) NULL,
	[IsVendor] [bit] NULL,
	[LastUpdated] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]    "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[TransactionHeaders]   " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "   CREATE TABLE [dbo].[TransactionLines](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Main Line] [bit] NOT NULL,
	[Line Seq Number] [int] NOT NULL,
	[Autonumber] [nvarchar](50) NULL,
	[Actual Date Time Entered] [datetime] NULL,
	[Amount] [decimal](18, 3) NULL,
	[Amount Remaining] [decimal](18, 3) NULL,
	[Amount Paid] [decimal](18, 3) NULL,
	[Amount Line Discount] [decimal](18, 3) NULL,
	[Amount Transaction Discount] [decimal](18, 3) NULL,
	[Amount Unbilled] [decimal](18, 3) NULL,
	[Bill City] [nvarchar](35) NULL,
	[Bill Country] [nvarchar](50) NULL,
	[Billing Zip] [nvarchar](25) NULL,
	[Billing State Province] [nvarchar](30) NULL,
	[Billing Address] [nvarchar](200) NULL,
	[Bill Country Code] [nvarchar](8) NULL,
	[Currency] [nvarchar](50) NULL,
	[Created From] [nvarchar](50) NULL,
	[Customer Name] [nvarchar](80) NULL,
	[Customer Category] [nvarchar](50) NULL,
	[Company Trading Name] [nvarchar](100) NULL,
	[Date Created] [datetime] NULL,
	[Date Closed] [datetime] NULL,
	[Date Updated Integration] [datetime] NULL,
	[Department] [nvarchar](50) NULL,
	[Exchange Rate] [decimal](18, 9) NULL,
	[Employee Name] [nvarchar](50) NULL,
	[FX Amount] [decimal](18, 5) NULL,
	[Item] [nvarchar](80) NULL,
	[Item Category] [nvarchar](100) NULL,
	[Item Class] [nvarchar](30) NULL,
	[Item Costing Method] [nchar](10) NULL,
	[Item Type] [nchar](20) NULL,
	[Item Sub Type] [nchar](20) NULL,
	[Item Sales Description] [ntext] NULL,
	[Item Display Name] [nvarchar](100) NULL,
	[Line ID] [int] NULL,
	[Location] [nvarchar](50) NULL,
	[Last Modified] [datetime] NULL,
	[Memo] [nvarchar](350) NULL,
	[Memo Main] [nvarchar](350) NULL,
	[Quantity] [decimal](18, 5) NULL,
	[Quantity Billed] [decimal](18, 5) NULL,
	[Quantity Committed] [decimal](18, 5) NULL,
	[Quantity Packed] [decimal](18, 5) NULL,
	[Vendor Name] [nvarchar](80) NULL,
	[Rate] [decimal](18, 8) NULL,
	[Sales Rep] [nvarchar](30) NULL,
	[Ship City] [nvarchar](50) NULL,
	[Ship Country] [nvarchar](50) NULL,
	[Ship Country Code] [nvarchar](6) NULL,
	[Shipping Zip] [nvarchar](30) NULL,
	[Shipping State Province] [nvarchar](30) NULL,
	[Shipping Address] [nvarchar](200) NULL,
	[Tax Total] [decimal](18, 3) NULL,
	[Type] [nchar](25) NULL,
	[Transaction Number] [nvarchar](60) NULL,
	[Transaction Total] [decimal](18, 3) NULL,
	[Transaction Date NS] [date] NULL,
	[Tax Item] [nvarchar](30) NULL,
	[Tax Period] [nchar](15) NULL,
	[Tax Line] [bit] NULL,
	[Terms] [nvarchar](50) NULL,
	[CustomFieldsUpdated] [bit] NULL,
	[Vendor Category] [nvarchar](50) NULL,
	[IsVendor] [bit] NULL,
	[LastUpdated] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]    "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[TransactionLines]   " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "   CREATE TABLE [dbo].[UserDetails](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[UniqueID] [uniqueidentifier] NULL,
	[LastUpdated] [datetime] NULL,
	[UserDetailsGroup01] [nvarchar](50) NULL,
	[UserDetailsGroup02] [nvarchar](50) NULL,
	[UserDetailsGroup03] [nvarchar](50) NULL,
	[UserDetailsGroup04] [nvarchar](50) NULL,
	[UserDetailsGroup05] [nvarchar](50) NULL,
	[UserDetailsGroup06] [nvarchar](50) NULL,
	[UserDetailsGroup07] [nvarchar](50) NULL,
	[UserDetailsGroup08] [nvarchar](50) NULL,
	[UserDetailsGroup09] [nvarchar](50) NULL,
	[UserDetailsGroup10] [nvarchar](50) NULL,
	[Outlet Name] [nvarchar](50) NULL,
	[CreatedDate] [datetime] NULL,
	[Active] [bit] NULL,
	[DeactivatedDate] [datetime] NULL,
	[CreatedBy] [nvarchar](50) NULL,
	[Manager] [nvarchar](50) NULL,
	[UserRoleType] [nvarchar](50) NULL,
	[UserAccessRole] [nchar](10) NULL,
	[Alias] [nvarchar](30) NULL,
	[WorkCompanyName] [nvarchar](50) NULL,
	[CountryCode] [nchar](10) NULL,
	[Email] [nvarchar](80) NULL,
	[FirstName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[Full Name] [nvarchar](50) NULL,
	[Phone] [nchar](20) NULL,
	[Region] [nchar](10) NULL,
	[Title] [nvarchar](90) NULL
) ON [PRIMARY]   "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[UserDetails]    " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "     CREATE TABLE [dbo].[VendorContacts](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Vendor Name] [nvarchar](50) NULL,
	[Vendor Code`] [nchar](15) NULL,
	[Contact Code] [nchar](15) NULL,
	[First Name] [nvarchar](50) NULL,
	[Middle Name] [nvarchar](50) NULL,
	[Surname] [nvarchar](50) NULL,
	[Email Addresss] [nchar](10) NULL,
	[ActiveContact] [bit] NULL,
	[AddressLine01] [nvarchar](50) NULL,
	[AddressLine02] [nvarchar](50) NULL,
	[AddressLine03] [nvarchar](50) NULL,
	[AddressLine04] [nvarchar](50) NULL,
	[AddressLine05] [nvarchar](50) NULL,
	[GoogleCoordinates] [nvarchar](50) NULL,
	[Birth Date] [date] NULL,
	[Mobile Number] [nvarchar](50) NULL,
	[LastUpdated] [datetime] NULL
) ON [PRIMARY]  "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[VendorContacts]    " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "   CREATE TABLE [dbo].[VendorHeaders](
	[ParentCompany] [nvarchar](50) NULL,
	[CompanyName] [nvarchar](50) NULL,
	[Vendor Name] [nvarchar](50) NULL,
	[Vendor Code] [nchar](15) NULL,
	[First Name] [nvarchar](50) NULL,
	[Middle Name] [nvarchar](50) NULL,
	[Surname] [nvarchar](50) NULL,
	[Email Addresss] [nchar](10) NULL,
	[ActiveContact] [bit] NULL,
	[AddressLine01] [nvarchar](50) NULL,
	[AddressLine02] [nvarchar](50) NULL,
	[AddressLine03] [nvarchar](50) NULL,
	[AddressLine04] [nvarchar](50) NULL,
	[AddressLine05] [nvarchar](50) NULL,
	[GoogleCoordinates] [nvarchar](50) NULL,
	[Birth Date] [date] NULL,
	[Mobile Number] [nvarchar](50) NULL,
	[BR Certificate] [nvarchar](50) NULL,
	[Column1] [nvarchar](50) NULL,
	[Column2] [nvarchar](50) NULL,
	[Column3] [nvarchar](50) NULL,
	[LastUpdated] [datetime] NULL
) ON [PRIMARY]
  "



        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE TABLE [dbo].[VendorHeaders]    " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        'view has changed so drop the view and redo it

        myCommand = "drop view POSSalesView"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & "  " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        'view has changed so drop the view and redo it



        '[POSSalesView]
        myCommand = " CREATE VIEW [dbo].[POSSalesView]
AS
SELECT        dbo.POSSales.ParentCompany, dbo.POSSales.CompanyName, dbo.POSSales.IndexNumber, dbo.POSSales.[Date Record], dbo.POSSales.[Outlet Name], dbo.POSSales.[Reference Number], dbo.POSSales.Food, 
                         dbo.POSSales.Beverage, dbo.POSSales.Wine, dbo.POSSales.Others, dbo.POSSales.[ECP BV], dbo.POSSales.[Date Time], dbo.POSSales.[Total Net Sales], dbo.POSSales.CurrencyCode, dbo.POSSales.[Total Gross Sales], 
                         dbo.POSSales.Remarks, dbo.POSSales.Weather, dbo.POSSales.YearCode, dbo.POSSales.MonthCode, dbo.POSSales.DayOfWeekNumber, dbo.POSSales.DayOfYear, dbo.POSSales.MonthCodeShort, 
                         dbo.POSSales.DayOfWeekName, dbo.POSSales.DayOfWeekNameShort, dbo.POSSales.[Dinner Covers], dbo.POSSales.[Lunch Covers], dbo.POSSales.[Breakfast Covers], dbo.POSSales.[Lunch Cover Average], 
                         dbo.POSSales.[Average Check], dbo.POSSales.[Breakfast Cover Average], dbo.POSSales.[Payment Total], dbo.POSSales.[Discount Total], dbo.POSSales.[Five Percent Tax], dbo.POSSales.[Ten Percent Charge], 
                         dbo.POSSales.[Dinner Cover Average], dbo.POSSales.[Manager Dining Benefit], dbo.POSSales.EntbyEclipseCharge, dbo.POSSales.EntbyManagersCharge, dbo.POSSales.EntPromotionsCharge, dbo.POSSales.[Octopus Charge], 
                         dbo.POSSales.[Points Charge], dbo.POSSales.[China CC Charge], dbo.POSSales.[JCB Charge], dbo.POSSales.[Diner Charge], dbo.POSSales.[Master Charge], dbo.POSSales.[VISA Charge], dbo.POSSales.[Amex Charge], 
                         dbo.POSSales.[Cash Charge], dbo.POSSales.[Wastage Charge], dbo.POSSales.[Staff Drinks Charge], dbo.POSSales.[Manager Meals Charge], dbo.POSSales.[Food Tasting Charge], dbo.POSSales.[Discount 50 Total], 
                         dbo.POSSales.[Cigarette Charge], dbo.POSSales.[City Ledger Charge], dbo.POSSales.[Less Cr Card Tips Charge], dbo.POSSales.[Gross Sales], dbo.POSSales.[Rounding Total], dbo.POSSales.CashVoucherCoupon, 
                         dbo.POSSales.Barter, dbo.POSSales.Discount5, dbo.POSSales.Discount10, dbo.POSSales.Discount15, dbo.POSSales.Discount20, dbo.POSSales.Discount25, dbo.POSSales.Discount25_30, dbo.POSSales.Discount30, 
                         dbo.POSSales.Discount35, dbo.POSSales.Description, dbo.POSSales.DescriptionLong, dbo.POSSales.ItemCode, dbo.POSSales.CustomerName, dbo.POSSales.CustomerCode, dbo.POSSales.[Quantity Sold], 
                         dbo.POSSales.[Return], dbo.POSSales.Group01, dbo.POSSales.Group02, dbo.POSSales.Group03, dbo.POSSales.Group04, dbo.POSSales.Group05, dbo.POSSales.Group06, dbo.POSSales.Group07, dbo.POSSales.DayOfMonth, 
                         dbo.POSSales.LoadName, dbo.POSSales.[Brunch Covers], dbo.POSSales.[Brunch Cover Average], dbo.POSSales.Foodora, dbo.POSSales.[Food By Web], dbo.POSSales.[Delivery Dot com], dbo.POSSales.[Food Panda], 
                         dbo.POSSales.DAD, dbo.POSSales.[Soho Delivery], dbo.POSSales.[Food By Fone], dbo.POSSales.Uber, dbo.POSSales.Cigarette, dbo.POSSales.Merchandise, dbo.POSSales.[Other Income], dbo.POSSales.[10% Service Charge], 
                         dbo.POSSales.Covers, dbo.POSSales.COGS, dbo.POSSales.Expenses, dbo.POSSales.WeekEnd, dbo.POSSales.Weekday, dbo.POSSales.WorkDay, dbo.POSSales.[Number Work Days In Month], 
                         dbo.POSSales.[Number NonWork Days In Month], dbo.POSSales.[Number Days In Month], dbo.POSSales.[Day Of Month], dbo.POSSales.WeekNumber, dbo.POSSales.HourCode, dbo.POSSales.MinuteCode, 
                         dbo.POSSales.SecondCode, dbo.POSSales.AMPM, dbo.POSSales.LastUpdated, dbo.[Outlet Details].[Date Opened], dbo.[Outlet Details].[Date Closed], dbo.[Outlet Details].Tables, dbo.[Outlet Details].Seats, 
                         dbo.[Outlet Details].[Square Meter], dbo.[Outlet Details].[Square Foot], dbo.[Outlet Details].Description AS [Outlet Description], dbo.[Outlet Details].[Description Long], dbo.[Outlet Details].Longitude, dbo.[Outlet Details].Lattitude, 
                         dbo.ItemDetails.Brand, dbo.ItemDetails.Description AS ItemDescription, dbo.ItemDetails.DescriptionLong AS ItemDescriptionLong, dbo.ItemDetails.[Quantity On Hand], dbo.ItemDetails.[Return] AS ItemReturn, 
                         dbo.ItemDetails.[Quantity Reserved], dbo.ItemDetails.[Quantity on Hold], dbo.ItemDetails.[Value In Base], dbo.ItemDetails.[Standard Cost], dbo.ItemDetails.[Location Name], dbo.ItemDetails.LocationCode, dbo.ItemDetails.Class, 
                         dbo.ItemDetails.Type, dbo.ItemDetails.Group01 AS ItemGroup01, dbo.ItemDetails.Group02 AS ItemGroup02, dbo.ItemDetails.Group03 AS ItemGroup03, dbo.ItemDetails.Group04 AS ItemGroup04, 
                         dbo.ItemDetails.Group05 AS ItemGroup05, dbo.ItemDetails.Group06 AS ItemGroup06, dbo.ItemDetails.Group07 AS ItemGroup07, dbo.ItemDetails.Group08 AS ItemGroup08, dbo.ItemDetails.Group09 AS ItemGroup09, 
                         dbo.ItemDetails.Group10 AS ItemGroup10, dbo.ItemDetails.Group11 AS ItemGroup11, dbo.ItemDetails.TagPrice, dbo.ItemDetails.PromotionalPrice01, dbo.ItemDetails.PromotionalPrice02, dbo.ItemDetails.PromotionalPrice03, 
                         dbo.ItemDetails.LowestPrice, dbo.ItemDetails.Cost, dbo.ItemDetails.WeightedAverageCost, dbo.ItemDetails.LastReceiptDate, dbo.ItemDetails.LicenseCost, dbo.ItemDetails.SafetyLevel, dbo.ItemDetails.ReorderPoint, 
                         dbo.ItemDetails.SeasonalFactor, dbo.ItemDetails.[Unit Of Measure], dbo.ItemDetails.[Average Cost], dbo.ItemDetails.[Trade Price], dbo.ItemDetails.[Retail Price], dbo.ItemDetails.VendorCode, dbo.ItemDetails.VendorName, 
                         dbo.ItemDetails.[UOM Type], dbo.ItemDetails.[Cost Price], dbo.[Outlet Details].OutletGroup01, dbo.[Outlet Details].OutletGroup02, dbo.[Outlet Details].OutletGroup03, dbo.[Outlet Details].OutletGroup04, 
                         dbo.[Outlet Details].OutletGroup05, dbo.[Outlet Details].OutletCountry, dbo.ItemDetails.ItemType, dbo.ItemDetails.ItemGroup, dbo.[Outlet Details].Lattitude01, dbo.[Outlet Details].Lattitude02, dbo.[Outlet Details].Lattitude03, 
                         dbo.[Outlet Details].Longitude02, dbo.[Outlet Details].Longitude01, dbo.[Outlet Details].Longitude03, dbo.POSSales.MonthNumber2Digits, dbo.POSSales.MonthNumber, dbo.POSSales.[Line Number], dbo.POSSales.[Line Total], 
                         dbo.POSSales.PublicHoliday, dbo.ItemDetails.ItemDetailsGroup01, dbo.ItemDetails.ItemDetailsGroup02, dbo.ItemDetails.ItemDetailsGroup03, dbo.ItemDetails.ItemDetailsGroup04, dbo.ItemDetails.ItemDetailsGroup05, 
                         dbo.ItemDetails.ItemDetailsGroup06, dbo.ItemDetails.ItemDetailsGroup07, dbo.ItemDetails.ItemDetailsGroup08, dbo.ItemDetails.ItemDetailsGroup09, dbo.ItemDetails.ItemDetailsGroup10, dbo.ItemDetails.ItemDetailsGroup11, 
                         dbo.POSSales.POSSalesGroup01 AS Channel, dbo.POSSales.POSSalesGroup02 AS MealPeriod, dbo.POSSales.POSSalesGroup03, dbo.POSSales.POSSalesGroup04, dbo.POSSales.POSSalesGroup05, 
                         dbo.POSSales.POSSalesGroup06, dbo.POSSales.POSSalesGroup07, dbo.POSSales.OutletName, dbo.[Outlet Details].[Outlet Code], dbo.POSSales.[Unique Identity], dbo.POSSales.[Breakfast Check Average], 
                         dbo.POSSales.[Breakfast PAX], dbo.POSSales.[Breakfast Sales], dbo.POSSales.[Brunch Check Average], dbo.POSSales.[Brunch Sales], dbo.POSSales.[Brunch PAX], dbo.POSSales.[Catering Lunch Box Income], 
                         dbo.POSSales.[Daily Income from Takeaway], dbo.POSSales.Deliveroo, dbo.POSSales.[Delivery Settlement], dbo.POSSales.[Deposit Redemption Paid], dbo.POSSales.[Dinner Check Average], dbo.POSSales.[Dinner PAX], 
                         dbo.POSSales.[Dinner Sales], dbo.POSSales.Discount, dbo.POSSales.[ECP Wine], dbo.[Outlet Details].LastUpdated AS Expr1, dbo.POSSales.[Gift Certificate], dbo.POSSales.[Lunch Check Average], dbo.POSSales.[Lunch PAX], 
                         dbo.POSSales.[Lunch Sales], dbo.POSSales.[Late Night Check Average], dbo.POSSales.[Late Night PAX], dbo.POSSales.[Late Night Sales], dbo.POSSales.[Loyalty Card Income], dbo.POSSales.[Number of Cards Loyalty], 
                         dbo.POSSales.[Number of Event Pax], dbo.POSSales.[Number of Events], dbo.POSSales.[Number of Loyalty Pax], dbo.POSSales.[Party Check Average], dbo.POSSales.[Party Sales], dbo.POSSales.[Party PAX], 
                         dbo.POSSales.TestData, dbo.POSSales.[Revenue Generated Loyalty], dbo.POSSales.[Revenue per Event], dbo.POSSales.[Tea Sales], dbo.POSSales.[Tea Check Average], dbo.POSSales.[Tea PAX], dbo.POSSales.[Total PAX], 
                         dbo.POSSales.[Union Pay], dbo.POSSales.Tips, dbo.POSSales.Complaint, dbo.POSSales.[10 Percent Service Charge], dbo.[Outlet Details].[Prediction Model Name], dbo.ItemDetails.ItemName
FROM            dbo.POSSales LEFT OUTER JOIN
                         dbo.ItemDetails ON dbo.POSSales.ItemCode = dbo.ItemDetails.ItemCode LEFT OUTER JOIN
                         dbo.[Outlet Details] ON dbo.POSSales.[Outlet Name] = dbo.[Outlet Details].[Outlet Name] "



        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE View POSSalesView   " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "EXECUTION" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If


            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'KPIView create
        myCommand = " CREATE VIEW [dbo].[KPIView]
AS
SELECT        dbo.[KPI Values].ParentCompany, dbo.[KPI Values].CompanyName, dbo.[KPI Values].YearCode, dbo.[KPI Values].MonthCode, dbo.[KPI Values].DayOfWeekNumber, dbo.[KPI Values].DayOfYear, 
                         dbo.[KPI Values].MonthCodeShort, dbo.[KPI Values].DayOfWeekName, dbo.[KPI Values].DayOfWeekNameShort, dbo.[KPI Values].DayOfMonth, dbo.[KPI Values].WeekEnd, dbo.[KPI Values].WeekDay, 
                         dbo.[KPI Values].WorkDay, dbo.[KPI Values].[Number Work Days In Month], dbo.[KPI Values].[Number NonWork Days In Month], dbo.[KPI Values].[Number Days In Month], dbo.[KPI Values].[Day Of Month], 
                         dbo.[KPI Values].WeekNumber, dbo.[KPI Values].[KPI Name], dbo.[KPI Values].[KPI Value Number], dbo.[KPI Values].[KPI Value String], dbo.[KPI Values].[KPI Value YesNo], dbo.[KPI Values].[Outlet Name], 
                         dbo.[KPI Values].LastUpdated, dbo.[KPI Values].[Unique Identity], dbo.[KPI Values].HourCode, dbo.[KPI Values].MinuteCode, dbo.[KPI Values].SecondCode, dbo.[KPI Values].AMPM, dbo.[KPI Values].PublicHoliday, 
                         dbo.[KPI Values].[Date Record], dbo.[KPI Values].CalculationDetails, dbo.[Outlet Details].Longitude03, dbo.[Outlet Details].Longitude02, dbo.[Outlet Details].Longitude01, dbo.[Outlet Details].Lattitude03, 
                         dbo.[Outlet Details].Lattitude02, dbo.[Outlet Details].Lattitude01, dbo.[Outlet Details].OutletCountry, dbo.[Outlet Details].OutletGroup05, dbo.[Outlet Details].OutletGroup04, dbo.[Outlet Details].OutletGroup03, 
                         dbo.[Outlet Details].OutletGroup02, dbo.[Outlet Details].OutletGroup01, dbo.[Outlet Details].Lattitude, dbo.[Outlet Details].Longitude, dbo.[Outlet Details].Tables, dbo.[Outlet Details].Seats, 
                         dbo.[Outlet Details].[Square Meter], dbo.[Outlet Details].[Square Foot], dbo.[Outlet Details].Description, dbo.[Outlet Details].[Description Long], dbo.[KPI Values].KPIGroup01 AS ItemName, 
                         dbo.[KPI Values].KPIGroup02 AS Channel, dbo.[KPI Values].KPIGroup03 AS [Meal Period], dbo.[KPI Values].KPIGroup04, dbo.[KPI Values].KPIGroup05, dbo.[KPI Values].KPIGroup06, dbo.[KPI Values].KPIGroup07, 
                         dbo.[KPI Values].KPIGroup08, dbo.[KPI Values].KPIGroup09, dbo.[KPI Values].KPIGroup10, dbo.[KPI Values].[Gross Margin], dbo.[KPI Values].[Cost Of Sales], dbo.[KPI Values].Expenses, 
                         dbo.[KPI Values].[Net Profit], dbo.[KPI Values].[Net Profit %], dbo.[KPI Values].[Gross Margin %], dbo.[KPI Values].Sales
FROM            dbo.[KPI Values] LEFT OUTER JOIN
                         dbo.[Outlet Details] ON dbo.[KPI Values].CompanyName = dbo.[Outlet Details].CompanyName AND dbo.[KPI Values].[Outlet Name] = dbo.[Outlet Details].[Outlet Name] "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("CREATE View KPIView   " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '  Delay(5)
        Catch
            'error 5 = duplicate
            If UCase(Mid(Err.Description, 1, 9)) = "INCORRECT" Then
                MessageBox.Show("'" & Mid(myCommand, 1, 100) & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        '************* updates for Vend


        myCommand = "Alter Table CustomerContacts alter Column [Customer Name] nchar(80)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerContacts alter Column [Customer Name] nchar(80) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [Email Addresss] nchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerContacts alter Column [Email Addresss] nchar(50) " & CustomerNameTemp)
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [AddressLine01] nvarchar(200)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerContacts alter Column [AddressLine01] nvarchar(200) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()
        myCommand = "Alter Table CustomerContacts alter Column [AddressLine02] nvarchar(200)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerContacts alter Column [AddressLine02] nvarchar(200) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()
        myCommand = "Alter Table CustomerContacts alter Column [AddressLine03] nvarchar(200)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerContacts alter Column [AddressLine03] nvarchar(200) " & CustomerNameTemp)
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [AddressLine04] nvarchar(200)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerContacts alter Column [AddressLine04] nvarchar(200) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'adds new fields
        myCommand = "Alter Table [CustomerContacts] add  [DoNotEmail] nchar(10), [Phone]	nvarchar(50), " &
            "[Fax]  nvarchar(50), [Twitter]   nvarchar(50), [Website]  nvarchar(100),  [PostCode] nchar(20), [CountryCode]  nchar(10), " &
            "[PostalCountryCode] nchar(10), [Physical Suburb]   nvarchar(50), [Physical City] nvarchar(50), [Physical PostCode] nchar(20), [Physical State] nvarchar(50), " &
            "[Postal Suburb]   nvarchar(50), [Postal City]  nvarchar(50), [Postal State]    nvarchar(50), [Unique Identity] Uniqueidentifier, [Version]  Bigint  "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerContacts add [DoNotEmail] nchar(10), [Phone]	nvarchar(50), " &
            "[Fax]  nvarchar(50), [Twitter]   nvarchar(50), [Website]  nvarchar(100),  [PostCode] nchar(20), [CountryCode]  nchar(10), " &
            "[PostalCountryCode] nchar(10), [Physical Suburb]   nvarchar(50), [Physical City] nvarchar(50), [Physical PostCode] nchar(20), [Physical State] nvarchar(50), " &
            "[Postal Suburb]   nvarchar(50), [Postal City]  nvarchar(50), [Postal State]    nvarchar(50), [Unique Identity] Uniqueidentifier, [Version]  Bigint  " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        'adds to customer contacts the customer code as may be missing due to mis naming earlier

        myCommand = "Alter Table [CustomerContacts] add  [Customer Code]	nchar(15)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerContacts add [Customer Code]	nchar(15) " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "CREATE Trigger [dbo].[TRG_InsertCheckCustomerContacts] ON [dbo].[CustomerContacts] 
                        AFTER INSERT AS 
DECLARE @unique_id uniqueidentifier, @latest_version bigint; 
SET @unique_id = (select [Unique Identity] from inserted) 
SET @latest_version = (select [Version] from inserted) 
BEGIN 
DELETE FROM [CustomerContacts] WHERE [CustomerContacts].[Unique Identity] = @unique_id and [CustomerContacts].[Version] < @latest_version 
END; "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerContacts add [Customer Code]	nchar(15) " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        'customerheaders

        myCommand = "Alter Table CustomerHeaders alter Column [CompanyName] nvarchar(80)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerHeaders alter Column [CompanyName] nvarchar(80) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table CustomerHeaders alter Column [Customer Name] nvarchar(80)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerHeaders alter Column [Customer Name] nvarchar(80)" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerHeaders alter Column [Customer Code] nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerHeaders alter Column [Customer Code] nvarchar(50) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerHeaders alter Column [Email Addresss] nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerHeaders alter Column [Email Addresss] nvarchar(50) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table CustomerHeaders alter Column [AddressLine01] nvarchar(200)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerHeaders alter Column [AddressLine01] nvarchar(200) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerHeaders alter Column [AddressLine02] nvarchar(200)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerHeaders alter Column [AddressLine02] nvarchar(200) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerHeaders alter Column [AddressLine03] nvarchar(200)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerHeaders alter Column [AddressLine03] nvarchar(200) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table CustomerHeaders alter Column [AddressLine04] nvarchar(200)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerHeaders alter Column [AddressLine04] nvarchar(200) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerHeaders alter Column [CountryRegion] nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerHeaders alter Column [CountryRegion] nvarchar(50) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerHeaders alter Column [County] nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerHeaders alter Column [County] nvarchar(50) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        'adds new fields
        myCommand = "Alter Table [CustomerHeaders] add  [Gender] nchar(10),  [Phone] nvarchar(50) ,  [PostalCountryCode] nchar(20),  [EnableLoyalty] nchar(20), " &
            " [CreatedAt] nvarchar(50), [UpdatedAt] nvarchar(50), [DeletedAt] nvarchar(50), [Version] BigInt, [Balance] Decimal(18,8), [LoyaltyBalance] Decimal(18,8), " &
            "[YearToDate] Int, [CustomerHeadersGroup01] nvarchar(Max), [CustomerHeadersGroup02] nvarchar(Max), [CustomerHeadersGroup03] nvarchar(Max), " &
            "[CustomerHeadersGroup04] nvarchar(Max), [Note] nvarchar(Max), [CustomerGroupId] UNIQUEIDENTIFIER "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered  Table [CustomerHeaders] add  [Gender] nchar(10),  [Phone] nvarchar(50) ,  [PostalCountryCode] nchar(20),  [EnableLoyalty] nchar(20), " &
            " [CreatedAt] nvarchar(50), [UpdatedAt] nvarchar(50), [DeletedAt] nvarchar(50), [Version] BigInt, [Balance] Decimal(18,8), [LoyaltyBalance] Decimal(18,8), " &
            "[YearToDate] Int, [CustomerHeadersGroup01] nvarchar(Max), [CustomerHeadersGroup02] nvarchar(Max), [CustomerHeadersGroup03] nvarchar(Max), " &
            "[CustomerHeadersGroup04] nvarchar(Max), [Note] nvarchar(Max), [CustomerGroupId] UNIQUEIDENTIFIER  " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()




        myCommand = "CREATE Trigger [dbo].[TRG_InsertCheckCustomerHeaders] ON [dbo].[CustomerHeaders] 
AFTER INSERT AS 
DECLARE @unique_id uniqueidentifier, @latest_version bigint; 
SET @unique_id = (select [Unique Identity] from inserted) 
SET @latest_version = (select [Version] from inserted) 
BEGIN 
DELETE FROM dbo.CustomerHeaders WHERE CustomerHeaders.[Unique Identity] = @unique_id and CustomerHeaders.[Version] < @latest_version 
END;  "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerHeaders added trigger " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'Inventory

        myCommand = "Alter Table Inventory alter Column [InventoryGroup01] nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered Inventory alter Column [InventoryGroup01] nvarchar(50) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'adds new fields
        myCommand = "Alter Table [Inventory] add  [Version] Bigint "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered  Table [Inventory] add  [Version] Bigint " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Create Trigger TRG_InsertCheckInventory ON dbo.[Inventory] 
AFTER INSERT AS 
DECLARE @unique_id uniqueidentifier, @latest_version bigint; 
SET @unique_id = (select [UniqueIdentity] from inserted) 
SET @latest_version = (select [Version] from inserted) 
BEGIN 
DELETE FROM [Inventory] WHERE [Inventory].[UniqueIdentity] = @unique_id and [Inventory].[Version] < @latest_version 
END; "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered Inventory added trigger " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'item details
        'adds new fields
        myCommand = "Alter Table [ItemDetails] add  [VariantName] Nvarchar(500),  PriceExcludingTax DECIMAL(18,3), Supplier Nvarchar(50), [Supplier Code]  Nvarchar(50)," &
            " [Supplier ID]  Nvarchar(50), [Version]  Bigint"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered  Table [ItemDetails] add [VariantName] Nvarchar(500),  PriceExcludingTax DECIMAL(18,3), Supplier Nvarchar(50), " &
                                          "[Supplier Code]  Nvarchar(50), [Supplier ID]  Nvarchar(50), [Version]  Bigint" & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table ItemDetails alter Column [ItemName] nvarchar(300)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered Inventory alter Column [InventoryGroup01] nvarchar(50) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table ItemDetails alter Column [DescriptionLong] Ntext"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered Inventory alter Column [DescriptionLong] Ntext " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'outlet details
        'adds new fields
        myCommand = "Alter Table [Outlet Details] add   [PhysicalAddress01]  Nvarchar(Max),  [PhysicalAddress02]  Nvarchar(Max),  [Suburb]  Nvarchar(200),  [City]  Nvarchar(50), " &
            "  [PostCode]  Nvarchar(20),  [State]  Nvarchar(50),  [Version]  Bigint, [Order number prefix] Nvarchar(50), [Order number]  Nvarchar(50), " &
            "[Supplier return prefix]  Nvarchar(50), [Supplier return number]  Nvarchar(50), [Low Stock Warning]  Nvarchar(50) "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered  Table [Outlet Details] add   [PhysicalAddress01]  Nvarchar(Max),  [PhysicalAddress02]  Nvarchar(Max),  [Suburb]  Nvarchar(200),  [City]  Nvarchar(50), " &
            "  [PostCode]  Nvarchar(20),  [State]  Nvarchar(50),  [Version]  Bigint, [Order number prefix] Nvarchar(50), [Order number]  Nvarchar(50), " &
            "[Supplier return prefix]  Nvarchar(50), [Supplier return number]  Nvarchar(50), [Low Stock Warning]  Nvarchar(50)" & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Create Trigger TRG_InsertCheckOutletDetails ON dbo.[Outlet Details] 
                AFTER INSERT AS 
DECLARE @unique_id uniqueidentifier, @latest_version bigint; 
SET @unique_id = (select [Unique Identity] from inserted) 
SET @latest_version = (select [Version] from inserted) 
BEGIN 
DELETE FROM [Outlet Details] WHERE [Outlet Details].[Unique Identity] = @unique_id and [Outlet Details].[Version] < @latest_version 
END; "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered Outlet Details added trigger " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()





        'POS sales
        myCommand = "Alter Table POSSales alter Column [Date Record] Datetime"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column [Date Record] Datetime " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        'need to remove primary key first
        myCommand = "Alter Table POSSales drop constraint PK_POSSales"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales drop constraint PK_POSSales " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        'allow nulls
        myCommand = "Alter Table POSSales alter Column  [Unique Identity] UNIQUEIDENTIFIER  Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales  [Unique Identity] UNIQUEIDENTIFIER  Null " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table POSSales alter Column   [ItemCode]  Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column [ItemCode]  Nvarchar(50)" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table POSSales alter Column   [CustomerCode]  Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column [CustomerCode]  Nvarchar(50)" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table POSSales alter Column   [POSSalesGroup01]  Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column [POSSalesGroup01]  Nvarchar(50)" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table POSSales alter Column   [POSSalesGroup04]  Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column [POSSalesGroup04]  Nvarchar(50)" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table POSSales alter Column   [POSSalesGroup04]  Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column [POSSalesGroup04]  Nvarchar(50)" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table POSSales alter Column  [Line Number]  Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column [Line Number]  Nvarchar(50)" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table POSSales alter Column    [Staff ID]     Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column   [Staff ID]     Nvarchar(50)" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table POSSales alter Column   [POSSalesGroup13]  Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column [POSSalesGroup13]  Nvarchar(50)" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        'adds fields
        'adds new fields
        myCommand = "Alter Table [POSSales] add   [Tax]  Decimal(18,3),  [UnitTax]  Decimal(18,3), [UnitCost]  Decimal(18,3), [UpdatedAt]  Datetime, " &
            "[Promotion Amount]  Decimal(18,4), [Promotion Name]  NVARCHAR (100), [Promotion Id]  NVARCHAR (50), [Version]  Bigint"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered  Table [Outlet Details] add   [Tax]  Decimal(18,3),  [UnitTax]  Decimal(18,3), [UnitCost]  Decimal(18,3), [UpdatedAt]  Datetime, " &
            "[Promotion Amount]  Decimal(18,4), [Promotion Name]  NVARCHAR (100), [Promotion Id]  NVARCHAR (50), [Version]  Bigint " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "CREATE Trigger [dbo].[TRG_InsertCheckPOSSales] ON [dbo].[POSSales] 
AFTER INSERT AS 
DECLARE @invoice_no nchar(30), @latest_version bigint; 
SET @invoice_no = (select [Reference Number] from inserted) 
SET @latest_version = (select [Version] from inserted) 
BEGIN 
DELETE FROM POSSales WHERE POSSales.[Reference Number] = @invoice_no and POSSales.[Version] < @latest_version 
END;  "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales added trigger " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        'purcahse order lines

        myCommand = "Alter Table PurchaseOrderLines alter Column   [Reference Number]  Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column [Reference Number]  Nvarchar(50)" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table PurchaseOrderLines alter Column   [PO Date]  Datetime"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column   [PO Date]  Datetime" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table PurchaseOrderLines alter Column [Status]  Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column   [Status]  Nvarchar(50)" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table PurchaseOrderLines alter Column [Required Date]  Datetime"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered POSSales alter Column   [Status]  Nvarchar(50)" & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'adds new fields
        myCommand = "Alter Table PurchaseOrderLines add   [Outlet Id] UNIQUEIDENTIFIER, [Source Outlet Id] UNIQUEIDENTIFIER, [Version]  Bigint,[Type]  NVARCHAR (50), " &
            "[Received At] DATETIME , [POGroup01] DECIMAL (18,4), [POGroup02] DECIMAL (18,4), [POGroup03] DECIMAL (18,4), [POGroup04] DECIMAL (18,4),  " &
            "[PO Name]   NVARCHAR (50),  [Deleted At]   DATETIME  , [Updated At]  DATETIME "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered  Table [Outlet Details] add   [Tax]  Decimal(18,3),  [UnitTax]  Decimal(18,3), [UnitCost]  Decimal(18,3), [UpdatedAt]  Datetime, " &
            "[Promotion Amount]  Decimal(18,4), [Promotion Name]  NVARCHAR (100), [Promotion Id]  NVARCHAR (50), [Version]  Bigint " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Create Trigger TRG_InsertCheckConsignment ON dbo.[PurchaseOrderLines] 
AFTER INSERT AS 
DECLARE @unique_id uniqueidentifier, @latest_version bigint; 
SET @unique_id = (select [UniqueIdentity] from inserted) 
SET @latest_version = (select [Version] from inserted) 
BEGIN 
DELETE FROM [PurchaseOrderLines] WHERE [PurchaseOrderLines].[UniqueIdentity] = @unique_id and [PurchaseOrderLines].[Version] < @latest_version 
END; "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered PurchaseOrderLines added trigger " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'vendor headers
        myCommand = "Alter Table VendorHeaders alter Column [Vendor Code] Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered VendorHeaders alter Column Vendor Code Nvarchar(50) " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        'adds new fields
        myCommand = "Alter Table VendorHeaders add   [Source]  Nvarchar(50),  [Description]  NTEXT ,  [DeletedAt] DATETIME   , [Version]   BIGINT"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered  Table VendorHeaders add   [Source]  Nvarchar(50),  [Description]  NTEXT ,  [DeletedAt] DATETIME   , [Version]   BIGINT " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Create Trigger TRG_InsertCheckVendorHeaders ON dbo.[VendorHeaders] 
AFTER INSERT AS 
DECLARE @unique_id nvarchar(50), @latest_version bigint; 
SET @unique_id = (select [Vendor Code] from inserted) 
SET @latest_version = (select [Version] from inserted) 
BEGIN 
DELETE FROM [VendorHeaders] WHERE [VendorHeaders].[Vendor Code] = @unique_id and [VendorHeaders].[Version] < @latest_version 
END; "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered VendorHeaders added trigger " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        'CustomerGroup
        myCommand = "CREATE TABLE [dbo].[CustomerGroup] ( 
    [Unique Identity]   UNIQUEIDENTIFIER NULL, 
    [CustomerGroupName] NVARCHAR (50)    NULL, 
    [Group Id]          NVARCHAR (50)    NULL, 
    [CreatedAt]         DATETIME         NULL, 
    [UpdatedAt]         DATETIME         NULL, 
    [DeletedAt]         DATETIME         NULL, 
    [Version]           BIGINT           NULL) "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("added table CustomerGroup " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Create Trigger TRG_InsertCheckCustomerGroup ON dbo.[CustomerGroup] 
AFTER INSERT AS 
DECLARE @unique_id uniqueidentifier, @latest_version bigint; 
SET @unique_id = (select [Unique Identity] from inserted) 
SET @latest_version = (select [Version] from inserted) 
BEGIN 
DELETE FROM [CustomerGroup] WHERE [CustomerGroup].[Unique Identity] = @unique_id and [CustomerGroup].[Version] < @latest_version 
END;  "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered CustomerGroup added trigger " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'ItemCategories
        myCommand = "CREATE TABLE [dbo].[ItemCategories] ( 
    [Unique Identity]  NVARCHAR (50) NULL, 
    [Item Code]        NVARCHAR (50) NULL, 
    [ItemCategoryName] NVARCHAR (50) NULL, 
    [DeletedAt]        NVARCHAR (50) NULL, 
    [Version]          BIGINT        NULL 

) "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("added table ItemCategories " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'ItemTaxesMapping
        myCommand = "CREATE TABLE [dbo].[ItemTaxesMapping] ( 
    [Outlet Id] NVARCHAR (50) NULL, 
    [Item Code] NVARCHAR (50) NULL, 
    [Tax Id]    NVARCHAR (50) NULL, 
    [DeletedAt] NVARCHAR (50) NULL, 
    [Version]   BIGINT        NULL 
) "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("added table ItemTaxesMapping " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "Create Trigger TRG_InsertCheckItemTaxesMapping ON dbo.ItemTaxesMapping 
AFTER INSERT AS 
DECLARE @outlet_id nvarchar(50), @item_code nvarchar(50), @version bigint; 
SET @outlet_id = (select [Outlet Id] from inserted) 
SET @item_code = (select [Item Code] from inserted) 
SET @version = (select [Version] from inserted) 
BEGIN 
DELETE FROM ItemTaxesMapping WHERE ItemTaxesMapping.[Outlet Id] = @outlet_id and ItemTaxesMapping.[Version] < @version  
AND ItemTaxesMapping.[Item Code] = @item_code 
END;"


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered ItemTaxesMapping added trigger " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'ItemVariantOptions
        myCommand = "CREATE TABLE [dbo].[ItemVariantOptions] ( 
    [Unique Identity]  NVARCHAR (50) NULL, 
    [Item Code]        NVARCHAR (50) NULL, 
    [ItemVariantName]  NVARCHAR (50) NULL, 
    [ItemVariantValue] NVARCHAR (50) NULL 
)"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("added table ItemVariantOptions " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        'Registers
        myCommand = "CREATE TABLE [dbo].[Registers] ( 
    [Unique Identity]              UNIQUEIDENTIFIER NULL, 
    [Register Name]                NVARCHAR (50)    NULL, 
    [Outlet Id]                    UNIQUEIDENTIFIER NULL, 
    [Ask for Note On Save]         INT              NULL, 
    [Print Note On Receipt]        BIT              NULL, 
    [Ask For User On Sale]         BIT              NULL, 
    [Show Discount On Receipts]    BIT              NULL, 
    [Print Receipt]                BIT              NULL, 
    [Email Receipt]                BIT              NULL, 
    [Invoice Prefix]               NVARCHAR (30)    NULL, 
    [Invoice Suffix]               NVARCHAR (30)    NULL, 
    [Invoice Sequence]             INT              NULL, 
    [Button Layout Id]             NVARCHAR (50)    NULL, 
    [Is Open]                      BIT              NULL, 
    [Is Quick Keys Enabled]        BIT              NULL, 
    [DeletedAt]                    NVARCHAR (50)    NULL, 
    [Register Open Time]           NVARCHAR (50)    NULL, 
    [Register Close Time]          NVARCHAR (50)    NULL, 
    [Register Open Sequence Id]    UNIQUEIDENTIFIER NULL, 
    [Cash Managed Payment Type Id] UNIQUEIDENTIFIER NULL, 
    [Version]                      BIGINT           NULL 
)"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("added table Registers " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Create Trigger TRG_InsertCheckRegisters ON dbo.Registers 
AFTER INSERT AS 
DECLARE @unique_id uniqueidentifier, @latest_version bigint; 
SET @unique_id = (select [Unique Identity] from inserted) 
SET @latest_version = (select [Version] from inserted) 
BEGIN 
DELETE FROM Registers WHERE Registers.[Unique Identity] = @unique_id and Registers.[Version] < @latest_version 
END; "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered Registers added trtigger " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'Taxes
        myCommand = "CREATE TABLE [dbo].[Taxes] ( 
    [Unique Identity] NVARCHAR (50)   NULL, 
    [Tax Name]        NVARCHAR (100)  NULL, 
    [Version]         BIGINT          NULL, 
    [DeletedAt]       NVARCHAR (50)   NULL, 
    [Rate ID]         NVARCHAR (50)   NULL, 
    [Rate Name]       NVARCHAR (100)  NULL, 
    [Tax Rate]        DECIMAL (18, 4) NULL, 
    [Is Default]      NCHAR (10)      NULL, 
    [Display Name]    NVARCHAR (100)  NULL 
)"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("added table Taxes " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        '******** 10th Jan 2018 *************



        myCommand = "CREATE TABLE [dbo].[InventoryHistory] (
    [ParentCompany]           NVARCHAR (50)    NULL,
    [CompanyName]             NVARCHAR (50)    NULL,
    [Description]             NVARCHAR (250)   NULL,
    [DescriptionLong]         NTEXT            NULL,
    [ItemName]                NVARCHAR (50)    NULL,
    [ItemCode]                NVARCHAR (50)    NULL,
    [CustomerName]            NVARCHAR (50)    NULL,
    [CustomerCode]            NCHAR (20)       NULL,
    [Quantity On Hand]        DECIMAL (18, 4)  NULL,
    [Return]                  BIT              NULL,
    [Quantity Reserved]       DECIMAL (18, 4)  NULL,
    [Quantity on Hold]        NCHAR (10)       NULL,
    [Value In Base]           DECIMAL (18, 3)  NULL,
    [Standard Cost]           DECIMAL (18, 3)  NULL,
    [Location Name]           NVARCHAR (50)    NULL,
    [LocationCode]            NCHAR (20)       NULL,
    [Group01]                 NVARCHAR (20)    NULL,
    [InventoryGroup01]        NVARCHAR (50)    NULL,
    [Group02]                 NVARCHAR (20)    NULL,
    [InventoryGroup02]        NVARCHAR (20)    NULL,
    [Group03]                 NVARCHAR (20)    NULL,
    [InventoryGroup03]        NVARCHAR (20)    NULL,
    [Group04]                 NVARCHAR (20)    NULL,
    [InventoryGroup04]        NVARCHAR (20)    NULL,
    [Group05]                 NVARCHAR (20)    NULL,
    [InventoryGroup05]        NVARCHAR (20)    NULL,
    [Group06]                 NVARCHAR (20)    NULL,
    [InventoryGroup06]        NVARCHAR (20)    NULL,
    [Group07]                 NVARCHAR (20)    NULL,
    [InventoryGroup07]        NVARCHAR (20)    NULL,
    [Group08]                 NVARCHAR (20)    NULL,
    [InventoryGroup08]        NVARCHAR (20)    NULL,
    [Group09]                 NVARCHAR (20)    NULL,
    [InventoryGroup09]        NVARCHAR (20)    NULL,
    [Group10]                 NVARCHAR (20)    NULL,
    [InventoryGroup10]        NVARCHAR (20)    NULL,
    [Group11]                 NVARCHAR (20)    NULL,
    [InventoryGroup11]        NVARCHAR (20)    NULL,
    [TagPrice]                DECIMAL (18, 3)  NULL,
    [PromotionalPrice01]      DECIMAL (18, 3)  NULL,
    [PromotionalPrice02]      DECIMAL (18, 3)  NULL,
    [PromotionalPrice03]      DECIMAL (18, 3)  NULL,
    [LowestPrice]             DECIMAL (18, 3)  NULL,
    [Cost]                    DECIMAL (18, 3)  NULL,
    [WeightedAverageCost]     DECIMAL (18, 3)  NULL,
    [LastReceiptDate]         DATE             NULL,
    [LicenseCost]             DECIMAL (18, 3)  NULL,
    [SafetyLevel]             DECIMAL (18, 3)  NULL,
    [ReorderPoint]            DECIMAL (18, 3)  NULL,
    [SeasonalFactor]          DECIMAL (18, 3)  NULL,
    [Unit Of Measure]         NCHAR (15)       NULL,
    [UOM Type]                NCHAR (15)       NULL,
    [ExternalSystemID]        NCHAR (20)       NULL,
    [ExternalSystemQualifier] NCHAR (10)       NULL,
    [Brand]                   NVARCHAR (50)    NULL,
    [Outlet Name]             NVARCHAR (50)    NULL,
    [Warehouse Name]          NVARCHAR (50)    NULL,
    [Date Entered]            DATE             NULL,
    [UniqueIndex]             UNIQUEIDENTIFIER NULL,
    [LastUpdated]             DATE             NULL,
    [LastModified]            DATE             NULL,
    [Consignment]             BIT              NULL,
    [UniqueIdentity]          UNIQUEIDENTIFIER NULL,
    [Version]                 BIGINT           NULL,
    [TimeStamp]               DATETIME         NULL,
    [TimePeriod]              NVARCHAR (50)    NULL
);"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("added table InventoryHistory " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "CREATE TABLE [dbo].[POSSalesModifiedRecords] (
    [ParentCompany]                NVARCHAR (50)    NULL,
    [CompanyName]                  NVARCHAR (50)    NULL,
    [IndexNumber]                  INT              NULL,
    [Date Record]                  DATETIME         NULL,
    [Outlet Name]                  NVARCHAR (255)   NULL,
    [Reference Number]             NVARCHAR (50)    NULL,
    [Food]                         DECIMAL (18, 4)  NULL,
    [Beverage]                     DECIMAL (18, 4)  NULL,
    [Wine]                         DECIMAL (18, 4)  NULL,
    [Others]                       DECIMAL (18, 4)  NULL,
    [ECP BV]                       DECIMAL (18, 4)  NULL,
    [ECP Wine]                     DECIMAL (18, 4)  NULL,
    [Date Time]                    DATETIME         NULL,
    [Unique Identity]              UNIQUEIDENTIFIER NULL,
    [OutletName]                   NVARCHAR (50)    NULL,
    [Total Net Sales]              DECIMAL (18, 3)  NULL,
    [CurrencyCode]                 NCHAR (15)       NULL,
    [Total Gross Sales]            DECIMAL (18, 3)  NULL,
    [Remarks]                      NTEXT            NULL,
    [Weather]                      NVARCHAR (30)    NULL,
    [TestData]                     BIT              NULL,
    [YearCode]                     NCHAR (10)       NULL,
    [MonthCode]                    NCHAR (10)       NULL,
    [DayOfWeekNumber]              NCHAR (10)       NULL,
    [DayOfYear]                    NCHAR (10)       NULL,
    [MonthCodeShort]               NCHAR (10)       NULL,
    [DayOfWeekName]                NCHAR (10)       NULL,
    [DayOfWeekNameShort]           NCHAR (10)       NULL,
    [Dinner Covers]                DECIMAL (18)     NULL,
    [Lunch Covers]                 DECIMAL (18)     NULL,
    [Breakfast Covers]             DECIMAL (18)     NULL,
    [Lunch Cover Average]          DECIMAL (18, 3)  NULL,
    [Average Check]                DECIMAL (18, 3)  NULL,
    [Breakfast Cover Average]      DECIMAL (18, 3)  NULL,
    [Payment Total]                DECIMAL (18, 3)  NULL,
    [Discount Total]               DECIMAL (18, 3)  NULL,
    [Five Percent Tax]             DECIMAL (18, 3)  NULL,
    [Ten Percent Charge]           DECIMAL (18, 3)  NULL,
    [Dinner Cover Average]         DECIMAL (18, 3)  NULL,
    [Manager Dining Benefit]       DECIMAL (18, 3)  NULL,
    [EntbyEclipseCharge]           DECIMAL (18, 3)  NULL,
    [EntbyManagersCharge]          DECIMAL (18, 3)  NULL,
    [EntPromotionsCharge]          DECIMAL (18, 3)  NULL,
    [Octopus Charge]               DECIMAL (18, 3)  NULL,
    [Points Charge]                DECIMAL (18, 3)  NULL,
    [China CC Charge]              DECIMAL (18, 3)  NULL,
    [JCB Charge]                   DECIMAL (18, 3)  NULL,
    [Diner Charge]                 DECIMAL (18, 3)  NULL,
    [Master Charge]                DECIMAL (18, 3)  NULL,
    [VISA Charge]                  DECIMAL (18, 3)  NULL,
    [Amex Charge]                  DECIMAL (18, 3)  NULL,
    [Cash Charge]                  DECIMAL (18, 3)  NULL,
    [Wastage Charge]               DECIMAL (18, 3)  NULL,
    [Staff Drinks Charge]          DECIMAL (18, 3)  NULL,
    [Manager Meals Charge]         DECIMAL (18, 3)  NULL,
    [Food Tasting Charge]          DECIMAL (18, 3)  NULL,
    [Discount 50 Total]            DECIMAL (18, 3)  NULL,
    [Cigarette Charge]             DECIMAL (18, 3)  NULL,
    [City Ledger Charge]           DECIMAL (18, 3)  NULL,
    [Less Cr Card Tips Charge]     DECIMAL (18, 3)  NULL,
    [Gross Sales]                  DECIMAL (18, 3)  NULL,
    [Rounding Total]               DECIMAL (18, 3)  NULL,
    [CashVoucherCoupon]            DECIMAL (18, 3)  NULL,
    [Barter]                       DECIMAL (18, 3)  NULL,
    [Discount5]                    DECIMAL (18, 3)  NULL,
    [Discount10]                   DECIMAL (18, 3)  NULL,
    [Discount15]                   DECIMAL (18, 3)  NULL,
    [Discount20]                   DECIMAL (18, 3)  NULL,
    [Discount25]                   DECIMAL (18, 3)  NULL,
    [Discount25_30]                DECIMAL (18, 3)  NULL,
    [Discount30]                   DECIMAL (18, 3)  NULL,
    [Discount35]                   DECIMAL (18, 3)  NULL,
    [Description]                  NTEXT            NULL,
    [DescriptionLong]              NTEXT            NULL,
    [ItemName]                     NVARCHAR (50)    NULL,
    [ItemCode]                     NVARCHAR (50)    NULL,
    [CustomerName]                 NVARCHAR (50)    NULL,
    [CustomerCode]                 NVARCHAR (50)    NULL,
    [Quantity Sold]                DECIMAL (18, 4)  NULL,
    [Return]                       BIT              NULL,
    [Group01]                      NVARCHAR (30)    NULL,
    [POSSalesGroup01]              NVARCHAR (50)    NULL,
    [Group02]                      NVARCHAR (30)    NULL,
    [POSSalesGroup02]              NVARCHAR (30)    NULL,
    [Group03]                      NVARCHAR (30)    NULL,
    [POSSalesGroup03]              NVARCHAR (30)    NULL,
    [Group04]                      NVARCHAR (30)    NULL,
    [POSSalesGroup04]              NVARCHAR (50)    NULL,
    [Group05]                      NVARCHAR (30)    NULL,
    [POSSalesGroup05]              NVARCHAR (30)    NULL,
    [Group06]                      NVARCHAR (30)    NULL,
    [POSSalesGroup06]              NVARCHAR (30)    NULL,
    [Group07]                      NVARCHAR (30)    NULL,
    [POSSalesGroup07]              NVARCHAR (30)    NULL,
    [DayOfMonth]                   NCHAR (2)        NULL,
    [LoadName]                     NVARCHAR (30)    NULL,
    [Brunch Covers]                DECIMAL (18)     NULL,
    [Brunch Cover Average]         DECIMAL (18, 3)  NULL,
    [Foodora]                      DECIMAL (18, 3)  NULL,
    [Food By Web]                  DECIMAL (18, 3)  NULL,
    [Delivery Dot com]             DECIMAL (18, 3)  NULL,
    [Food Panda]                   DECIMAL (18, 3)  NULL,
    [DAD]                          DECIMAL (18, 3)  NULL,
    [Soho Delivery]                DECIMAL (18, 3)  NULL,
    [Food By Fone]                 DECIMAL (18, 3)  NULL,
    [Uber]                         DECIMAL (18, 3)  NULL,
    [Cigarette]                    DECIMAL (18, 3)  NULL,
    [Merchandise]                  DECIMAL (18, 3)  NULL,
    [Other Income]                 DECIMAL (18, 3)  NULL,
    [10% Service Charge]           DECIMAL (18, 3)  NULL,
    [Covers]                       DECIMAL (18)     NULL,
    [COGS]                         DECIMAL (18, 3)  NULL,
    [Expenses]                     DECIMAL (18, 3)  NULL,
    [WeekEnd]                      BIT              NULL,
    [Weekday]                      BIT              NULL,
    [WorkDay]                      BIT              NULL,
    [Number Work Days In Month]    INT              NULL,
    [Number NonWork Days In Month] INT              NULL,
    [Number Days In Month]         INT              NULL,
    [Day Of Month]                 INT              NULL,
    [WeekNumber]                   DECIMAL (18)     NULL,
    [HourCode]                     NCHAR (10)       NULL,
    [MinuteCode]                   NCHAR (10)       NULL,
    [SecondCode]                   NCHAR (10)       NULL,
    [LastUpdated]                  DATETIME         NULL,
    [PublicHoliday]                BIT              NULL,
    [Line Number]                  NVARCHAR (50)    NULL,
    [Line Total]                   DECIMAL (18, 3)  NULL,
    [MonthNumber]                  NCHAR (2)        NULL,
    [MonthNumber2Digits]           NCHAR (2)        NULL,
    [Brand]                        NVARCHAR (50)    NULL,
    [PaymentType01]                NVARCHAR (50)    NULL,
    [PaymentType02]                NCHAR (20)       NULL,
    [PaymentAmount01]              DECIMAL (18, 3)  NULL,
    [PaymentAmount02]              DECIMAL (18, 3)  NULL,
    [AMPM]                         NCHAR (2)        NULL,
    [10 Percent Service Charge]    DECIMAL (18, 3)  NULL,
    [Breakfast Check Average]      DECIMAL (18, 3)  NULL,
    [Breakfast PAX]                DECIMAL (18, 3)  NULL,
    [Breakfast Sales]              DECIMAL (18, 3)  NULL,
    [Brunch Sales]                 DECIMAL (18, 3)  NULL,
    [Brunch Check Average]         DECIMAL (18, 3)  NULL,
    [Brunch PAX]                   DECIMAL (18, 3)  NULL,
    [Tea Sales]                    DECIMAL (18, 3)  NULL,
    [Tea Check Average]            DECIMAL (18, 3)  NULL,
    [Tea PAX]                      DECIMAL (18, 3)  NULL,
    [Dinner Sales]                 DECIMAL (18, 3)  NULL,
    [Dinner Check Average]         DECIMAL (18, 3)  NULL,
    [Dinner PAX]                   DECIMAL (18, 3)  NULL,
    [Late Night Sales]             DECIMAL (18, 3)  NULL,
    [Late Night Check Average]     DECIMAL (18, 3)  NULL,
    [Late Night PAX]               DECIMAL (18, 3)  NULL,
    [Party Sales]                  DECIMAL (18, 3)  NULL,
    [Party Check Average]          DECIMAL (18, 3)  NULL,
    [Party PAX]                    DECIMAL (18, 3)  NULL,
    [Number of Events]             DECIMAL (18, 3)  NULL,
    [Revenue per Event]            DECIMAL (18, 3)  NULL,
    [Number of Event Pax]          DECIMAL (18, 3)  NULL,
    [Number of Loyalty Pax]        DECIMAL (18, 3)  NULL,
    [Number of Cards Loyalty]      DECIMAL (18, 3)  NULL,
    [Daily Income from Takeaway]   DECIMAL (18, 3)  NULL,
    [Revenue Generated Loyalty]    DECIMAL (18, 3)  NULL,
    [Deliveroo]                    DECIMAL (18, 3)  NULL,
    [Catering Lunch Box Income]    DECIMAL (18, 3)  NULL,
    [Loyalty Card Income]          DECIMAL (18, 3)  NULL,
    [Delivery Settlement]          DECIMAL (18, 3)  NULL,
    [Discount]                     DECIMAL (18, 3)  NULL,
    [Union Pay]                    DECIMAL (18, 3)  NULL,
    [Gift Certificate]             DECIMAL (18, 3)  NULL,
    [Deposit Redemption Paid]      DECIMAL (18, 3)  NULL,
    [Total PAX]                    DECIMAL (18, 3)  NULL,
    [Lunch Sales]                  DECIMAL (18, 3)  NULL,
    [Lunch Check Average]          DECIMAL (18, 3)  NULL,
    [Lunch PAX]                    DECIMAL (18, 3)  NULL,
    [Tips]                         DECIMAL (18, 3)  NULL,
    [Complaint]                    DECIMAL (18, 3)  NULL,
    [Price]                        DECIMAL (18, 3)  NULL,
    [Staff ID]                     NVARCHAR (50)    NULL,
    [Outlet Code]                  NVARCHAR (50)    NULL,
    [POSSalesGroup08]              NVARCHAR (30)    NULL,
    [POSSalesGroup09]              NVARCHAR (30)    NULL,
    [POSSalesGroup10]              NVARCHAR (30)    NULL,
    [POSSalesGroup11]              NVARCHAR (30)    NULL,
    [POSSalesGroup12]              NVARCHAR (50)    NULL,
    [POSSalesGroup13]              NVARCHAR (50)    NULL,
    [POSSalesGroup14]              NVARCHAR (30)    NULL,
    [POSSalesGroup15]              NVARCHAR (30)    NULL,
    [POSSalesGroup16]              NVARCHAR (30)    NULL,
    [POSSalesGroup17]              NVARCHAR (30)    NULL,
    [POSSalesGroup18]              NVARCHAR (30)    NULL,
    [POSSalesGroup19]              NVARCHAR (30)    NULL,
    [POSSalesGroup20]              NVARCHAR (30)    NULL,
    [POSSalesGroup21]              NVARCHAR (30)    NULL,
    [POSSalesGroup22]              NVARCHAR (30)    NULL,
    [Tax]                          DECIMAL (18, 4)  NULL,
    [UnitTax]                      DECIMAL (18, 4)  NULL,
    [UnitCost]                     DECIMAL (18, 4)  NULL,
    [UpdatedAt]                    DATETIME         NULL,
    [Promotion Amount]             DECIMAL (18, 4)  NULL,
    [Promotion Name]               NVARCHAR (30)    NULL,
    [Promotion Id]                 NVARCHAR (50)    NULL,
    [Version]                      BIGINT           NULL
);
"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("added table POSSalesModifiedRecords " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "CREATE TABLE [dbo].[PurchaseOrderModifiedLines] (
    [ParentCompany]           NVARCHAR (50)    NULL,
    [CompanyName]             NVARCHAR (50)    NULL,
    [IndexNumber]             INT              NULL,
    [SupplierName]            NVARCHAR (70)    NULL,
    [Date Record]             DATE             NULL,
    [Reference Number]        NVARCHAR (50)    NULL,
    [UniqueIdentity]          UNIQUEIDENTIFIER NULL,
    [PO Number]               NVARCHAR (50)    NULL,
    [ItemCode]                NCHAR (60)       NULL,
    [Brand]                   NVARCHAR (50)    NULL,
    [ItemName]                NVARCHAR (50)    NULL,
    [PO Date]                 DATETIME         NULL,
    [Related Invoices]        NVARCHAR (50)    NULL,
    [Invoice Date]            DATE             NULL,
    [Status]                  NVARCHAR (50)    NULL,
    [Invoice Status]          NVARCHAR (20)    NULL,
    [Comments]                NTEXT            NULL,
    [Vendor Name]             NVARCHAR (70)    NULL,
    [Vendor Code]             NCHAR (70)       NULL,
    [Quantity]                DECIMAL (18, 5)  NULL,
    [Unit Of Measure]         NCHAR (15)       NULL,
    [Cost Per UOM]            DECIMAL (18, 3)  NULL,
    [Total Line Cost]         DECIMAL (18, 3)  NULL,
    [Description]             NVARCHAR (255)   NULL,
    [Description Long]        NTEXT            NULL,
    [Required Date]           DATETIME         NULL,
    [LastUpdated]             DATETIME         NULL,
    [Unique Identity]         UNIQUEIDENTIFIER NULL,
    [ExternalSystemID]        NCHAR (20)       NULL,
    [ExternalSystemQualifier] NCHAR (10)       NULL,
    [Currency]                NCHAR (20)       NULL,
    [Amount]                  DECIMAL (18, 3)  NULL,
    [Exchange Rate]           DECIMAL (18, 8)  NULL,
    [Amount Tax]              DECIMAL (18, 3)  NULL,
    [HeaderRecord]            BIT              NULL,
    [Line Number]             INT              NULL,
    [Outlet Name]             NVARCHAR (50)    NULL,
    [Outlet Id]               UNIQUEIDENTIFIER NULL,
    [Source Outlet Id]        UNIQUEIDENTIFIER NULL,
    [Date Time]               DATETIME         NULL,
    [PurchaseCountryCode]     NVARCHAR (20)    NULL,
    [PurchaseCountry]         NVARCHAR (20)    NULL,
    [PurchaseCity]            NVARCHAR (20)    NULL,
    [PurchaseAddress]         NVARCHAR (200)   NULL,
    [PurchaseStateCounty]     NVARCHAR (40)    NULL,
    [Version]                 BIGINT           NULL,
    [Type]                    NVARCHAR (50)    NULL,
    [Received At]             DATETIME         NULL,
    [POGroup01]               DECIMAL (18, 4)  NULL,
    [POGroup02]               DECIMAL (18, 4)  NULL,
    [POGroup03]               DECIMAL (18, 4)  NULL,
    [POGroup04]               DECIMAL (18, 4)  NULL,
    [PO Name]                 NVARCHAR (255)   NULL,
    [Deleted At]              DATETIME         NULL,
    [Updated At]              DATETIME         NULL
);
"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("added table PurchaseOrderModifiedLines " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table CustomerContacts alter Column [CompanyName] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()
        myCommand = "Alter Table CustomerContacts alter Column [Customer Name] Nvarchar(765)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table ItemCategories alter Column [ItemCategoryName] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table CustomerContacts alter Column [Customer Code] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [First Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [Middle Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [Surname] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [Email Addresss] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [AddressLine01] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [AddressLine02] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [AddressLine03] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [AddressLine04] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()
        myCommand = "Alter Table CustomerContacts alter Column [AddressLine05] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table CustomerContacts alter Column [Mobile Number] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [Phone] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [Fax] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [Twitter] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table CustomerContacts alter Column [Website] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table CustomerContacts alter Column [Postcode] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [Physical Suburb] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [Physical City] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table CustomerContacts alter Column [Physical Postcode] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table CustomerContacts alter Column [Physical State] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table CustomerContacts alter Column [Postal Suburb] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [Postal City] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerContacts alter Column [Postal State] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table CustomerGroup alter Column [CustomerGroupName] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table CustomerGroup alter Column [Group Id] Nvarchar(300)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table ItemDetails alter Column [Brand] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table ItemDetails alter Column [ItemName] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table ItemDetails alter Column [Description] Ntext"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table ItemDetails alter Column [Group04] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table ItemDetails alter Column [Group05] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table ItemDetails alter Column [Supplier] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table ItemDetails alter Column [Supplier Code] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table ItemVariantOptions alter Column [ItemVariantName] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table ItemVariantOptions alter Column [ItemVariantValue] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [Outlet Details] alter Column [Outlet Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Outlet Details] alter Column [Suburb] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Outlet Details] alter Column [City] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Outlet Details] alter Column [Postcode] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [Outlet Details] alter Column [State] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Outlet Details] alter Column [Low Stock Warning] Bit"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [POSSales] alter Column [Outlet Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "Alter Table [POSSales] alter Column [Reference Number] Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [POSSales] alter Column [Description] Ntext"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [POSSales] alter Column [PaymentType01] Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [POSSales] alter Column [POSSalesGroup12] Nvarchar(50)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [POSSales] alter Column [Tax] Decimal(18,4)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [POSSales] alter Column [UnitTax] Decimal(18,4)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [POSSales] alter Column [UnitCost] Decimal(18,4)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [PurchaseOrderLines] alter Column [PO Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Registers] alter Column [Register Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [Taxes] alter Column [Tax Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [Taxes] alter Column [Display Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Taxes] alter Column [Rate Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "Alter Table [VendorHeaders] alter Column [Vendor Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "ALTER Trigger [dbo].[TRG_InsertCheckRegisters] ON [dbo].[Registers]
AFTER INSERT AS
DECLARE @unique_id uniqueidentifier, @latest_version bigint, @outlet_id uniqueidentifier, @sum_state bit;
DECLARE @states TABLE(is_open bit, registerid uniqueidentifier, outletid uniqueidentifier, deleteAt nvarchar(50));
DECLARE @states_rows int, @row_count int;
SET @unique_id = (select [Unique Identity] from inserted)
SET @latest_version = (select [Version] from inserted)
SET @outlet_id = (select [Outlet Id] from inserted); 

BEGIN
DELETE FROM Registers WHERE Registers.[Unique Identity] = @unique_id and Registers.[Version] < @latest_version;
INSERT INTO @states (is_open, registerid, outletid, deleteAt) 
SELECT [Is Open], [Unique Identity], [Outlet Id], [DeletedAt] from dbo.Registers where [Outlet Id]=@outlet_id and LEN(DeletedAt)=0;
SET @states_rows = (SELECT COUNT(*) FROM @states);
SET @row_count = 1;
SET @sum_state = 0; 
WHILE @row_count <= @states_rows
       BEGIN
           SET @sum_state = @sum_state | (select is_open from (select *, ROW_NUMBER() OVER (Order by registerid) As row_num from @states)A where A.row_num = @row_count);
              Print @sum_state;
              SET @row_count = @row_count+1;
       END;


IF @sum_state = 0
       BEGIN 
              INSERT INTO dbo.InventoryHistory ([UniqueIdentity], [ItemCode], [InventoryGroup01], [Quantity On Hand], [ReorderPoint]
              ,[InventoryGroup03], [Version], [TimeStamp], [TimePeriod])
              SELECT [UniqueIdentity], [ItemCode], [InventoryGroup01], [Quantity On Hand], 
              [ReorderPoint], [InventoryGroup03], [Version], GETUTCDATE(), 'End Of Day' FROM dbo.Inventory WHERE Inventory.InventoryGroup01 = @outlet_id
       END;
END;
 "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered Registers modify trigger " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()




        myCommand = "Create Trigger TRG_InsertCheckItemDetails ON dbo.ItemDetails
AFTER INSERT AS
DECLARE @unique_id uniqueidentifier, @latest_version bigint;
SET @unique_id = (select [Unique Identity] from inserted)
SET @latest_version = (select [Version] from inserted)
BEGIN
DELETE FROM ItemDetails WHERE ItemDetails.[Unique Identity] = @unique_id and ItemDetails.[Version] < @latest_version
END;
 "


        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered TRG_InsertCheckItemDetails create trigger " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "IF OBJECT_ID('TRG_InsertCheckPOSSales') IS NOT NULL
DROP TRIGGER TRG_InsertCheckPOSSales
"





        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered TRG_InsertCheckPOSSales modify trigger " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "  CREATE Trigger [dbo].[TRG_InsertCheckPOSSales] ON [dbo].[POSSales]
AFTER INSERT AS
DECLARE @invoice_no nchar(30), @latest_version bigint;
SET @invoice_no = (select [Reference Number] from inserted)
SET @latest_version = (select [Version] from inserted)
BEGIN
INSERT INTO [POSSalesModifiedRecords] ([Unique Identity], [Outlet Code], [Outlet Name], [POSSalesGroup01],
  [Staff ID], [CustomerCode], [Reference Number], [POSSalesGroup02], [Description], [POSSalesGroup03],
  [DescriptionLong], [Total Gross Sales], [Total Net Sales], [Tax], [Group01], [Group02], [UpdatedAt],
  [Date Record], [Group03], [Line Number], [ItemCode], [POSSalesGroup04], [Discount Total], [Discount],
  [Line Total], [Price], [COGS], [Quantity Sold], [POSSalesGroup05], [Remarks], [POSSalesGroup06], [Group04],
  [Group05], [UnitCost], [Group06], [Number of Loyalty Pax], [Group07], [UnitTax], [POSSalesGroup07], 
  [POSSalesGroup08], [Revenue Generated Loyalty], [POSSalesGroup09], [POSSalesGroup10], [Return], [POSSalesGroup13],
  [POSSalesGroup14], [PaymentType01], [Payment Total], [POSSalesGroup15], [POSSalesGroup16], [Version], 
  [POSSalesGroup12],[Promotion Amount], [Promotion Name], [Promotion Id])
SELECT [Unique Identity], [Outlet Code], [Outlet Name], [POSSalesGroup01],
  [Staff ID], [CustomerCode], [Reference Number], [POSSalesGroup02], [Description], [POSSalesGroup03],
  [DescriptionLong], [Total Gross Sales], [Total Net Sales], [Tax], [Group01], [Group02], [UpdatedAt],
  [Date Record], [Group03], [Line Number], [ItemCode], [POSSalesGroup04], [Discount Total], [Discount],
  [Line Total], [Price], [COGS], [Quantity Sold], [POSSalesGroup05], [Remarks], [POSSalesGroup06], [Group04],
  [Group05], [UnitCost], [Group06], [Number of Loyalty Pax], [Group07], [UnitTax], [POSSalesGroup07], 
  [POSSalesGroup08], [Revenue Generated Loyalty], [POSSalesGroup09], [POSSalesGroup10], [Return], [POSSalesGroup13],
  [POSSalesGroup14], [PaymentType01], [Payment Total], [POSSalesGroup15], [POSSalesGroup16], [Version], 
  [POSSalesGroup12],[Promotion Amount], [Promotion Name], [Promotion Id] FROM POSSales WHERE POSSales.[Reference Number] = @invoice_no and POSSales.[Version] < @latest_version;

DELETE FROM POSSales WHERE POSSales.[Reference Number] = @invoice_no and POSSales.[Version] < @latest_version;
END;
"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered TRG_InsertCheckPOSSales modify trigger " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()





        myCommand = "IF OBJECT_ID('TRG_InsertCheckConsignment') IS NOT NULL
DROP TRIGGER TRG_InsertCheckConsignment"





        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered TRG_InsertCheckPOSSales modify trigger " & CustomerNameTemp)

            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "     CREATE Trigger [dbo].[TRG_InsertCheckConsignment] ON [dbo].[PurchaseOrderLines]
AFTER INSERT AS
DECLARE @unique_id uniqueidentifier, @latest_version bigint;
SET @unique_id = (select [UniqueIdentity] from inserted)
SET @latest_version = (select [Version] from inserted)
BEGIN
INSERT INTO [PurchaseOrderModifiedLines] ([UniqueIdentity], [PO Number], [Outlet Id], [PO Name],
[Required Date], [Type], [Status], [Vendor Code], [Source Outlet Id], [PO Date], [Received At], 
[Related Invoices], [Reference Number], [POGroup01], [POGroup02], [POGroup03], [POGroup04],
[Date Time], [Updated At], [Deleted At], [Version])
SELECT [UniqueIdentity], [PO Number], [Outlet Id], [PO Name],
[Required Date], [Type], [Status], [Vendor Code], [Source Outlet Id], [PO Date], [Received At], 
[Related Invoices], [Reference Number], [POGroup01], [POGroup02], [POGroup03], [POGroup04],
[Date Time], [Updated At], [Deleted At], [Version] FROM [PurchaseOrderLines] WHERE [PurchaseOrderLines].[UniqueIdentity] = @unique_id and [PurchaseOrderLines].[Version] < @latest_version;
DELETE FROM [PurchaseOrderLines] WHERE [PurchaseOrderLines].[UniqueIdentity] = @unique_id and [PurchaseOrderLines].[Version] < @latest_version;
END;
"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered TRG_InsertCheckConsignment modify trigger " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "Alter Table [CustomerContacts] alter Column [Customer Code] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [CustomerContacts] alter Column [Customer Code`] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [CustomerHeaders] alter Column [CompanyName] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [CustomerHeaders] alter Column [Customer Name] Nvarchar(765)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [CustomerHeaders] alter Column [Customer Code] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [CustomerHeaders] alter Column [First Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [CustomerHeaders] alter Column [Middle Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "Alter Table [CustomerHeaders] alter Column [Surname] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [CustomerHeaders] alter Column [AddressLine01] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [CustomerHeaders] alter Column [AddressLine02] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [CustomerHeaders] alter Column [AddressLine03] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [CustomerHeaders] alter Column [AddressLine04] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [CustomerHeaders] alter Column [Phone] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [CustomerHeaders] alter Column [Mobile Number] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [CustomerHeaders] alter Column [PostCode] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Registers] alter Column [Invoice Sequence] Bigint"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "Alter Table [Predictions] add [predictions_name] nvarchar(50), prediction_created_on datetime, [Outlet Name] nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "CREATE VIEW [dbo].[PredictionsView]
                    AS
                    SELECT        dbo.Predictions.[Outlet Name], dbo.Predictions.model_name, dbo.Predictions.predicted_date, dbo.Predictions.predicted_value_nvarchar, dbo.Predictions.predicted_value_decimal, dbo.Predictions.predicted_value_numeric, 
                         dbo.Predictions.predictions_name, dbo.Predictions.prediction_created_on, dbo.[Outlet Details].CompanyName, dbo.[Outlet Details].[Date Opened], dbo.[Outlet Details].[Date Closed], dbo.[Outlet Details].Tables, 
                         dbo.[Outlet Details].Seats, dbo.[Outlet Details].[Square Meter], dbo.[Outlet Details].[Square Foot], dbo.[Outlet Details].Description, dbo.[Outlet Details].[Description Long], dbo.[Outlet Details].Longitude, 
                         dbo.[Outlet Details].LastUpdated, dbo.[Outlet Details].Lattitude, dbo.[Outlet Details].OutletGroup01, dbo.[Outlet Details].OutletGroup02, dbo.[Outlet Details].OutletGroup03, dbo.[Outlet Details].OutletGroup04, 
                         dbo.[Outlet Details].OutletGroup05, dbo.[Outlet Details].OutletCountry, dbo.[Outlet Details].Lattitude01, dbo.[Outlet Details].Lattitude02, dbo.[Outlet Details].Lattitude03, dbo.[Outlet Details].Longitude01, 
                         dbo.[Outlet Details].Longitude02, dbo.[Outlet Details].Longitude03, dbo.[Outlet Details].[Outlet Code], dbo.[Outlet Details].[Prediction Model Name], dbo.[Outlet Details].PhysicalAddress01, dbo.[Outlet Details].PhysicalAddress02, 
                         dbo.[Outlet Details].Suburb, dbo.[Outlet Details].City, dbo.[Outlet Details].PostCode, dbo.[Outlet Details].State, dbo.[Outlet Details].Version, dbo.[Outlet Details].[Order number prefix], dbo.[Outlet Details].[Order number], 
                         dbo.[Outlet Details].[Supplier return prefix], dbo.[Outlet Details].[Supplier return number], dbo.[Outlet Details].[Low Stock Warning]
                    FROM            dbo.[Outlet Details] INNER JOIN
                         dbo.Predictions ON dbo.[Outlet Details].[Outlet Name] = dbo.Predictions.[Outlet Name]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()




        myCommand = "CREATE TABLE [dbo].[AssociationRules_Models](
	[models_id] [uniqueidentifier] NOT NULL,
	[model_name] [nvarchar](50) NOT NULL,
	[min_support] [numeric](7, 6) NULL,
	[min_confidence] [numeric](7, 6) NULL,
	[Outlet Name] [nvarchar](255) NULL,
	[ordered_by] [nvarchar](255) NULL,
	[model_created_on] [datetime] NULL,
	[period] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[models_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] "

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Created table [AssociationRules_Models] : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
            Console.WriteLine(Err.Description & "  " & myCommand & ", " & CustomerNameTemp)


        End Try
        cmd.Connection.Close()




        myCommand = "CREATE TABLE [dbo].[AssociationRules](
	[lhs] [nvarchar](max) NULL,
	[rhs] [nvarchar](max) NULL,
	[support] [numeric](6, 5) NULL,
	[confidence] [numeric](6, 5) NULL,
	[lift] [numeric](6, 3) NULL,
	[count] [int] NULL,
	[lhs_description] [nvarchar](max) NULL,
	[rhs_description] [nvarchar](max) NULL,
	[jaccard] [numeric](6, 5) NULL,
	[rules_created_on] [datetime] NULL,
	[rules_id] [uniqueidentifier] NOT NULL,
	[Outlet Name] [nvarchar](255) NULL,
	[models_id] [uniqueidentifier] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("VIEW [dbo].[AssociationsView] : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "ALTER TABLE [dbo].[AssociationRules]  WITH CHECK ADD  CONSTRAINT [FK_models_id] FOREIGN KEY([models_id])
REFERENCES [dbo].[AssociationRules_Models] ([models_id])"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "ALTER TABLE [dbo].[AssociationRules] CHECK CONSTRAINT [FK_models_id]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "CREATE VIEW [dbo].[AssociationsView]
                        AS
                        SELECT        dbo.AssociationRules.*, dbo.[Outlet Details].[Date Opened], dbo.[Outlet Details].[Date Closed], dbo.[Outlet Details].Seats, dbo.[Outlet Details].Tables, dbo.[Outlet Details].[Square Meter], dbo.[Outlet Details].[Square Foot], 
                         dbo.[Outlet Details].Description, dbo.[Outlet Details].[Description Long], dbo.[Outlet Details].Longitude, dbo.[Outlet Details].Lattitude, dbo.[Outlet Details].LastUpdated, dbo.[Outlet Details].OutletGroup01, 
                         dbo.[Outlet Details].OutletGroup02, dbo.[Outlet Details].OutletGroup03, dbo.[Outlet Details].OutletGroup04, dbo.[Outlet Details].OutletGroup05, dbo.[Outlet Details].OutletCountry, dbo.[Outlet Details].Lattitude01, 
                         dbo.[Outlet Details].Lattitude02, dbo.[Outlet Details].Lattitude03, dbo.[Outlet Details].Longitude01, dbo.[Outlet Details].Longitude02, dbo.[Outlet Details].Longitude03, dbo.[Outlet Details].[Outlet Code], 
                         dbo.[Outlet Details].[Prediction Model Name], dbo.[Outlet Details].PhysicalAddress01, dbo.[Outlet Details].PhysicalAddress02, dbo.[Outlet Details].Suburb, dbo.[Outlet Details].City, dbo.[Outlet Details].PostCode, 
                         dbo.[Outlet Details].State, dbo.[Outlet Details].Version, dbo.[Outlet Details].[Order number prefix], dbo.[Outlet Details].[Order number], dbo.[Outlet Details].[Supplier return prefix], dbo.[Outlet Details].[Supplier return number], 
                         dbo.[Outlet Details].[Low Stock Warning]
                        FROM            dbo.AssociationRules INNER JOIN
                         dbo.[Outlet Details] ON dbo.AssociationRules.[Outlet Name] = dbo.[Outlet Details].[Outlet Name]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("VIEW [dbo].[AssociationsView] : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "CREATE VIEW [dbo].[InventoryView]
AS
SELECT        dbo.Inventory.CompanyName, dbo.Inventory.ParentCompany, dbo.Inventory.ItemName, dbo.Inventory.ItemCode, dbo.Inventory.[Quantity On Hand], dbo.Inventory.[Outlet Name], dbo.Inventory.Brand, 
                         dbo.Inventory.[Warehouse Name], dbo.Inventory.LastUpdated, dbo.Inventory.[Location Name], dbo.Inventory.LocationCode, dbo.Inventory.[Date Entered], dbo.Inventory.[Unit Of Measure], dbo.Inventory.CustomerName, 
                         dbo.ItemDetails.ExternalSystemID, dbo.ItemDetails.ExternalSystemQualifier, dbo.ItemDetails.Description, dbo.ItemDetails.DescriptionLong, dbo.ItemDetails.Class, dbo.ItemDetails.Type, dbo.ItemDetails.[Average Cost], 
                         dbo.ItemDetails.Cost, dbo.ItemDetails.[Item Group], dbo.ItemDetails.TagPrice, dbo.ItemDetails.[Cost Price], dbo.ItemDetails.[Retail Price], dbo.ItemDetails.[Trade Price], dbo.ItemDetails.[Standard Cost], 
                         dbo.ItemDetails.LastReceiptDate, dbo.ItemDetails.ItemType, dbo.Inventory.LastModified, dbo.ItemDetails.Group01, dbo.ItemDetails.ItemDetailsGroup01, dbo.ItemDetails.Group02, dbo.ItemDetails.ItemDetailsGroup02, 
                         dbo.ItemDetails.Group03, dbo.ItemDetails.ItemDetailsGroup03, dbo.ItemDetails.Group04, dbo.ItemDetails.ItemDetailsGroup04, dbo.ItemDetails.Group05, dbo.ItemDetails.ItemDetailsGroup05, dbo.ItemDetails.Group06, 
                         dbo.ItemDetails.ItemDetailsGroup06, dbo.ItemDetails.Group07, dbo.ItemDetails.ItemDetailsGroup07, dbo.ItemDetails.Group08, dbo.ItemDetails.ItemDetailsGroup08, dbo.ItemDetails.Group09, 
                         dbo.ItemDetails.ItemDetailsGroup09, dbo.ItemDetails.Group10, dbo.ItemDetails.ItemDetailsGroup10, dbo.ItemDetails.Group11, dbo.ItemDetails.ItemDetailsGroup11, dbo.Inventory.Group01 AS Expr1, 
                         dbo.Inventory.InventoryGroup01, dbo.Inventory.Group02 AS Expr2, dbo.Inventory.InventoryGroup02, dbo.Inventory.Group03 AS Expr3, dbo.Inventory.InventoryGroup03, dbo.Inventory.Group04 AS Expr4, 
                         dbo.Inventory.InventoryGroup04, dbo.Inventory.Group05 AS Expr5, dbo.Inventory.InventoryGroup05, dbo.Inventory.Group06 AS Expr6, dbo.Inventory.InventoryGroup06, dbo.Inventory.Group07 AS Expr7, 
                         dbo.Inventory.InventoryGroup07, dbo.Inventory.Group08 AS Expr8, dbo.Inventory.InventoryGroup08, dbo.Inventory.Group09 AS Expr9, dbo.Inventory.InventoryGroup09, dbo.Inventory.Group10 AS Expr10, 
                         dbo.Inventory.InventoryGroup10, dbo.Inventory.Group11 AS Expr11, dbo.Inventory.InventoryGroup11
FROM            dbo.Inventory LEFT OUTER JOIN
                         dbo.ItemDetails ON dbo.Inventory.ItemCode = dbo.ItemDetails.ItemCode AND dbo.Inventory.Brand = dbo.ItemDetails.Brand"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("VIEW [dbo].[InventoryView] : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "CREATE VIEW [dbo].[JournalLinesView]
AS
SELECT        dbo.ChartOfAccounts.[Main Type], dbo.JournalLines.ParentCompany, dbo.JournalLines.CompanyName, dbo.JournalLines.[Voucher Date], dbo.JournalLines.[Voucher Number], dbo.JournalLines.CustVendorCode, 
                         dbo.JournalLines.AccountNumber, dbo.JournalLines.Description, dbo.JournalLines.Currency, dbo.JournalLines.[Exchange Rate], dbo.JournalLines.Column08, dbo.JournalLines.Column09, dbo.JournalLines.Column10, 
                         dbo.JournalLines.Amount, dbo.JournalLines.MonthCode01, dbo.JournalLines.[Account Name], dbo.JournalLines.Group01, dbo.JournalLines.Group02, dbo.JournalLines.Group03, dbo.JournalLines.Group04, 
                         dbo.JournalLines.Group05, dbo.JournalLines.Debitbase, dbo.JournalLines.CreditBase, dbo.JournalLines.IndexNumber, dbo.JournalLines.YearCode, dbo.JournalLines.MonthCode, dbo.JournalLines.DayOfWeekNumber, 
                         dbo.JournalLines.DayOfYear, dbo.JournalLines.MonthCodeShort, dbo.JournalLines.DayOfWeekName, dbo.JournalLines.DayOfWeekNameShort, dbo.JournalLines.AmountCurrency, dbo.JournalLines.DebitPosting, 
                         dbo.JournalLines.CreditPosting, dbo.JournalLines.Sales, dbo.JournalLines.UniqueID, dbo.JournalLines.Revenue, dbo.JournalLines.COGS, dbo.JournalLines.Expenses, dbo.JournalLines.DateTimeLoaded, 
                         dbo.JournalLines.Prototypetest, dbo.JournalLines.testLoad1, dbo.JournalLines.AmountBase, dbo.JournalLines.DayOfMonth, dbo.JournalLines.LoadName, dbo.ChartOfAccounts.[Sub Type], 
                         dbo.ChartOfAccounts.[Analytics Measure 04], dbo.ChartOfAccounts.[Analytics Measure 03], dbo.ChartOfAccounts.[Analytics Measure 02], dbo.ChartOfAccounts.[Analytics Measure 01], dbo.ChartOfAccounts.Location, 
                         dbo.ChartOfAccounts.SortOrder04, dbo.ChartOfAccounts.SortType04, dbo.ChartOfAccounts.SortOrder03, dbo.ChartOfAccounts.SortType03, dbo.ChartOfAccounts.SortOrder02, dbo.ChartOfAccounts.Segment, 
                         dbo.ChartOfAccounts.Division, dbo.ChartOfAccounts.Department, dbo.ChartOfAccounts.TaxType, dbo.ChartOfAccounts.SortType01, dbo.ChartOfAccounts.SortOrder01, dbo.ChartOfAccounts.SortType02, 
                         dbo.ChartOfAccounts.BizCoachDateCreated, dbo.JournalLines.COS, dbo.JournalLines.[Outlet Name], dbo.JournalLines.Equity, dbo.JournalLines.WeekEnd, dbo.JournalLines.WeekDay, dbo.JournalLines.WorkDay, 
                         dbo.JournalLines.[Number Work Days In Month], dbo.JournalLines.[Number NonWork Days In Month], dbo.JournalLines.[Number Days In Month], dbo.JournalLines.[Day Of Month], dbo.JournalLines.WeekNumber, 
                         dbo.JournalLines.Cash, dbo.JournalLines.[Vendor Code], dbo.JournalLines.[Customer Code], dbo.JournalLines.[Current Assets], dbo.JournalLines.[Long Term Assets], dbo.JournalLines.[Retained Earnings], 
                         dbo.JournalLines.[Current Liabilities], dbo.JournalLines.[Long Term Liabilities], dbo.JournalLines.LastUpdated, dbo.JournalLines.HourCode, dbo.JournalLines.MinuteCode, dbo.JournalLines.SecondCode, 
                         dbo.JournalLines.AMPM, dbo.[Outlet Details].[Date Opened], dbo.[Outlet Details].[Date Closed], dbo.[Outlet Details].Tables, dbo.[Outlet Details].Seats, dbo.[Outlet Details].[Square Foot], dbo.[Outlet Details].Description AS Expr1, 
                         dbo.[Outlet Details].[Description Long], dbo.[Outlet Details].Longitude, dbo.[Outlet Details].Lattitude, dbo.[Outlet Details].[Square Meter], dbo.[Outlet Details].OutletGroup01, dbo.[Outlet Details].OutletGroup02, 
                         dbo.[Outlet Details].OutletGroup03, dbo.[Outlet Details].OutletGroup04, dbo.[Outlet Details].OutletGroup05, dbo.JournalLines.MonthNumber, dbo.JournalLines.MonthNumber2Digits, dbo.JournalLines.JournalLinesGroup01, 
                         dbo.JournalLines.JournalLinesGroup02, dbo.JournalLines.JournalLinesGroup03, dbo.JournalLines.JournalLinesGroup04, dbo.JournalLines.JournalLinesGroup05, dbo.JournalLines.LastDateModified, 
                         dbo.ChartOfAccounts.AccountName, dbo.JournalLines.LastUpdate, dbo.[Outlet Details].Lattitude01, dbo.[Outlet Details].Lattitude02, dbo.[Outlet Details].Lattitude03, dbo.[Outlet Details].Longitude01, 
                         dbo.[Outlet Details].Longitude02, dbo.[Outlet Details].Longitude03, dbo.[Outlet Details].[Outlet Code], dbo.[Outlet Details].OutletCountry, dbo.[Outlet Details].LastUpdated AS Expr2
FROM            dbo.JournalLines INNER JOIN
                         dbo.ChartOfAccounts ON dbo.JournalLines.CompanyName = dbo.ChartOfAccounts.CompanyName AND dbo.JournalLines.AccountNumber = dbo.ChartOfAccounts.AccountNumber LEFT OUTER JOIN
                         dbo.[Outlet Details] ON dbo.JournalLines.[Outlet Name] = dbo.[Outlet Details].[Outlet Name]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("VIEW [dbo].[JournalLinesView] : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "CREATE VIEW [dbo].[PurchaseOrderView]
AS
SELECT        dbo.PurchaseOrderLines.[PO Number], dbo.PurchaseOrderLines.[Line Number], dbo.PurchaseOrderLines.[Date Record], dbo.PurchaseOrderHeaders.[Reference Number], dbo.PurchaseOrderHeaders.Amount, 
                         dbo.PurchaseOrderHeaders.[Exchange Rate], dbo.PurchaseOrderHeaders.[Amount Tax], dbo.PurchaseOrderHeaders.PurchaseCountryCode, dbo.PurchaseOrderHeaders.PurchaseCountry, 
                         dbo.PurchaseOrderHeaders.PurchaseCity, dbo.PurchaseOrderHeaders.PurchaseAddress, dbo.PurchaseOrderHeaders.PurchaseStateCounty, dbo.PurchaseOrderLines.ItemName, dbo.PurchaseOrderLines.Status, 
                         dbo.PurchaseOrderLines.ItemCode, dbo.PurchaseOrderLines.Quantity, dbo.PurchaseOrderLines.[Unit Of Measure], dbo.PurchaseOrderLines.[Cost Per UOM], dbo.PurchaseOrderLines.[Total Line Cost], 
                         dbo.PurchaseOrderLines.Currency AS [Line Currency], dbo.PurchaseOrderLines.Amount AS [Line Amount], dbo.PurchaseOrderLines.[Exchange Rate] AS [Line Exchange Rate], dbo.PurchaseOrderLines.[Amount Tax] AS [Line Tax],
                          dbo.PurchaseOrderLines.[Outlet Name] AS [Line Outlet Name], dbo.PurchaseOrderLines.[Required Date], dbo.ItemDetails.Brand, dbo.ItemDetails.Description, dbo.ItemDetails.DescriptionLong, dbo.ItemDetails.[Standard Cost], 
                         dbo.ItemDetails.Class, dbo.ItemDetails.Type, dbo.ItemDetails.Cost, dbo.ItemDetails.LowestPrice, dbo.ItemDetails.WeightedAverageCost, dbo.ItemDetails.LastReceiptDate, dbo.ItemDetails.LicenseCost, 
                         dbo.ItemDetails.[Retail Price], dbo.ItemDetails.[Trade Price], dbo.ItemDetails.[Cost Price], dbo.ItemDetails.[Average Cost], dbo.ItemDetails.ItemType, dbo.ItemDetails.[Item Group], dbo.PurchaseOrderHeaders.Currency, 
                         dbo.ItemDetails.TagPrice, dbo.PurchaseOrderLines.[Vendor Name], dbo.PurchaseOrderLines.[Vendor Code], dbo.ItemDetails.Group01, dbo.ItemDetails.ItemDetailsGroup01, dbo.ItemDetails.Group02, 
                         dbo.ItemDetails.ItemDetailsGroup02, dbo.ItemDetails.Group03, dbo.ItemDetails.ItemDetailsGroup03, dbo.ItemDetails.Group04, dbo.ItemDetails.ItemDetailsGroup04, dbo.ItemDetails.Group05, 
                         dbo.ItemDetails.ItemDetailsGroup05, dbo.ItemDetails.Group06, dbo.ItemDetails.ItemDetailsGroup06, dbo.ItemDetails.Group07, dbo.ItemDetails.ItemDetailsGroup07, dbo.ItemDetails.Group08, 
                         dbo.ItemDetails.ItemDetailsGroup08, dbo.ItemDetails.Group09, dbo.ItemDetails.ItemDetailsGroup09, dbo.ItemDetails.Group10, dbo.ItemDetails.ItemDetailsGroup10, dbo.ItemDetails.Group11, 
                         dbo.ItemDetails.ItemDetailsGroup11
FROM            dbo.ItemDetails RIGHT OUTER JOIN
                         dbo.PurchaseOrderLines ON dbo.ItemDetails.ItemName = dbo.PurchaseOrderLines.ItemName LEFT OUTER JOIN
                         dbo.PurchaseOrderHeaders ON dbo.PurchaseOrderLines.[PO Number] = dbo.PurchaseOrderHeaders.[PO Number] AND dbo.PurchaseOrderLines.[Line Number] = dbo.PurchaseOrderHeaders.[Line Number]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("VIEW [dbo].[PurchaseOrderView] : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "CREATE VIEW [dbo].[SalesOrderView]
AS
SELECT        dbo.SalesOrderLines.[Date Record], dbo.SalesOrderLines.[SO Number], dbo.SalesOrderLines.[Line Number], dbo.SalesOrderLines.ItemName, dbo.SalesOrderLines.[Related Invoices], dbo.SalesOrderLines.[Shipped Date], 
                         dbo.SalesOrderLines.Status, dbo.SalesOrderLines.Comments, dbo.SalesOrderLines.Quantity, dbo.SalesOrderLines.[Unit Of Measure], dbo.SalesOrderLines.[Cost Per UOM], dbo.SalesOrderLines.[Total Line Cost], 
                         dbo.SalesOrderLines.Description, dbo.SalesOrderLines.[Description Long], dbo.SalesOrderLines.[Required Date], dbo.SalesOrderHeaders.CompanyName, dbo.SalesOrderHeaders.ParentCompany, 
                         dbo.SalesOrderHeaders.[Reference Number], dbo.SalesOrderLines.[Sales Rep], dbo.SalesOrderLines.COGS, dbo.SalesOrderLines.Profit, dbo.SalesOrderLines.Sale, dbo.SalesOrderLines.[Outlet Name], 
                         dbo.SalesOrderLines.SalesLineGroup01, dbo.SalesOrderLines.SalesLineGroup02, dbo.SalesOrderLines.SalesLineGroup03, dbo.SalesOrderLines.SalesLineGroup04, dbo.SalesOrderLines.SalesLineGroup05, 
                         dbo.SalesOrderLines.SalesLineGroup06, dbo.SalesOrderLines.SalesLineGroup07, dbo.SalesOrderLines.AccountNumber, dbo.SalesOrderLines.[Amount Tax], dbo.SalesOrderLines.ExternalSystemQualifier, 
                         dbo.SalesOrderLines.ExternalSystemID, dbo.SalesOrderLines.Currency, dbo.SalesOrderLines.Amount, dbo.SalesOrderLines.[Exchange Rate], dbo.SalesOrderLines.[Invoice Date], dbo.SalesOrderLines.AccountName, 
                         dbo.SalesOrderHeaders.HeaderRecord, dbo.SalesOrderHeaders.[Date Time], dbo.[Outlet Details].[Date Opened], dbo.[Outlet Details].[Date Closed], dbo.[Outlet Details].Tables, dbo.[Outlet Details].Seats, 
                         dbo.[Outlet Details].[Square Meter], dbo.[Outlet Details].[Square Foot], dbo.[Outlet Details].Description AS OutletDescription, dbo.[Outlet Details].[Description Long] AS OutletDescriptionLong, dbo.[Outlet Details].Longitude, 
                         dbo.[Outlet Details].Lattitude, dbo.[Outlet Details].OutletGroup01, dbo.[Outlet Details].OutletGroup02, dbo.[Outlet Details].OutletGroup03, dbo.[Outlet Details].OutletGroup04, dbo.[Outlet Details].Longitude03, 
                         dbo.[Outlet Details].Longitude02, dbo.[Outlet Details].Longitude01, dbo.[Outlet Details].Lattitude03, dbo.[Outlet Details].Lattitude02, dbo.[Outlet Details].Lattitude01, dbo.[Outlet Details].OutletCountry, 
                         dbo.[Outlet Details].OutletGroup05, dbo.SalesOrderHeaders.Amount AS [Header Amount], dbo.SalesOrderHeaders.Currency AS [Header Currency], dbo.SalesOrderLines.AMPM, dbo.SalesOrderLines.HourCode, 
                         dbo.SalesOrderLines.MinuteCode, dbo.SalesOrderLines.SecondCode, dbo.SalesOrderLines.WeekNumber, dbo.SalesOrderLines.[Day Of Month], dbo.SalesOrderLines.[Number Work Days In Month], 
                         dbo.SalesOrderLines.[Number NonWork Days In Month], dbo.SalesOrderLines.[Number Days In Month], dbo.SalesOrderLines.WeekEnd, dbo.SalesOrderLines.WeekDay, dbo.SalesOrderLines.WorkDay, 
                         dbo.SalesOrderLines.MonthNumber, dbo.SalesOrderLines.MonthNumber2Digits, dbo.SalesOrderLines.YearCode, dbo.SalesOrderLines.MonthCode, dbo.SalesOrderLines.DayOfYear, dbo.SalesOrderLines.DayOfWeekNumber, 
                         dbo.SalesOrderLines.MonthCodeShort, dbo.SalesOrderLines.DayOfWeekName, dbo.SalesOrderLines.DayOfWeekNameShort, dbo.SalesOrderLines.DayOfMonth, dbo.ItemDetails.Brand, dbo.ItemDetails.ItemCode, 
                         dbo.ItemDetails.LowestPrice, dbo.ItemDetails.Cost, dbo.ItemDetails.WeightedAverageCost, dbo.ItemDetails.LastReceiptDate, dbo.ItemDetails.[Retail Price], dbo.ItemDetails.[Trade Price], dbo.ItemDetails.[Cost Price], 
                         dbo.ItemDetails.[Average Cost], dbo.ItemDetails.ItemGroup, dbo.ItemDetails.ItemType, dbo.ItemDetails.Description AS Expr1, dbo.ItemDetails.DescriptionLong, dbo.[Outlet Details].[Outlet Code], 
                         dbo.SalesOrderLines.[Customer Name], dbo.SalesOrderLines.[Customer Code], dbo.SalesOrderLines.SalesCountryCode, dbo.SalesOrderLines.SalesCountry, dbo.SalesOrderLines.SalesCity, 
                         dbo.SalesOrderLines.SalesStateCounty, dbo.SalesOrderLines.SalesAddress, dbo.ItemDetails.Group01, dbo.ItemDetails.ItemDetailsGroup01, dbo.ItemDetails.Group02, dbo.ItemDetails.ItemDetailsGroup02, 
                         dbo.ItemDetails.Group03, dbo.ItemDetails.Group04, dbo.ItemDetails.ItemDetailsGroup04, dbo.ItemDetails.Group05, dbo.ItemDetails.ItemDetailsGroup05, dbo.ItemDetails.Group06, dbo.ItemDetails.ItemDetailsGroup06, 
                         dbo.ItemDetails.Group07, dbo.ItemDetails.ItemDetailsGroup03, dbo.ItemDetails.ItemDetailsGroup07, dbo.ItemDetails.Group08, dbo.ItemDetails.ItemDetailsGroup08, dbo.ItemDetails.Group09, 
                         dbo.ItemDetails.ItemDetailsGroup09, dbo.ItemDetails.Group10, dbo.ItemDetails.ItemDetailsGroup10, dbo.ItemDetails.Group11, dbo.ItemDetails.ItemDetailsGroup11, dbo.SalesOrderLines.IndexNumber, 
                         dbo.SalesOrderLines.[Invoice Status], dbo.SalesOrderLines.[SO Date]
FROM            dbo.ItemDetails RIGHT OUTER JOIN
                         dbo.SalesOrderLines ON dbo.ItemDetails.ItemName = dbo.SalesOrderLines.ItemName LEFT OUTER JOIN
                         dbo.SalesOrderHeaders ON dbo.SalesOrderLines.[SO Number] = dbo.SalesOrderHeaders.[SO Number] AND dbo.SalesOrderLines.[Line Number] = dbo.SalesOrderHeaders.[Line Number] LEFT OUTER JOIN
                         dbo.[Outlet Details] ON dbo.SalesOrderLines.[Outlet Name] = dbo.[Outlet Details].[Outlet Name]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("VIEW [dbo].[SalesOrderView] : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        '**************  7th Feb 2018

        myCommand = "Alter Table [Models] alter Column [model_name] Nvarchar(100) Not Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Models] alter Column [residual_min] Decimal(18,10) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()
        myCommand = "Alter Table [Models] alter Column [residual_1Q] Decimal(18,10) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        cmd.Connection.Close()
        myCommand = "Alter Table [Models] alter Column [residual_median] Decimal(18,10) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Models] alter Column [residual_3Q] Decimal(18,10) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()
        myCommand = "Alter Table [Models] alter Column [residual_max] Decimal(18,10) Null "
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()
        myCommand = "Alter Table [Models] alter Column [residual_std_error] Nvarchar(50) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Predictions] alter Column [model_name] Nvarchar(100) not Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "CREATE TABLE [dbo].[AssociationRules] (
    [lhs]              NVARCHAR (MAX)   NULL,
    [rhs]              NVARCHAR (MAX)   NULL,
    [support]          NUMERIC (6, 5)   NULL,
    [confidence]       NUMERIC (6, 5)   NULL,
    [lift]             NUMERIC (6, 3)   NULL,
    [count]            INT              NULL,
    [lhs_description]  NVARCHAR (MAX)   NULL,
    [rhs_description]  NVARCHAR (MAX)   NULL,
    [jaccard]          NUMERIC (6, 5)   NULL,
    [rules_created_on] DATETIME         NULL,
    [rules_id]         UNIQUEIDENTIFIER NOT NULL,
    [Outlet Name]      NVARCHAR (255)   NULL,
    [models_id]        UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [FK_models_id] FOREIGN KEY ([models_id]) REFERENCES [dbo].[AssociationRules_Models] ([models_id])
);
"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Create table [AssociationRules] : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "CREATE TABLE [dbo].[AssociationRules_Models] (
    [models_id]        UNIQUEIDENTIFIER NOT NULL,
    [model_name]       NVARCHAR (50)    NOT NULL,
    [min_support]      NUMERIC (7, 6)   NULL,
    [min_confidence]   NUMERIC (7, 6)   NULL,
    [Outlet Name]      NVARCHAR (255)   NULL,
    [ordered_by]       NVARCHAR (255)   NULL,
    [model_created_on] DATETIME         NULL,
    [period]           INT              NULL,
    PRIMARY KEY CLUSTERED ([models_id] ASC)
);
"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Create table [AssociationRules_Models] : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "CREATE VIEW [dbo].[AssociationsView]
                        AS
                        SELECT        dbo.AssociationRules.*, dbo.[Outlet Details].[Date Opened], dbo.[Outlet Details].[Date Closed], dbo.[Outlet Details].Seats, dbo.[Outlet Details].Tables, dbo.[Outlet Details].[Square Meter], dbo.[Outlet Details].[Square Foot], 
                         dbo.[Outlet Details].Description, dbo.[Outlet Details].[Description Long], dbo.[Outlet Details].Longitude, dbo.[Outlet Details].Lattitude, dbo.[Outlet Details].LastUpdated, dbo.[Outlet Details].OutletGroup01, 
                         dbo.[Outlet Details].OutletGroup02, dbo.[Outlet Details].OutletGroup03, dbo.[Outlet Details].OutletGroup04, dbo.[Outlet Details].OutletGroup05, dbo.[Outlet Details].OutletCountry, dbo.[Outlet Details].Lattitude01, 
                         dbo.[Outlet Details].Lattitude02, dbo.[Outlet Details].Lattitude03, dbo.[Outlet Details].Longitude01, dbo.[Outlet Details].Longitude02, dbo.[Outlet Details].Longitude03, dbo.[Outlet Details].[Outlet Code], 
                         dbo.[Outlet Details].[Prediction Model Name], dbo.[Outlet Details].PhysicalAddress01, dbo.[Outlet Details].PhysicalAddress02, dbo.[Outlet Details].Suburb, dbo.[Outlet Details].City, dbo.[Outlet Details].PostCode, 
                         dbo.[Outlet Details].State, dbo.[Outlet Details].Version, dbo.[Outlet Details].[Order number prefix], dbo.[Outlet Details].[Order number], dbo.[Outlet Details].[Supplier return prefix], dbo.[Outlet Details].[Supplier return number], 
                         dbo.[Outlet Details].[Low Stock Warning]
                        FROM            dbo.AssociationRules INNER JOIN
                         dbo.[Outlet Details] ON dbo.AssociationRules.[Outlet Name] = dbo.[Outlet Details].[Outlet Name]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(" VIEW [dbo].[AssociationsView] : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "CREATE VIEW [dbo].[PredictionsView]
                    AS
                    SELECT        dbo.Predictions.[Outlet Name], dbo.Predictions.model_name, dbo.Predictions.predicted_date, dbo.Predictions.predicted_value_nvarchar, dbo.Predictions.predicted_value_decimal, dbo.Predictions.predicted_value_numeric, 
                         dbo.Predictions.predictions_name, dbo.Predictions.prediction_created_on, dbo.[Outlet Details].CompanyName, dbo.[Outlet Details].[Date Opened], dbo.[Outlet Details].[Date Closed], dbo.[Outlet Details].Tables, 
                         dbo.[Outlet Details].Seats, dbo.[Outlet Details].[Square Meter], dbo.[Outlet Details].[Square Foot], dbo.[Outlet Details].Description, dbo.[Outlet Details].[Description Long], dbo.[Outlet Details].Longitude, 
                         dbo.[Outlet Details].LastUpdated, dbo.[Outlet Details].Lattitude, dbo.[Outlet Details].OutletGroup01, dbo.[Outlet Details].OutletGroup02, dbo.[Outlet Details].OutletGroup03, dbo.[Outlet Details].OutletGroup04, 
                         dbo.[Outlet Details].OutletGroup05, dbo.[Outlet Details].OutletCountry, dbo.[Outlet Details].Lattitude01, dbo.[Outlet Details].Lattitude02, dbo.[Outlet Details].Lattitude03, dbo.[Outlet Details].Longitude01, 
                         dbo.[Outlet Details].Longitude02, dbo.[Outlet Details].Longitude03, dbo.[Outlet Details].[Outlet Code], dbo.[Outlet Details].[Prediction Model Name], dbo.[Outlet Details].PhysicalAddress01, dbo.[Outlet Details].PhysicalAddress02, 
                         dbo.[Outlet Details].Suburb, dbo.[Outlet Details].City, dbo.[Outlet Details].PostCode, dbo.[Outlet Details].State, dbo.[Outlet Details].Version, dbo.[Outlet Details].[Order number prefix], dbo.[Outlet Details].[Order number], 
                         dbo.[Outlet Details].[Supplier return prefix], dbo.[Outlet Details].[Supplier return number], dbo.[Outlet Details].[Low Stock Warning]
                    FROM            dbo.[Outlet Details] INNER JOIN
                         dbo.Predictions ON dbo.[Outlet Details].[Outlet Name] = dbo.Predictions.[Outlet Name]"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(" VIEW [dbo].[PredictionsView] : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        'single point data
        myCommand = "Alter Table Models add model_type nvarchar(50), AIC Decimal(18,10), AICc Decimal(18,10), BIC Decimal(18,10), sigma2 Decimal(18,10), " &
            "loglic Decimal(18,10), mean_error Decimal(18,10), root_mean_squared_error Decimal(18,10), mean_absolute_error Decimal(18,10), " &
            "mean_percentage_error Decimal(18,10), mean_absolute_percentage_error Decimal(18,10), mean_absolute_scaled_error Decimal(18,10), ACF1 Decimal(18,10)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered Models alter many! " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '    Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        'single point data
        myCommand = "Alter Table Predictions add predictions_name nvarchar(50), prediction_created_on DateTime, [Outlet Name] Nvarchar(255)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered Predictions alter many! " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '    Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Models] alter Column [formula] Nvarchar(50) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Models] alter Column [response_name] Nvarchar(50) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Models] alter Column [p_value] Nvarchar(50) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Models] alter Column [multiple_r_squared] Nvarchar(50) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Models] alter Column [adjusted_r_squared] Nvarchar(50) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Models] alter Column [F_statistic] Nvarchar(50) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        'single point data
        myCommand = "Alter Table Models add loglik numeric(18,10)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add("Altered Models alter many! " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '    Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [Coefficients] alter Column [indicator_name] Nvarchar(50) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Coefficients] alter Column [indicator_source] Nvarchar(max) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [Coefficients] alter Column [estimated_coefficent] Numeric(18,10) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Coefficients] alter Column [std_error] Numeric(18,10) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Coefficients] alter Column [t_value] Numeric(18,10) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table [Coefficients] alter Column [Pr(>|t|)] Numeric(18,10) Null"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        'this does updates from feb 2018 onwards
        DatabaseUpdatesFeb2018(TypeOfUpdate)



        '********************************************************************************
        '**********   Common Code Below  
        '********************************************************************************


        ListBoxUpdateStatus.Items.Add("Updates finished for " & CustomerNameTemp)
        ListBoxUpdateStatus.Items.Add("**********************************")
        ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
        ListBoxUpdateStatus.Refresh()

        ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
        ListBoxUpdateStatus.Refresh()

    End Sub


    Private Sub DatabaseUpdatesFeb2018(ByVal TypeOfUpdate)


        'The older routines are at DatabaseUpdatesArchive

        'newer routines are at
        'DatabaseUpdatesFeb2018(TypeOfUpdate)


        Dim RecordExists As Boolean = False

        CustomerDatabaseName = TextBoxDBName.Text.Trim()

        If CustomerDatabaseName = "" Then
            MsgBox("Select Customer")
            Exit Sub
        End If
        Try
            strconnectSQLCommandTypeControl.Close()
        Catch ex As Exception
        End Try

        Dim SqlStringUpdateTemp As String = ""
        Dim CustomerNameTemp As String = ListBoxCustomerInfo.SelectedItem
        If UCase(TypeOfUpdate) = "STANDARD" Then
            CustomerNameTemp = "Master Database"
        End If



        'this is for the sql command connection
        If ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Standard" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachSQLStd" & ";PWD=" & "PaLm78jxY" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "awsrdsbizcoachsqlstandard.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433"

        ElseIf ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "ImpRDSBizCoach" & ";PWD=" & "impBiz16!" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "awsrdsbizcoach.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433"
        ElseIf ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express - BizCoach2" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachDataLoading" & ";PWD=" & "JaMyt45!ord" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433"

        Else
            MsgBox("Invalid Cluster")
            Exit Sub

        End If

        If UCase(TypeOfUpdate) = "STANDARD" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachSQLStd" & ";PWD=" & "PaLm78jxY" &
              ";DATABASE=" & "BizCoachDataStandardDatabase" &
           ";SERVER=" & "awsrdsbizcoachsqlstandard.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433"
        End If

        Dim myCommand As String 'to store the sql command to be executed
        Dim cmd As SqlCommand = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution


        'this for doing lookups

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        Try
            erpdb.Open(strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MessageBox.Show("An error occured connecting to the server, the error was:" & ControlChars.CrLf & Err.Description, "Connection error")
            Exit Sub
        End Try



        myCommand = "Alter Table [Predictions] add prediction_active bit"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Predictions] add [Outlet Name] nvarchar(255), prediction_created_on datetime"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table [Predictions] add  prediction_week int, prediction_year int, week_end_day date, week_start_day date"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "Alter Table AssociationRules alter Column support numeric(10, 9)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table AssociationRules alter Column confidence numeric(10, 9)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table AssociationRules alter Column lift numeric(8, 3)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table AssociationRules alter Column jaccard numeric(10, 9)"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table AssociationRules alter Column rules_created_on SMALLDATETIME    "
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "Alter Table [AssociationRules] add  rules_active bit"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            'Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        '     myCommand = "Alter Table SalesOrderHeaders alter Column SalesCity nvarchar(40)"
        myCommand = "Alter Table AssociationRules_Models alter Column model_created_on SMALLDATETIME    "
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table AssociationRules_Models alter Column period_start_date SMALLDATETIME    "
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "Alter Table AutomaticDataFeeds alter Column  period_start_date SMALLDATETIME    "
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()




        myCommand = "Alter Table AssociationRules_Models  Column alter DateTimeReading SMALLDATETIME    "
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "Alter Table BudgetLines alter  Column LastDateModified SMALLDATETIME    "
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()

        myCommand = "Alter Table BudgetLines alter Column  LastUpdated SMALLDATETIME    "
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = "Alter Table Models alter  Column sigma2 decimal(18, 3)    "
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        ' myCommand = "Alter Table [Predictions] add [Outlet Name] nvarchar(255), prediction_created_on datetime"


        myCommand = "Alter Table AssociationRules_Models  add  [period_start_date]  SMALLDATETIME    "
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()




        myCommand = "drop view AssociationRulesNamesView"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()



        myCommand = "CREATE VIEW [dbo].[AssociationRulesNamesView]
                AS
                SELECT        a.lhs, a.rhs, a.support, a.confidence, a.lift, a.rules_created_on, a.rules_id, a.[Outlet Name], a.models_id, a.rules_active, a.count, b.ItemName AS LeftItemName, b.Description AS LeftDescription, 
                         c.ItemName AS RightItemName, c.Description AS RightDescription
                FROM            dbo.AssociationRules AS a INNER JOIN
                         dbo.ItemDetails AS b ON a.lhs = b.ItemCode INNER JOIN
                         dbo.ItemDetails AS c ON a.rhs = c.ItemCode"

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(myCommand & " : " & CustomerNameTemp)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()





    End Sub

    Private Sub ListBoxCustomerInfo_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ListBoxCustomerInfo.SelectedIndexChanged

        Dim ParentCompanyName As String = ""
        Dim CustomerCluster As String = ""
        'this gets the logon string for the database
        GetCustomerDetails(ListBoxCustomerInfo.SelectedItem, ParentCompanyName, CustomerCluster)
        'now creates the connection string
        Dim Loggedin As Boolean = False
        Dim LoggeninError As Boolean = False
        CreateSQLConnection(ListBoxCustomerInfo.SelectedItem, ListBoxCustomerInfo.SelectedIndex, Loggedin, LoggeninError, CustomerCluster)

        'selects the cluster
        ListBoxCluster.SelectedItem = CustomerCluster
        ListBoxCluster.Refresh()

        'gets the user names associated with the customer
        Dim EmailString As String = ""

        GetUserNamesBizCoach(ListBoxCustomerInfo.SelectedItem, EmailString)

        TextBoxNotifyEmailAdd.Text = ""
        TextBoxAddMobileNumber.Text = ""
        LabelExistingMobile.Text = ""
        TextBoxNotifyEmailAdd.Refresh()
        TextBoxAddMobileNumber.Refresh()
        LabelExistingMobile.Refresh()

        'gets any notifications for customer
        GetNotificationSchedule()

    End Sub


    Private Sub GetUserNamesBizCoach(ByVal CustomerName, ByRef EmailString)
        Dim SQLCustomerDB As ADODB.Connection
        Dim recordsCustomerDB As ADODB._Recordset
        SQLCustomerDB = New ADODB.Connection
        Dim usernameTemp As String = ""
        Dim emailTemp As String = ""
        Dim client_ipTemp As String = ""
        Dim login_momentTemp As Date = Now
        Dim useridTemp As String = ""
        Dim login_day_of_weekTemp As String = ""
        Dim login_week_of_yearTemp As String = ""
        Dim organizationTemp As String = ""
        Dim IdTemp As Int32 = 0
        Dim AppCustomername As String = ""

        ListBoxUsers.Items.Clear()

        'gets the company name for the App as this may be different
        Try
            SQLCustomerDB.Open(strconnectSQLBizCoachCustomerInformationDatabase)
            recordsCustomerDB = SQLCustomerDB.Execute("Select * from CustomerContacts where CustomerName ='" & CustomerName &
                                                      "' or ParentCompany ='" & CustomerName & "' order by CustomerEmail")
            While Not recordsCustomerDB.EOF
                ListBoxUsers.Items.Add(recordsCustomerDB.Fields("CustomerEmail").Value.ToString.Trim)
                EmailString = EmailString & recordsCustomerDB.Fields("CustomerEmail").Value.ToString.Trim & ","
                recordsCustomerDB.MoveNext()
            End While
            recordsCustomerDB.Close()
            SQLCustomerDB.Close()
        Catch ex As Exception

        End Try

        'trims of the final , from the email string
        Try
            EmailString = Mid(EmailString, 1, Len(EmailString) - 1)
        Catch ex As Exception
            EmailString = ""
        End Try
    End Sub

    Private Sub GetCustomerDetails(ByVal CustomerName, ByRef ParentCompanyDetails, ByRef CustomerCluster)
        'this loads the customers from the 'BizCoachCustomers' database
        Dim BizCoachCustomerInformation As ADODB.Connection
        Dim RecordsCustomers As ADODB._Recordset
        BizCoachCustomerInformation = New ADODB.Connection
        Try
            'customers db
            BizCoachCustomerInformation.Open(strconnectSQLBizCoachCustomerInformationDatabase)
        Catch ex As Exception
            MessageBox.Show("Problem connecting to database!", "Connection Issues")
            Exit Sub
        End Try
        RecordsCustomers = BizCoachCustomerInformation.Execute("Select * from CustomerNames where CustomerName='" & CustomerName & "'")
        'its now possible that there is a parent company so look up that also
        CustomerDatabaseName = ""
        CheckBoxDemoAccount.Checked = False
        While Not RecordsCustomers.EOF
            CustomerDatabaseName = RecordsCustomers.Fields("DatabaseNameBizCoach").Value.ToString.Trim
            Try
                CustomerCluster = RecordsCustomers.Fields("AWSCluster").Value.ToString.Trim
            Catch ex As Exception
                CustomerCluster = "AWS Singapore EC2 RDS SQL Express - BizCoach2"
            End Try

            If CustomerCluster = "" Then
                MsgBox("No Cluster")
            End If

            TextBoxDBName.Text = RecordsCustomers.Fields("DatabaseNameBizcoach").Value.ToString.Trim
            Try
                CheckBoxDemoAccount.Checked = RecordsCustomers.Fields("DemoCompany").Value
            Catch ex As Exception
            End Try

            'this gets the start of the week which is used in the KPI calculations and the formulaes for predictuions
            Try
                WeekStartsOn = RecordsCustomers.Fields("Week Starts On").Value.ToString.Trim
            Catch ex As Exception
                WeekStartsOn = "Monday"
            End Try


            RecordsCustomers.MoveNext()
        End While
        RecordsCustomers.Close()
        ParentCompanyDetails = ""
        If CustomerDatabaseName = "" Then
            ParentCompanyDetails = CustomerName
            RecordsCustomers = BizCoachCustomerInformation.Execute("Select * from CustomerNames where ParentCompany ='" & CustomerName & "'")
            'its now possible that there is a parent company so look up that also
            CustomerDatabaseName = ""
            While Not RecordsCustomers.EOF
                CustomerDatabaseName = RecordsCustomers.Fields("DatabaseNameBizCoach").Value.ToString.Trim
                Try
                    CustomerCluster = RecordsCustomers.Fields("AWSCluster").Value.ToString.Trim
                Catch ex As Exception
                    CustomerCluster = "AWS Singapore EC2 RDS SQL Standard"
                End Try
                'this gets the start of the week which is used in the KPI calculations and the formulaes for predictuions
                Try
                    WeekStartsOn = RecordsCustomers.Fields("Week Starts On").Value.ToString.Trim
                Catch ex As Exception
                    WeekStartsOn = "Monday"
                End Try

                RecordsCustomers.MoveNext()
            End While
            RecordsCustomers.Close()
        End If
        BizCoachCustomerInformation.Close()

    End Sub


    Private Sub CreateSQLConnection(ByRef CustomerName As String, ByRef ListBoxIndexOfCustomer As Int16, ByRef MySQLLoggedIn As Boolean,
                                    ByRef MySQLLoginError As String, ByRef CustomerCluster As String)

        Dim TestConnectionString As String = ""
        Dim TableNameTemp As String = ""
        'this redoes the new connection

        strconnectSQLBizCoachCustomerDataSQL = "UID=" & "ImpRDSBizCoach" & ";PWD=" & "impBiz16!" & ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
                         ";SERVER=" & "awsrdsbizcoach.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433" & ";Provider=SQLOLEDB"

        If CustomerCluster = "AWS Singapore EC2 RDS SQL Standard" Then
            strconnectSQLBizCoachCustomerDataSQL = "UID=" & "BizCoachSQLStd" & ";PWD=" & "PaLm78jxY" & ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
                         ";SERVER=" & "awsrdsbizcoachsqlstandard.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433" & ";Provider=SQLOLEDB"

        ElseIf CustomerCluster = "AWS Singapore EC2 RDS SQL Express" Then
            strconnectSQLBizCoachCustomerDataSQL = "UID=" & "ImpRDSBizCoach" & ";PWD=" & "impBiz16!" & ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
                         ";SERVER=" & "awsrdsbizcoach.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433" & ";Provider=SQLOLEDB"

        ElseIf CustomerCluster = "AWS Singapore EC2 RDS SQL Express - BizCoach2" Then

            strconnectSQLBizCoachCustomerDataSQL = "UID=" & "BizCoachDataLoading" & ";PWD=" & "JaMyt45!ord" & ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
                         ";SERVER=" & "ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433" & ";Provider=SQLOLEDB"

        Else
            strconnectSQLBizCoachCustomerDataSQL = "UID=" & "ImpRDSBizCoach" & ";PWD=" & "impBiz16!" & ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
                         ";SERVER=" & "awsrdsbizcoach.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433" & ";Provider=SQLOLEDB"

            strconnectSQLBizCoachCustomerDataSQL = "UID=" & "BizCoachDataLoading" & ";PWD=" & "JaMyt45!ord" & ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
                         ";SERVER=" & "ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433" & ";Provider=SQLOLEDB"

            '            Public strconnectSQLBizCoachExternalData As String = "UID=" & "BizCoachDataLoading" & ";PWD=" & "JaMyt45!ord" & ";DATABASE=" & "BizCoachExternalData" &
            '                        ";SERVER=" & "ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433" & ";Provider=SQLOLEDB"


        End If


        TestConnectionString = strconnectSQLBizCoachCustomerDataSQL
        TableNameTemp = "POSSales"

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        Dim ErrDesc As String = ""
        Dim SQLConnectionOK As Boolean = False
        Try
            erpdb.Open(TestConnectionString)
            records = erpdb.Execute("Select * from " & TableNameTemp)
            SQLConnectionOK = True
            records.Close()
        Catch ex As Exception
            ErrDesc = Err.Description
        End Try

        Try
            erpdb.Close()
        Catch ex As Exception

        End Try

        If SQLConnectionOK = True Then
            MySQLLoggedIn = True
        Else
            '     WriteToSystemErrorLog("Error has occured in SQL login " & ErrDesc)
        End If
    End Sub

    Private Sub ButtonVendCreationAutomatic_Click(sender As Object, e As EventArgs) Handles ButtonVendCreationAutomatic.Click


        ButtonVendManualRun.BackColor = Color.FromKnownColor(KnownColor.ControlLight)
        ButtonVendManualRun.Refresh()

        If TimerVend.Enabled = True Then
            TimerVend.Enabled = False
            ButtonVendCreationAutomatic.BackColor = Color.LightSalmon
            ButtonVendCreationAutomatic.Text = "Vend Timer" & ControlChars.CrLf & "Not Running"
            PictureBoxVendTimer.BackColor = Color.Red
            PictureBoxVendTimer.Refresh()
            LabelTimerVendNextRun.Text = "Not Running"
            LabelTimerVendNextRun.Refresh()
            ButtonVendCreationAutomatic.Refresh()
            Exit Sub
        End If
        TimerVend.Enabled = True
        '      TimerAutoRun.Interval = 60000 * 30
        ButtonVendCreationAutomatic.Text = "Vend Timer" & ControlChars.CrLf & "Next Run" & ControlChars.CrLf & Format(Now.AddSeconds(TimerVend.Interval / 1000), "H:mm:ss tt")
        ButtonVendCreationAutomatic.BackColor = Color.LightGreen
        ButtonVendCreationAutomatic.Refresh()
        PictureBoxVendTimer.BackColor = Color.LightGreen
        PictureBoxVendTimer.Refresh()
        LabelTimerVendNextRun.Text = Format(Now.AddSeconds(TimerVend.Interval / 1000), "H:mm:ss tt")
        LabelTimerVendNextRun.Refresh()

    End Sub

    Private Sub TimerVend_Tick(sender As Object, e As EventArgs) Handles TimerVend.Tick

        ButtonVendCreationAutomatic.Text = "Logins Timer" & ControlChars.CrLf & "Next Run" & ControlChars.CrLf & Format(Now.AddSeconds(TimerVend.Interval / 1000), "hh:mm:ss tt")
        If VendCustomerUpdateRunning = True Then
            ListBoxUpdateStatus.Items.Add("Vend update running already! " & Now)
            Exit Sub
        End If
        'now sets the tab back to here
        TabControlMain.SelectedIndex = 0
        TabControlMain.Refresh()
        ProcessNewCustomer()
    End Sub


    Private Sub ProcessNewCustomer()
        'selects the default cluster
        ListBoxCluster.SelectedItem = TextBoxDefaultNewCustomerCluster.Text.Trim

        VendCustomerUpdateRunning = True
        Dim NumberOfCustomerstoCreate As Int16 = 1
        Do While NumberOfCustomerstoCreate > 0
            'creates the vend customer
            TabControlMain.SelectedIndex = 1
            TabControlMain.Refresh()
            CreateVendCustomer(NumberOfCustomerstoCreate)
        Loop
        VendCustomerUpdateRunning = False
        ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
        ListBoxUpdateStatus.Refresh()
    End Sub


    Private Sub CreateVendCustomer(ByRef NumberOfCustomersToCreate As Int32)

        'if no cluster is selected then select the sql standard cluster
        If ListBoxCluster.SelectedIndex = -1 Then
            ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express - BizCoach2"
        End If

        VendCustomerUpdateRunning = True
        Dim StartTime As DateTime = DateTime.Now
        Dim emailtemp As String = ""
        Dim PhonenumberTemp As String = ""

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        Try
            erpdb.Open(strconnectPostGresSQLUsers)
        Catch ex As Exception
            Delay(5)
            Try
                Try
                    erpdb.Close()
                Catch ex2 As Exception

                End Try
                erpdb.Open(strconnectPostGresSQLUsers)
            Catch ex1 As Exception
                MessageBox.Show("An error occured connecting to the server, the error was:" & ControlChars.CrLf & Err.Description, "Connection error")
            End Try
        End Try

        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic

        Dim UserID As Integer = 0
        Dim organization As String = ""

        NumberOfCustomersToCreate = 0
        'this creates them 1 at a time
        Try
            records = erpdb.Execute("Select * FROM create_db_job_schedule where Job_Done ='False' or Job_Done is null order by created_at asc")
        Catch ex As Exception
            If Err.Description = "Operation is not allowed when the object is closed." Then
                Delay(10)
                erpdb.Open(strconnectPostGresSQLUsers)
            End If
            records = erpdb.Execute("Select * FROM create_db_job_schedule where Job_Done ='False' or Job_Done is null order by created_at asc")
        End Try

        While Not records.EOF
            UserID = records.Fields("user_id").Value.ToString.Trim
            NumberOfCustomersToCreate += 1
            records.MoveNext()
        End While
        records.Close()
        '  UserID = 145
        ' NumberOfCustomersToCreate += 1

        If Val(UserID) = 0 Then
            ListBoxUpdateStatus.Items.Add("No new vend customers " & Now)
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxControlIssues.Items.Add("No new vend customers " & Now)
            ListBoxControlIssues.SelectedIndex = ListBoxControlIssues.Items.Count - 1
            ListBoxVendStatus.Items.Add("No new vend customers " & Now)
            ListBoxVendStatus.SelectedIndex = ListBoxVendStatus.Items.Count - 1
            ListBoxVendStatus.Refresh()
            ListBoxUpdateStatus.Refresh()
            ListBoxControlIssues.Refresh()
            NumberOfCustomersToCreate = 0
            VendCustomerUpdateRunning = False
            'creates the vend customer
            TabControlMain.SelectedIndex = 0
            TabControlMain.Refresh()
            Exit Sub
        End If


        'now gets the company name from the id
        records = erpdb.Execute("Select * FROM users where id ='" & UserID & "'")
        While Not records.EOF
            organization = records.Fields("organization").Value.ToString.Trim
            emailtemp = records.Fields("email").Value.ToString.Trim
            PhonenumberTemp = records.Fields("cell_phone_number").Value.ToString.Trim
            records.MoveNext()
        End While
        records.Close()

        'now gets the vend token
        Dim VendToken As String = ""
        Dim VendStoreName As String = ""

        'to make it case insensative then convert both to lowercase
        records = erpdb.Execute("Select * FROM users_systems where lower(email_or_username) ='" & emailtemp.ToLower & "'")
        While Not records.EOF
            VendToken = records.Fields("personal_token").Value.ToString.Trim
            VendStoreName = records.Fields("store_address_url").Value.ToString.Trim
            records.MoveNext()
        End While
        records.Close()
        If VendToken.Trim = "" Then
            MsgBox("No Token")
        End If
        If VendStoreName.Trim = "" Then
            MsgBox("No Store Name")
        End If

        ListBoxUpdateStatus.Items.Add("Adding vend : " & VendStoreName & ", " & organization & ", " & Now)
        ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
        ListBoxControlIssues.Items.Add("Adding vend : " & VendStoreName & ", " & organization & ", " & Now)
        ListBoxControlIssues.SelectedIndex = ListBoxVendStatus.Items.Count - 1
        ListBoxVendStatus.Items.Add("Adding vend : " & VendStoreName & ", " & organization & ", " & Now)
        ListBoxVendStatus.SelectedIndex = ListBoxVendStatus.Items.Count - 1
        ListBoxVendStatus.Refresh()
        ListBoxUpdateStatus.Refresh()
        ListBoxControlIssues.Refresh()

        'removes spaces etc from the customername
        Dim DatabaseToCreate As String = organization.Trim
        'removes illegal characters
        Dim illegalChars As Char() = "~`|@#$^*{}'[]""_<>\/+.%?".ToCharArray()
        Try
            For Each ch As Char In illegalChars
                '              DatabaseToCreate = DatabaseToCreate.Replace(ch, "")
            Next
        Catch ex As Exception
            Dim strErrMsg = "Oops! Something is wrong with verify special characters at IsThereAnySpecialCharacter"
            MessageBox.Show(strErrMsg & vbCrLf & "Err: " & ex.Message)
        End Try

        'send sms
        SendTwillio("+" & PhonenumberTemp, "Welcome to BizCoach! We are loading your data now and setting up your " &
                    "insights. This one-time process might take up to a few hours. You will receive a SMS and email " &
                    "notification when this is done. After the initial set-up you can access your data " &
                    "through https://getbizcoach.io/login. If you have any questions, please email us " &
                    "at support@impalalcoud.com. Your BizCoach team")

        'now does the DB creation routines
        Dim DBCreatedOK As Boolean = False

        'need to strip out characters from the customer name also
        organization = organization.Trim
        CreateCustomerDatabase("Data" & DatabaseToCreate, organization, "Vend", "", DBCreatedOK, VendToken, VendStoreName, emailtemp, PhonenumberTemp)

        If DBCreatedOK = True Then
            'this creates the database
            CreateDataBaseTables(ListBoxCluster.SelectedItem)
            'this creates the views
            CreateViews(ListBoxCluster.SelectedItem)
            'this does the updates
            CheckBoxUpdateAll.Checked = False
            DBUpdate()
            LabelEndTime.Text = Format(Now, "HH:mm:ss tt")
            LabelEndTime.Refresh()
            Dim UpdateStatus As String = ""
            UpdateCustomerLog(organization, Now, Now,
                              "OK", organization & " created successfully for VEND trial", Now, Now, organization & " created for VEND", "")
            ListBoxUpdateStatus.Items.Add(organization & " created for VEND")
            ListBoxUpdateStatus.Refresh()
            'also insert blanks into KPI table so that the viz can be seen
            InsertBlankKPIs()
            'customer vend message
            AutoEmailMessage365("'" & organization & "' database was created for the Vend trial." & ControlChars.CrLf & ControlChars.CrLf & Format(Now, "ddd d/MMM/yy h:mm tt"),
                                "trial@impalacloud.com", organization & " Vend trial created.",
                                    False, "will.odwyer@impalacloud.com", "", "", "Trial", "", "", "")
            AutoEmailMessage365("'" & organization & "' database was created for the Vend trial." & ControlChars.CrLf & ControlChars.CrLf & Format(Now, "ddd d/MMM/yy h:mm tt"),
                                "no_reply@impalacloud.com", "Your BizCoach trial for Vend has been created.",
                                    False, emailtemp, "", "", "Trial", "", "", "")
        Else
            MsgBox("Not OK")
            '     Exit Sub
        End If

        Try
            rs.Open("Update create_db_job_schedule set job_done ='True'  where user_id ='" & UserID & "'", strconnectPostGresSQLUsers)
        Catch ex As Exception
            MsgBox("Epdate Error " & Err.Description)
        End Try

        'creates a post request to creste the data
        'http://localhost:8080/test?cus=GloryStores
        '   PostRequestVendData(organization)
        PostReq("http://localhost:8080/test?cus=" + organization, "", "")

        'now does the KPIs
        TabControlMain.SelectedIndex = 2
        TabControlMain.Refresh()
        RunKPIsForSelectedCompany()

        'now sends notification & speech create
        TabControlMain.SelectedIndex = 3
        TabControlMain.Refresh()

        SendTwillio("+" & PhonenumberTemp, "Your Insights are ready! You can access your dashboards through https://getbizcoach.io/login using your BizCoach credentials")

        'here for the listener












        Delay(300)

        Dim InitialDesktopNotificationText As String = ""
        '   SendInitialNotification(InitialDesktopNotificationText)

        'sends desktop notification
        '        Dim DesktopMessageText As String = InitialDesktopNotificationText
        '        Dim DesktopMessageTitle As String = "Initial Notification"
        '        Dim DesktopMessageNotificationURL = "http://aagilitycom.ipage.com/custview/07Jan1801glorystores.htm"

        'Dim CustomerName As String = ListBoxCustomerInfo.SelectedItem
        'Dim DesktopNotificationStatus
        'Dim DestktopStatus
        'Dim DesktopReference

        '        DesktopNotification(DesktopMessageText, DesktopMessageTitle, DesktopMessageNotificationURL, CustomerName,
        '        DesktopNotificationStatus, DestktopStatus, DesktopReference)

        SendTwillio("+85291961834", "Customer " & organization & " has been onboarded. " & Now)

        '        SendTwillio("+" & PhonenumberTemp, DesktopMessageText)

        'this does the initial notifications wheich are

        'yesterdays sales
        'forecast
        Dim UniqueIDTemt As Guid = System.Guid.NewGuid

        ListBoxUsers.SelectedItem = emailtemp
        ListBoxNotificationType.SelectedItem = "Daily Sales Report (POS System) - Yesterday"
        ListBoxDeliveryMethod.SelectedItem = "Email"

        DoAllNotifications()

        'puts to standard updates
        Try
            rs.Open("Insert into NotificationCustomerSchedules (CustomerName, ActiveCustomer, CustomerEmail, " &
                    "[BizCoachContact], [MobilePhoneNumber], UniqueID, " &
                    "NotificationName, DeliveryMethod, LastRan, " &
                    "TimeToSend, MondaySend, TuesdaySend, " &
                    "WednesdaySend, ThursdaySend, FridaySend, " &
                    "SaturdaySend, SundaySend) Values ('" &
                    organization & "','" & "1" & "','" & emailtemp & "','" &
                    "0" & "','" & PhonenumberTemp & "','" & UniqueIDTemt.ToString &
                    "','" & ListBoxNotificationType.SelectedItem & "','" & "Email" & "','" & Format(Now.AddYears(-10), "dd-MMM-yyyy") &
                     "','" & Format(Now, "dd-MMM-yyyy 08:00") & "','1','1','1','1','1','1','1" & "')", strconnectSQLBizCoachSettings)

        Catch ex As Exception
            MsgBox("Update Error " & Err.Description)
        End Try



        ListBoxNotificationType.SelectedItem = "Predictions (POS System) - Daily"
        ListBoxDeliveryMethod.SelectedItem = "Email"

        DoAllNotifications()


        UniqueIDTemt = System.Guid.NewGuid
        'puts to standard updates
        Try
            rs.Open("Insert into NotificationCustomerSchedules (CustomerName, ActiveCustomer, CustomerEmail, " &
                    "[BizCoachContact], [MobilePhoneNumber], UniqueID, " &
                    "NotificationName, DeliveryMethod, LastRan, " &
                    "TimeToSend, MondaySend, TuesdaySend, " &
                    "WednesdaySend, ThursdaySend, FridaySend, " &
                    "SaturdaySend, SundaySend) Values ('" &
                    organization & "','" & "1" & "','" & emailtemp & "','" &
                    "0" & "','" & PhonenumberTemp & "','" & UniqueIDTemt.ToString &
                    "','" & ListBoxNotificationType.SelectedItem & "','" & "Email" & "','" & Format(Now.AddYears(-10), "dd-MMM-yyyy") &
                     "','" & Format(Now, "dd-MMM-yyyy 08:00") & "','1','1','1','1','1','1','1" & "')", strconnectSQLBizCoachSettings)

        Catch ex As Exception
            MsgBox("Update Error " & Err.Description)
        End Try



        Dim EndTime As DateTime = DateTime.Now
        Dim TotalTime As TimeSpan = EndTime - StartTime
        ListBoxUpdateStatus.Items.Add(organization & " time Taken was: " & TotalTime.ToString("hh':'mm':'ss"))

    End Sub

    Private Sub CreateCustomerDatabase(ByRef CustomerDBName, ByRef CustomerNameTemp, ByRef POSSystem,
                                       ByRef FinancialSystem, ByRef DBCreatedOK, ByVal VendToken, ByVal VendStoreURL, ByVal EmailTemp, ByVal MobileTemp)

        Dim CreateDBOK As Boolean = False
        Dim strconnectSQLCommandTypeControl As SqlConnection = New SqlConnection("UID=BizCoachSQLStd;PWD=PaLm78jxY;Server=awsrdsbizcoachsqlstandard.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433;" &
                                                                                 "DataBase=BizCoachDataStandardDatabase")

        If ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Standard" Then
            strconnectSQLCommandTypeControl = New SqlConnection("UID=BizCoachSQLStd;PWD=PaLm78jxY;Server=awsrdsbizcoachsqlstandard.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433;" &
                                                                                 "DataBase=BizCoachDataStandardDatabase")

        ElseIf ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express" Then

            strconnectSQLCommandTypeControl = New SqlConnection("UID=ImpRDSBizCoach;PWD=impBiz16!;Server=awsrdsbizcoach.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433;" &
                                                                               "DataBase=BizCoachDataStandardDatabase")

        ElseIf ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express - BizCoach2" Then
            strconnectSQLCommandTypeControl = New SqlConnection("UID=BizCoachDataLoading;PWD=JaMyt45!ord;Server=ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433;" &
                                                                               "DataBase=BizCoachDataStandardDatabase")


        Else
            MsgBox("No Cluster!")
            Exit Sub
        End If

        'now created on new EC2 instance
        strconnectSQLCommandTypeControl = New SqlConnection("UID=BizCoachDataLoading;PWD=JaMyt45!ord;Server=ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433;" &
                                                                               "DataBase=BizCoachCustomers;Initial Catalog=master")

        'this is always the same to the SQL standard DB
        strconnectSQLBizCoachSettings = "UID=BizCoachDataLoading;PWD=JaMyt45!ord;Server=ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433;DataBase=BizCoachSettings;Provider=SQLOLEDB"


        Dim ErrorMessage As String = ""
        Dim ErrorNumber As Decimal = 0

        'since we need to create a new database set the Initial Catalog as Master
        'Which means we are creating database under master DB
        Dim myCommand As String 'to store the sql command to be executed
        myCommand = "CREATE database " & "BizCoach" & CustomerDBName & ";" ' & " COLLATE Chinese_Hong_Kong_Stroke_90_BIN" 'the command that creates new database
        Dim cmd As SqlCommand = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open() 'open a connection with cmd
            cmd.ExecuteNonQuery() 'Execute the query

        Catch
            '    MessageBox.Show(Err.Description)
            ErrorMessage = Err.Description.Trim
            ErrorNumber = Err.Number
            If Err.Description = "" Then
                ErrorMessage = ""
            End If
        End Try
        Try
            cmd.Connection.Close() 'Close the connection
        Catch ex As Exception
        End Try

        'because the database has been created using the dbo user the ownership needs to be changed so we can add the user
        'to the database


        'this for the newly created database
        Dim strconnectSQLCommandTypeControlNewDatabase As SqlConnection = New SqlConnection("UID=BizCoachDataLoading;PWD=JaMyt45!ord;Server=ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433;" &
                                                                               "DataBase=" & "BizCoach" & CustomerDBName & ";")



        myCommand = "sp_changedbowner 'sa'"
        Dim cmd1 As SqlCommand = New SqlCommand(myCommand, strconnectSQLCommandTypeControlNewDatabase) ' creating command for execution
        Try
            cmd1.Connection.Open() 'open a connection with cmd
            cmd1.ExecuteNonQuery() 'Execute the query
          
        Catch
            '    MessageBox.Show(Err.Description)
            ErrorMessage = Err.Description.Trim
            ErrorNumber = Err.Number
            If Err.Description = "" Then
                ErrorMessage = ""
            End If
        End Try
        Try
            cmd1.Connection.Close() 'Close the connection
        Catch ex As Exception
        End Try


        'now can add the user to the database
        myCommand = "CREATE USER BizCoachDataLoading FOR LOGIN BizCoachDataLoading;" ' & " COLLATE Chinese_Hong_Kong_Stroke_90_BIN" 'the command that creates new database
        Dim cmd2 As SqlCommand = New SqlCommand(myCommand, strconnectSQLCommandTypeControlNewDatabase) ' creating command for execution
        Try
            cmd2.Connection.Open() 'open a connection with cmd
            cmd2.ExecuteNonQuery() 'Execute the query
            CreateDBOK = True
        Catch
            '    MessageBox.Show(Err.Description)
            ErrorMessage = Err.Description.Trim
            ErrorNumber = Err.Number
            If Err.Description = "" Then
                ErrorMessage = ""
            End If
        End Try
        Try
            cmd2.Connection.Close() 'Close the connection
        Catch ex As Exception
        End Try




        '        myCommand = "IF NOT EXISTS (SELECT * FROM sys.server_principals WHERE name = N'TestUser') CREATE LOGIN [TestUser] WITH PASSWORD=N'user', DEFAULT_LANGUAGE=[us_english], CHECK_EXPIRATION=OFF, CHECK_POLICY=OFF"
        '        Dim cmd1 As SqlCommand = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        '        Try
        '        cmd1.Connection.Open() 'open a connection with cmd
        '        cmd1.ExecuteNonQuery() 'Execute the query
        '        CreateDBOK = True
        '        Catch
        '        '    MessageBox.Show(Err.Description)
        '        ErrorMessage = Err.Description.Trim
        '        ErrorNumber = Err.Number
        '        If Err.Description = "" Then
        '        ErrorMessage = ""
        '        End If
        '        End Try
        '        Try
        '        cmd1.Connection.Close() 'Close the connection
        '        Catch ex As Exception
        '        End Try


        'also inserts into customer settings
        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic
        Dim UniqueIDTemt As Guid = System.Guid.NewGuid

        Try
            rs.Open("Insert into CustomerNames (CustomerName, DatabaseNameBizcoach, [ImpalaNetSuiteCustomerInternalID], FinancialSystem, " &
                    "[Point Of Sale System], [AWSCluster], AppCompanyName, [Vend Token], VendStoreName, UniqueID) Values ('" &
                    CustomerNameTemp & "','" & CustomerDBName & "','999','" & FinancialSystem & "','" & POSSystem &
                    "','" & ListBoxCluster.SelectedItem & "','" & CustomerNameTemp & "','" & VendToken & "','" & VendStoreURL & "','" & _
                    UniqueIDTemt.ToString & "')", strconnectSQLBizCoachCustomerInformationDatabase)
        Catch ex As Exception
            MsgBox("Update Error " & Err.Description)
        End Try

        'insert email/phone number into the database for the notifications
        Try
            rs.Open("Insert into CustomerContacts (CustomerName, ActiveCustomer, CustomerEmail, " &
                    "BizCoachContact, MobilePhoneNumber) Values ('" &
                    CustomerNameTemp & "','" & "1" & "','" & EmailTemp & "','" &
                    "0" & "','" & MobileTemp &
                    "')", strconnectSQLBizCoachCustomerInformationDatabase)
        Catch ex As Exception
            MsgBox("Update Error " & Err.Description)
        End Try

        'also insert Will so we can see the results

        Try
            If EmailTemp <> "will.odwyer@impalacloud.com" Then
                rs.Open("Insert into CustomerContacts (CustomerName, ActiveCustomer, CustomerEmail, " &
                        "BizCoachContact, MobilePhoneNumber) Values ('" &
                        CustomerNameTemp & "','" & "1" & "','" & "will.odwyer@impalacloud.com" & "','" &
                        "1" & "','" & "+85291961834" &
                        "')", strconnectSQLBizCoachCustomerInformationDatabase)
            End If
        Catch ex As Exception
            MsgBox("Update Error " & Err.Description)
        End Try

        If ListBoxCustomerInfo.FindStringExact(CustomerNameTemp) = True Then
            ListBoxCustomerInfo.Items.Add(CustomerNameTemp)
        End If

        'now select the customer as it may have the DB updated imediatly
        ListBoxCustomerInfo.Refresh()
        ListBoxCustomerInfo.SelectedItem = CustomerNameTemp
        ListBoxCustomerInfo.Refresh()

        If CreateDBOK = True Then
            DBCreatedOK = True
        Else
            DBCreatedOK = False
        End If
    End Sub

    Private Sub PostRequestVendData(ByVal organization)

        PostReq("http://localhost:8080/test?cus=Muscledman2", "", "")

    End Sub


    Public Function PostReq(ByVal uri As String, ByVal data As String, ByVal contentType As String, ByVal Optional method As String = "POST") As String
        Dim dataBytes As Byte() = Encoding.UTF8.GetBytes(data)
        Dim request As HttpWebRequest = CType(WebRequest.Create(uri), HttpWebRequest)
        request.AutomaticDecompression = DecompressionMethods.GZip Or DecompressionMethods.Deflate
        request.ContentLength = dataBytes.Length
        request.ContentType = contentType
        request.Method = method
        Try
            Using requestBody As Stream = request.GetRequestStream()
                requestBody.Write(dataBytes, 0, dataBytes.Length)
            End Using

            Using response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)
                Using stream As Stream = response.GetResponseStream()
                    Using reader As StreamReader = New StreamReader(stream)
                        Return reader.ReadToEnd()
                    End Using
                End Using
            End Using
        Catch ex As Exception
            If Err.Description = "Unable to connect to the remote server" Then
                ListBoxVendStatus.Items.Add(Err.Description & ", " & uri)
            End If
        End Try

    End Function



    Private Sub SendTwillio(ByVal ReceiversPhoneNumber, ByVal SMSMessage)
        ' Find your Account Sid and Auth Token at twilio.com/console

        ReceiversPhoneNumber = Replace(ReceiversPhoneNumber, " ", "")
        ReceiversPhoneNumber = Replace(ReceiversPhoneNumber, "+", "")

        If Mid(ReceiversPhoneNumber, 1, 3) <> "852" Then
            ReceiversPhoneNumber = "852" & ReceiversPhoneNumber
        End If

        If Mid(ReceiversPhoneNumber, 1, 1) <> "+" Then
            ReceiversPhoneNumber = "+" + ReceiversPhoneNumber
        End If



        Const accountSid As String = "AC1e0d11dff22f0b82a5229b9a3be68a9b"
        Const authToken As String = "8a66a1b5d5d1c5248089c71f42058b98"
        TwilioClient.Init(accountSid, authToken)
        '    Dim [to] = New PhoneNumber(ReceiversPhoneNumber)
        Dim [to] = New PhoneNumber(ReceiversPhoneNumber)
        Dim message
        Try
            message = MessageResource.Create([to], from:=New PhoneNumber("+14159156688"), body:=SMSMessage)
            Console.WriteLine(message.Sid)

            UpdateCustomerLog(ListBoxCustomerInfo.SelectedItem, Now, Now,
                     "SMS Ran OK to " & ReceiversPhoneNumber, "SMS sent to " & ListBoxCustomerInfo.SelectedItem,
                              Now, Now, "SMS sent to " & ListBoxCustomerInfo.SelectedItem, "")


        Catch ex As Exception
            ListBoxVendStatus.Items.Add(Err.Description)
            ListBoxVendStatus.Refresh()
        End Try
    End Sub

    Private Sub ButtonVendManualRun_Click(sender As Object, e As EventArgs) Handles ButtonVendManualRun.Click
        ButtonVendManualRun.BackColor = Color.FromKnownColor(KnownColor.ControlLight)
        ButtonVendManualRun.Refresh()
        ButtonVendManualRun.BackColor = Color.LightSalmon
        ButtonVendManualRun.Refresh()
        ProcessNewCustomer()
        ButtonVendManualRun.BackColor = Color.LightGreen
        ButtonVendManualRun.Refresh()
    End Sub

    Private Sub ButtonRunKPI_Click(sender As Object, e As EventArgs) Handles ButtonRunKPI.Click

        RunKPIs()

    End Sub

    Private Sub RunKPIs()

        ButtonRunKPI.BackColor = Color.LightSalmon
        ButtonRunKPI.Refresh()
        LabelTimeTakenKPI.Text = Format(Now, "dd/MMM/yyyy HH:mm")
        LabelTimeTakenKPI.Refresh()
        KPIUpdateRunning = True

        If CheckBoxAllCustomerKPI.Checked = True And CheckBoxKPITest.Checked = False Then
            For CounterTemp = 0 To ListBoxCustomerInfo.Items.Count - 1
                ListBoxCustomerInfo.SelectedIndex = CounterTemp
                'exclude fresheats as the data is not up to date
                If CheckBoxExcludeFreshEats.Checked = True And UCase(ListBoxCustomerInfo.SelectedItem) = "FRESHEATS GROUP" Then
                    'run nothing for fresheats
                Else
                    RunKPIsForSelectedCompany()
                End If
            Next
        Else

            RunKPIsForSelectedCompany()
        End If


        LabelTimeTakenKPI.Text = LabelTimeTakenKPI.Text & " : " & Format(Now, "dd/MMM/yyyy HH:mm")
        LabelTimeTakenKPI.Refresh()

        KPIUpdateRunning = False
        ButtonRunKPI.BackColor = Color.LightGreen
        ButtonRunKPI.Refresh()

    End Sub

    Private Sub RunKPIsForSelectedCompany()

        If ListBoxCustomerInfo.SelectedIndex = -1 Then
            MsgBox("select company")
            Exit Sub
        End If


        'selects the tab as may come from elsewhere

        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic


        ProgressBar2.Value = 0
        ProgressBar2.Maximum = ListBoxKPITest.Items.Count
        ProgressBar2.Refresh()

        ButtonRunKPI.BackColor = Color.LightSalmon
        ButtonRunKPI.Refresh()
        Dim startTime01 As Date = Now
        Dim StatusTemp As String = ""


        Dim UpdateSQLString As String = ""



        If CheckBoxKPITest.Checked = True Then
            'if test then just do one 
            CreateKPIs(StatusTemp)
        Else
            'does all
            For counter = 0 To ListBoxKPITest.Items.Count - 1
                ListBoxKPITest.SelectedIndex = counter
                ListBoxKPITest.Refresh()
                ListBoxStatusKPI.SelectedIndex = ListBoxStatusKPI.Items.Count - 1
                ListBoxStatusKPI.Refresh()
                If ProgressBar2.Value >= ProgressBar2.Maximum Then ProgressBar2.Value = 0
                ProgressBar2.Value = ProgressBar2.Value + 1
                ProgressBar2.Refresh()
                CreateKPIs(StatusTemp)
            Next

            'deletes all the old ones afterwards as a precaution
            Try
                UpdateSQLString = "Delete from [KPI Values] where [LastUpdated] <'" & Format(Now, "dd-MMM-yyyy") & "'"

                rs.Open(UpdateSQLString, strconnectSQLBizCoachCustomerDataSQL)

            Catch ex As Exception
                MsgBox("Update problem!")
            End Try



        End If




        'customer update log
        Dim UpdateStatus As String = ""
        UpdateCustomerLog(ListBoxCustomerInfo.SelectedItem, Now, Now,
                              UpdateStatus, "", Now, Now, "KPI " & ListBoxKPITest.SelectedItem & " Updated", "")
        ListBoxStatusKPI.Items.Add(UpdateStatus)


        Dim endTime01 As Date = Now

        Dim duration As TimeSpan = endTime01 - startTime01        'Subtract start time from end time
        ListBoxStatusKPI.SelectedIndex = ListBoxStatusKPI.Items.Count - 1
        ButtonRunKPI.BackColor = Color.LightGreen
        ButtonRunKPI.Refresh()
        ProgressBar2.Value = 0
        ProgressBar2.Refresh()


    End Sub



    Private Sub CreateKPIs(ByRef StatusTemp)

        Dim demodays As Int32 = 0
        If ListBoxCustomerInfo.SelectedItem = "FreshEats Group" Then
            demodays = 730
        End If
        Dim startTime02 As Date = Now
        'does the routines
        If Mid(ListBoxKPITest.SelectedItem, 1, 3) = "POS" Then
            GetSalesForKPI("None", ListBoxKPITest.SelectedItem, demodays)
        ElseIf UCase(Mid(ListBoxKPITest.SelectedItem, 1, 8)) = "INVOICES" Then
            '          GetInvoicesForKPI("None", ListBoxKPITest.SelectedItem, demodays)
        ElseIf UCase(Mid(ListBoxKPITest.SelectedItem, 1, 8)) = "JOURNALS" Then
            '         GetJournalsForKPI("None", ListBoxKPITest.SelectedItem, demodays)
        ElseIf UCase(Mid(ListBoxKPITest.SelectedItem, 1, 6)) = "BUDGET" Then
            '        GetBudgetsForKPI("None", ListBoxKPITest.SelectedItem, demodays)
        ElseIf UCase(Mid(ListBoxKPITest.SelectedItem, 1, 8)) = "EMPLOYEE" Then
            '       GetEmployeeKPI("None", ListBoxKPITest.SelectedItem, demodays)
        ElseIf UCase(Mid(ListBoxKPITest.SelectedItem, 1, 6)) = "COVERS" Then
            '      GetCoversForKPI("None", ListBoxKPITest.SelectedItem, demodays)
        ElseIf UCase(Mid(ListBoxKPITest.SelectedItem, 1, 13)) = "AVERAGE CHECK" Then
            '     GetAverageCheckForKPI("None", ListBoxKPITest.SelectedItem, demodays)
        Else
            ListBoxStatusKPI.Items.Add(ListBoxKPITest.SelectedItem & ", Not processed - unknown TypeOf")
            ListBoxStatusKPI.Refresh()
            MsgBox("KPI No Name")
        End If
        Dim endTime02 As Date = Now
        Dim duration As TimeSpan = endTime02 - startTime02        'Subtract start time from end time
        Console.WriteLine(duration.TotalMinutes)
        ListBoxStatusKPI.Items.Add(ListBoxKPITest.SelectedItem & "  " & Format(duration.TotalMinutes, "0.##") & " minutes")
    End Sub



    Private Sub GetSalesForKPI(ByVal Period, ByVal KPINameTemp, ByVal DemoPeriod)

        'This routine gets the raw KPI values
        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        Dim recordsSecond As ADODB._Recordset

        erpdb = New ADODB.Connection

        Try
            erpdb.Open(strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("problem...")
        End Try

        Dim rs As ADODB.Recordset

        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic
        Dim Salesyesetrday As Decimal = 0
        Dim SalesyesetrdaySecond As Decimal = 0
        Dim ErrDesc As String = ""

        Dim ResultsArray(50000, 12) '
        Dim LengthofArray As Int32 = 50000
        Dim NumResults As Int16 = 0
        Dim DateRecordtext As String = ""
        Dim SelectionStatement01 As String = ""
        Dim SelectionStatement02 As String = ""
        Dim SelectionStatement01Sub As String = ""
        Dim SelectionStatement02Sub As String = ""

        Dim DayOfMonthCalc As Int16 = Now.Day

        Dim Measure01 As String = ""
        Dim Measure02 As String = ""
        Dim Measure03 As String = ""
        Dim Measure04 As String = ""
        Dim Measure05 As String = ""

        Dim ComparisonType As String = ""
        Dim COGSTot As Decimal = 0
        'for demo is 1 year ago
        Dim DemoParameter As Int32 = DemoPeriod
        Dim DateSelection As String = ""
        Dim StartDateFrom01 As Date = Now
        Dim StartDateTo01 As Date = Now
        Dim StartDateFromtext01 As String = ""
        Dim StartDateTotext01 As String = ""
        Dim SelectionStatementDelete As String = ""
        Dim StartDateFrom02 As Date = Now
        Dim StartDateTo02 As Date = Now
        Dim StartDateFromtext02 As String = ""
        Dim StartDateTotext02 As String = ""
        Dim ThisYearisLeapYear As Boolean = Now.IsLeapYear(Now.Year)
        Dim LastYearisLeapYear As Boolean = Now.IsLeapYear(Now.AddYears(-1).Year)
        Dim YearbeforeLastYearisLeapYear As Boolean = Now.IsLeapYear(Now.AddYears(-2).Year)
        Dim DaysintheMonth As Int16 = 0

        'these store the measures
        'done this way as cant have too many KPI measures as they are cummulative
        Dim KPIMeasure01 As String = ""
        Dim KPIMeasure02 As String = ""
        Dim KPIMeasure03 As String = ""
        Dim KPIMeasure04 As String = ""
        Dim KPIMeasure05 As String = ""
        Dim KPINumber As Int16 = 1
        Dim AdditionalDays As Int16 = 0
        Dim DateReturnedKPIStart As Date = Now
        Dim DateReturnedKPIEnd As Date = Now


        Dim UpdateArchiveSQLStringTemp As String = ""

        Dim MonthNumber As String = ""
        Dim MonthNumber2Digits As String = ""



        Dim NumberDaysBack As Int16 = 0

        'the KPI's may be different for diffient customers so here it gets the sales KPI's
        'gets the relevant KPI's From the KIP measures table
        KPINumber = 1
        Try
            records = erpdb.Execute("Select * from [KPI Measures] where [KPI Type] ='POSSales' Order by [KPI Measure Order]")
            While Not records.EOF
                If KPINumber = 1 Then
                    KPIMeasure01 = records.Fields("KPI Measure Name").Value.ToString.Trim
                ElseIf KPINumber = 2 Then
                    KPIMeasure02 = records.Fields("KPI Measure Name").Value.ToString.Trim
                ElseIf KPINumber = 3 Then
                    KPIMeasure03 = records.Fields("KPI Measure Name").Value.ToString.Trim
                ElseIf KPINumber = 4 Then
                    KPIMeasure04 = records.Fields("KPI Measure Name").Value.ToString.Trim
                ElseIf KPINumber = 5 Then
                    KPIMeasure05 = records.Fields("KPI Measure Name").Value.ToString.Trim
                Else
                    MsgBox("No KPI POSSales")
                End If
                KPINumber += 1
                records.MoveNext()
            End While
            records.Close()
        Catch ex As Exception
            MsgBox("KPI POSSales " & Err.Description)
        End Try

        If KPIMeasure01 = "" Then
            MsgBox("No measures in KPI table, need at least 1 for KPIs to work." &
                   ControlChars.CrLf & "Select * from [KPI Measures] where [KPI Type] ='POSSales' Order by [KPI Measure Order]")
            Exit Sub
        End If


        Dim MeasuresSQLSelection As String = ""
        If KPIMeasure01 <> "" Then
            MeasuresSQLSelection = "[" & KPIMeasure01 & "]"
        End If
        If KPIMeasure02 <> "" Then
            MeasuresSQLSelection = MeasuresSQLSelection & ", [" & KPIMeasure02 & "]"
        End If
        If KPIMeasure03 <> "" Then
            MeasuresSQLSelection = MeasuresSQLSelection & ", [" & KPIMeasure03 & "]"
        End If
        If KPIMeasure04 <> "" Then
            MeasuresSQLSelection = MeasuresSQLSelection & ", [" & KPIMeasure04 & "]"
        End If
        If KPIMeasure05 <> "" Then
            MeasuresSQLSelection = MeasuresSQLSelection & ", [" & KPIMeasure05 & "]"
        End If

        Array.Clear(ResultsArray, ResultsArray.GetLowerBound(0), ResultsArray.Length)



        If KPINameTemp = "POS Sales MTD by Dimensions" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Format(Now.AddDays((DayOfMonthCalc - 1) * -1 - DemoParameter), "dd/MMM/yyyy")
            StartDateTo01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                    " where  cast([Date Record] as date)  >= '" & Format(Now.AddDays((DayOfMonthCalc - 1) * -1 - DemoParameter), "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date)  <= '" & Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy") &
                                    "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales LMTD by Dimensions" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Format(Now.AddDays((DayOfMonthCalc - 1) * -1 - DemoParameter), "dd/MMM/yyyy")
            StartDateTo01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                    " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") &
                                    "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales YTD by Dimensions" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"

            'temp fix to get yesterday
            GetDateForKPI("YTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                   " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales LYTD by Dimensions" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"

            'temp fix for yesterday
            GetDateForKPI("LYTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                   " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Daily Sales (yesterday)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)
            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  = '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) = '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Daily Sales Vs Previous Daily Sales (% Change)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)
            ComparisonType = "Percentage"
            'Check the % age
            '****************


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom01.AddDays(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo01.AddDays(-1)
            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Vs Week Before Daily Sales (% Change)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)
            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom01.AddDays(-7)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo01.AddDays(-7)
            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by  " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS MTD Sales Vs Previous MTD Sales (% Change)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            'check % age
            '***********
            ComparisonType = "Percentage"


            GetDateForKPI("MTD", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by  " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            GetDateForKPI("LMTD", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by  " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Sales LYMTD by Dimensions" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)
            ComparisonType = "Subtraction"
            'converts demo parem to years
            If DemoParameter <> 0 Then DemoParameter = 1

            StartDateFrom01 = Now.AddYears((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddYears((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddYears(-1)


            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                   " where  cast([Date Record] as date)   >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by  " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Daily Sales (today)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '     StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by  " & MeasuresSQLSelection



        ElseIf KPINameTemp = "POS Daily Sales (same day last week)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            GetDateForKPI("(same day last week)", DateReturnedKPIStart, DateReturnedKPIEnd, DemoParameter)

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Daily Sales (same day last year)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-365)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-365)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Daily Sales (same day last month)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddMonths(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            GetDateForKPI("(same day last month)", DateReturnedKPIStart, DateReturnedKPIEnd, DemoParameter)

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot," & MeasuresSQLSelection & "  from [POSSales] " &
                     " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                          "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection



        ElseIf KPINameTemp = "POS Daily Sales (yesterday same day last year)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-366)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-366)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  = '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  = '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Daily Sales (yesterday same day last week)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-8)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Daily Sales (yesterday same day last month)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"

            StartDateFrom01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            StartDateTo01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Daily Sales MTD to LMTD Variance" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"


            GetDateForKPI("MTD", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            GetDateForKPI("LMTD", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Daily Sales YTD to LYTD Variance" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"


            GetDateForKPI("YTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                   " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd-MMM-yyyy") &
                                    "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            GetDateForKPI("LYTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                   " where cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd-MMM-yyyy") &
                                    "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Daily Sales Day to LWDay Variance" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '     StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddDays(-7)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Daily Sales Day to LYDay Variance" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '     StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddYears(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection



        ElseIf KPINameTemp = "POS Daily Sales YTD to LYTD Variance (%)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            GetDateForKPI("YTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                   " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by  " &
                                    MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            GetDateForKPI("LYTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & "  from [POSSales] " &
                                   " where cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by  " &
                                    MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Daily Sales MTD to LYMTD Variance" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            GetDateForKPI("MTD", StartDateFrom01, StartDateTo01, DemoParameter)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            'this is a comparison so has a second sql statement

            GetDateForKPI("LYMTD", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Daily Sales MTD to LMTD Variance (%)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"



            GetDateForKPI("MTD", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")




            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            'this is a comparison so has a second sql statement

            GetDateForKPI("LMTD", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection



        ElseIf KPINameTemp = "POS Daily Sales MTD to LYMTD Variance (%)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            GetDateForKPI("MTD", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            'this is a comparison so has a second sql statement


            GetDateForKPI("LYMTD", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Daily Sales Day to LWDay Variance (%)" Then

            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '     StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddDays(-7)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Daily Sales Day to LYDay Variance (%)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '     StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddYears(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection



        ElseIf KPINameTemp = "POS Daily Sales (same day last year) – Total" Or KPINameTemp = "POS Daily Sales (same day last year) - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-365)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-365)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Daily Sales (same day last year) – Total" Or KPINameTemp = "POS Daily Sales (same day last year), Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-365)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-365)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "


        ElseIf KPINameTemp = "POS Daily Sales (yesterday) – Total" Or KPINameTemp = "POS Daily Sales (yesterday) - Total" Or KPINameTemp = "POS Daily Sales (yesterday) - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  = '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "'"

        ElseIf KPINameTemp = "POS Daily Sales (yesterday), Total" Or KPINameTemp = "POS Daily Sales (yesterday), Total" Or KPINameTemp = "POS Daily Sales (yesterday), Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  = '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "'"
            Dim holder As Decimal = 0

        ElseIf KPINameTemp = "POS Daily Sales (today) - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '     StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Daily Sales (today), Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '     StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "


        ElseIf KPINameTemp = "POS Daily Sales (same day last week) - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            GetDateForKPI("same day last week", DateReturnedKPIStart, DateReturnedKPIEnd, DemoParameter)

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Daily Sales (same day last week), Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            GetDateForKPI("same day last week", DateReturnedKPIStart, DateReturnedKPIEnd, DemoParameter)

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "


        ElseIf KPINameTemp = "POS Daily Sales (same day last month) - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            GetDateForKPI("same day last month", DateReturnedKPIStart, DateReturnedKPIEnd, DemoParameter)

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Daily Sales (same day last month), Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            GetDateForKPI("same day last month", DateReturnedKPIStart, DateReturnedKPIEnd, DemoParameter)

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "



        ElseIf KPINameTemp = "POS Daily Sales (yesterday same day last year) - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-366)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-366)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                    " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                         "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Daily Sales (yesterday same day last year), Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-366)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-366)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                    " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                         "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Daily Sales (yesterday same day last week) - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-8)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                     "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Daily Sales (yesterday same day last week), Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-8)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                     "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "


        ElseIf KPINameTemp = "POS Daily Sales (yesterday same day last month) - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            StartDateTo01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                    " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                         "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Daily Sales (yesterday same day last month), Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            StartDateTo01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                    " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                         "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "



        ElseIf KPINameTemp = "POS Sales MTD - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Format(Now.AddDays((DayOfMonthCalc - 1) * -1 - DemoParameter), "dd/MMM/yyyy")
            StartDateTo01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                    " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                         "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Sales MTD, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Format(Now.AddDays((DayOfMonthCalc - 1) * -1 - DemoParameter), "dd/MMM/yyyy")
            StartDateTo01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                    " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                         "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "


        ElseIf KPINameTemp = "POS Sales LMTD - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Format(Now.AddDays((DayOfMonthCalc - 1) * -1 - DemoParameter), "dd/MMM/yyyy")
            StartDateTo01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                    " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                         "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Sales LMTD, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Format(Now.AddDays((DayOfMonthCalc - 1) * -1 - DemoParameter), "dd/MMM/yyyy")
            StartDateTo01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                    " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                         "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "


        ElseIf KPINameTemp = "POS Sales YTD - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            GetDateForKPI("YTD", StartDateFrom01, StartDateTo01, DemoParameter)
            'now take away 1 day
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")

            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                       " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                        "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales YTD, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"


            GetDateForKPI("YTD", StartDateFrom01, StartDateTo01, DemoParameter)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            StartDateTotext01 = Format(Now.AddDays((DemoParameter) * -1), "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                       " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                        "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"





        ElseIf KPINameTemp = "POS Sales LYTD - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"

            GetDateForKPI("LYTD", StartDateFrom01, StartDateTo01, DemoParameter)
            'changed to go back 1 day
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                       " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                        "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Sales LYTD, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"


            GetDateForKPI("LYTD", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                       " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                        "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Sales LYMTD - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            'converts demo parem to years
            If DemoParameter <> 0 Then DemoParameter = 1
            StartDateFrom01 = Now.AddYears((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddYears((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddYears(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                   " where  cast([Date Record] as date)   >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales LYMTD, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            'converts demo parem to years
            If DemoParameter <> 0 Then DemoParameter = 1
            StartDateFrom01 = Now.AddYears((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddYears((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddYears(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                   " where  cast([Date Record] as date)   >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Daily Sales Yesterday to LW Same Day Variance" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"

            GetDateForKPI("Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            GetDateForKPI("Yesterday Last Week", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & "   from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Daily Sales Yesterday to LW Same Day Variance (%)" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)

            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & "   from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays(-8)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddDays(-8)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")



            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Daily Sales Yesterday to LW Same Day Variance (%) - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays(-8)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddDays(-8)
            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Daily Sales Yesterday to LW Same Day Variance (%), Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays(-8)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddDays(-8)
            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "


        ElseIf KPINameTemp = "POS Daily Sales Yesterday to LW Same Day Variance - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays(-8)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddDays(-8)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Daily Sales Yesterday to LW Same Day Variance, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays(-8)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddDays(-8)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Daily Sales MTD to LMTD Variance - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"


            GetDateForKPI("MTD", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            GetDateForKPI("LMTD", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Daily Sales MTD to LMTD Variance, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"


            GetDateForKPI("MTD", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            GetDateForKPI("LMTD", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Daily Sales Day to LWDay Variance - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '       StartDateFrom01 = StartDateFrom01.AddDays(-1)
            '      StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddDays(-7)
            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Daily Sales Day to LWDay Variance, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '       StartDateFrom01 = StartDateFrom01.AddDays(-1)
            '      StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddDays(-7)
            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "


        ElseIf KPINameTemp = "POS Daily Sales MTD to LYMTD Variance - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((Now.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddYears(-1)
            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Daily Sales MTD to LYMTD Variance, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((Now.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddYears(-1)
            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Daily Sales YTD to LYTD Variance - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            GetDateForKPI("YTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                   " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement
            GetDateForKPI("LYTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                   " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "

            ComparisonType = "Subtraction"

        ElseIf KPINameTemp = "POS Daily Sales YTD to LYTD Variance, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            GetDateForKPI("YTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                   " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement
            GetDateForKPI("LYTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                   " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "

            ComparisonType = "Subtraction"


        ElseIf KPINameTemp = "POS Daily Sales Day to LYDay Variance - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '     StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddYears(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Daily Sales Day to LYDay Variance, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '     StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddYears(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Daily Sales MTD to LYMTD Variance (%) - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            GetDateForKPI("MTD", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

            'this is a comparison so has a second sql statement

            GetDateForKPI("LYMTD", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "


        ElseIf KPINameTemp = "POS Daily Sales MTD to LYMTD Variance (%), Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            GetDateForKPI("MTD", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

            'this is a comparison so has a second sql statement

            GetDateForKPI("LYMTD", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "


        ElseIf KPINameTemp = "POS Daily Sales YTD to LYTD Variance (%) - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            GetDateForKPI("YTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd-MMM-yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                   " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd-MMM-yyyy") &
                                    "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement
            GetDateForKPI("LYTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)
            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                   " where cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd-MMM-yyyy") &
                                    "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Daily Sales YTD to LYTD Variance (%), Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            GetDateForKPI("YTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "dd-MMM-yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                   " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd-MMM-yyyy") &
                                    "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement
            GetDateForKPI("LYTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")

            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                   " where cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd-MMM-yyyy") &
                                    "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

            ComparisonType = "Percentage"

        ElseIf KPINameTemp = "POS Sales Week to Yesterday From Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            'this goes back to Monday 
            'for testing
            '  DemoParameter = 0
            ComparisonType = "Subtraction"

            GetDateForKPI("Week to Yesterday From Monday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
        ElseIf KPINameTemp = "POS Sales Week to Yesterday From Monday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '  DemoParameter = 0

            GetDateForKPI("Week to Yesterday From Monday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Week to Yesterday From Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '  DemoParameter = 0


            GetDateForKPI("Week to Yesterday From Monday", StartDateFrom01, StartDateTo01, DemoParameter)



            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales 2 Weeks Ago to Yesterday From Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '         DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-14)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-14)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales 2 Weeks Ago to Yesterday From Monday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '   DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-14)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-14)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales 2 Weeks Ago to Yesterday From Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '   DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-14)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-14)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales 3 Weeks Ago to Yesterday From Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '         DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-21)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-21)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales 3 Weeks Ago to Yesterday From Monday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '      DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-21)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-21)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales 3 Weeks Ago to Yesterday From Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '      DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-21)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-21)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales Last Week to LW Yesterday From Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '         DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-7)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Last Week to LW Yesterday From Monday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '      DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Last Week to LW Yesterday From Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '      DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                    "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"




        ElseIf KPINameTemp = "POS Sales 4 Weeks Ago to Yesterday From Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '         DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-28)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-28)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales 4 Weeks Ago to Yesterday From Monday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '      DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-28)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-28)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales 4 Weeks Ago to Yesterday From Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '      DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-28)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-28)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales 5 Weeks Ago to Yesterday From Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '         DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-35)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-35)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales 5 Weeks Ago to Yesterday From Monday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            'this goes back to Monday 
            'for testing
            '      DemoParameter = 0
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-35)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-35)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales 5 Weeks Ago to Yesterday From Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            'this goes back to Monday 
            'for testing
            '      DemoParameter = 0
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-35)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-35)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales Last Year Week to LYW Yesterday From Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            'this goes back to Monday 
            'for testing
            '  DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = StartDateFrom01
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Sales Last Year Week to LYW Yesterday From Monday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            'this goes back to Monday 
            'for testing
            '  DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = StartDateFrom01
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Last Year Week to LYW Yesterday From Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            'this goes back to Monday 
            'for testing
            '  DemoParameter = 0

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = StartDateFrom01
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales Yesterday Last Week Variance to Week Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '        NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-7)
            StartDateTo02 = StartDateTo01.AddDays(-7)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Yesterday Last Week Variance to Week Yesterday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-7)
            StartDateTo02 = StartDateTo01.AddDays(-7)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Yesterday Last Week Variance to Week Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-7)
            StartDateTo02 = StartDateTo01.AddDays(-7)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales Yesterday 2 Weeks Ago Variance to Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '  NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-14)
            StartDateTo02 = StartDateTo01.AddDays(-14)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Yesterday 2 Weeks Ago Variance to Yesterday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '  NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-14)
            StartDateTo02 = StartDateTo01.AddDays(-14)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Yesterday 2 Weeks Ago Variance to Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '  NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-14)
            StartDateTo02 = StartDateTo01.AddDays(-14)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales Yesterday 3 Weeks Ago Variance to Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-21)
            StartDateTo02 = StartDateTo01.AddDays(-21)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Yesterday 3 Weeks Ago Variance to Yesterday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '      NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-21)
            StartDateTo02 = StartDateTo01.AddDays(-21)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Yesterday 3 Weeks Ago Variance to Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '      NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-21)
            StartDateTo02 = StartDateTo01.AddDays(-21)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales Yesterday 4 Weeks Ago Variance to Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-28)
            StartDateTo02 = StartDateTo01.AddDays(-28)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
        ElseIf KPINameTemp = "POS Sales Yesterday 4 Weeks Ago Variance to Yesterday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '          NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-28)
            StartDateTo02 = StartDateTo01.AddDays(-28)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Yesterday 4 Weeks Ago Variance to Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '          NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-28)
            StartDateTo02 = StartDateTo01.AddDays(-28)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales Yesterday Last Week Variance to Week Yesterday %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '       NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-7)
            StartDateTo02 = StartDateTo01.AddDays(-7)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Yesterday Last Week Variance to Week Yesterday % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-7)
            StartDateTo02 = StartDateTo01.AddDays(-7)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Yesterday Last Week Variance to Week Yesterday %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-7)
            StartDateTo02 = StartDateTo01.AddDays(-7)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales Yesterday 2 Weeks Ago Variance to Yesterday %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '           NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-14)
            StartDateTo02 = StartDateTo01.AddDays(-14)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Yesterday 2 Weeks Ago Variance to Yesterday % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '          NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-14)
            StartDateTo02 = StartDateTo01.AddDays(-14)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Yesterday 2 Weeks Ago Variance to Yesterday %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '          NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-14)
            StartDateTo02 = StartDateTo01.AddDays(-14)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales Yesterday 3 Weeks Ago Variance to Yesterday %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '    NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-21)
            StartDateTo02 = StartDateTo01.AddDays(-21)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Yesterday 3 Weeks Ago Variance to Yesterday % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-21)
            StartDateTo02 = StartDateTo01.AddDays(-21)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Yesterday 3 Weeks Ago Variance to Yesterday %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-21)
            StartDateTo02 = StartDateTo01.AddDays(-21)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales Yesterday 4 Weeks Ago Variance to Yesterday %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-28)
            StartDateTo02 = StartDateTo01.AddDays(-28)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Yesterday 4 Weeks Ago Variance to Yesterday % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1

            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-28)
            StartDateTo02 = StartDateTo01.AddDays(-28)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Yesterday 4 Weeks Ago Variance to Yesterday %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1

            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-28)
            StartDateTo02 = StartDateTo01.AddDays(-28)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance LMTD Sales" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"



            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            GetDateForKPI("LMTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance LMTD Sales - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-1)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            GetDateForKPI("LMTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance LMTD Sales, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-1)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            GetDateForKPI("LMTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"




        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 2 Months Ago MTD Sales" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-2)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-2)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 2 Months Ago MTD Sales - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-2)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-2)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 2 Months Ago MTD Sales, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-2)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-2)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"




        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 3 Months Ago MTD Sales" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-3)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-3)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 3 Months Ago MTD Sales - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-3)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-3)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 3 Months Ago MTD Sales, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-3)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-3)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 4 Months Ago MTD Sales" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            Dim test01 As Date = "3-Oct-2017"

            test01 = test01.AddDays((DemoParameter) * -1)
            test01 = test01.AddMonths(-4)
            test01 = test01.AddDays((test01.Day * -1) + 1)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-4)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-4)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 4 Months Ago MTD Sales - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-4)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-4)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 4 Months Ago MTD Sales, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-4)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-4)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance LMTD Sales %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-1)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            GetDateForKPI("LMTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection




        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance LMTD Sales % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-1)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            GetDateForKPI("LMTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance LMTD Sales %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)


            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-1)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            GetDateForKPI("LMTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 2 Months Ago MTD Sales %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-2)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-2)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 2 Months Ago MTD Sales % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-2)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-2)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 2 Months Ago MTD Sales %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-2)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-2)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 3 Months Ago MTD Sales %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-3)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-3)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 3 Months Ago MTD Sales % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-3)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-3)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 3 Months Ago MTD Sales %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-3)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-3)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 4 Months Ago MTD Sales %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-4)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-4)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 4 Months Ago MTD Sales % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-4)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-4)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"
        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance 4 Months Ago MTD Sales %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "

            'this is a comparison so has a second sql statement

            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-4)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)

            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddMonths(-4)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

            '*** 13oct2017
        ElseIf KPINameTemp = "POS Sales MTD Yesterday LYMTD Sales - Total" Or KPINameTemp = "POS Sales MTD Yesterday Variance LYMTD Sales - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays(-1)

            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((Now.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateTo02 = Now.AddDays(-1)
            StartDateTo02 = StartDateTo02.AddYears(-1)

            GetDateForKPI("LYMTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales MTD Yesterday LYMTD Sales, Total" Or KPINameTemp = "POS Sales MTD Yesterday Variance LYMTD Sales, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays(-1)


            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")




            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((Now.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateTo02 = Now.AddDays(-1)
            StartDateTo02 = StartDateTo02.AddYears(-1)

            GetDateForKPI("LYMTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales MTD Yesterday LYMTD Sales" Or KPINameTemp = "POS Sales MTD Yesterday Variance LYMTD Sales" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays(-1)

            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateTo02 = Now.AddDays(-1)
            StartDateTo02 = StartDateTo02.AddYears(-1)

            GetDateForKPI("LYMTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance LYMTD Sales %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays(-1)

            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateTo02 = Now.AddDays(-1)
            StartDateTo02 = StartDateTo02.AddYears(-1)

            GetDateForKPI("LYMTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance LYMTD Sales % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays(-1)

            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateTo02 = Now.AddDays(-1)
            StartDateTo02 = StartDateTo02.AddYears(-1)

            GetDateForKPI("LYMTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales MTD Yesterday Variance LYMTD Sales %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays(-1)

            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateTo02 = Now.AddDays(-1)
            StartDateTo02 = StartDateTo02.AddYears(-1)
            GetDateForKPI("LYMTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"




        ElseIf KPINameTemp = "POS Sales MTD Yesterday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays(-1)

            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales MTD Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays(-1)

            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)



            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales MTD Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)



            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            '***
        ElseIf KPINameTemp = "POS Sales LMTD Yesterday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)



            GetDateForKPI("LMTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)



            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales LMTD Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            GetDateForKPI("LMTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales LMTD Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)



            GetDateForKPI("LMTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            '***
        ElseIf KPINameTemp = "POS Sales MTD 2 Months Ago Yesterday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-2)
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-2)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales MTD 2 Months Ago Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-2)
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-2)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales MTD 2 Months Ago Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-2)
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-2)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            '***
        ElseIf KPINameTemp = "POS Sales MTD 3 Months Ago Yesterday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-3)
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-3)



            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
        ElseIf KPINameTemp = "POS Sales MTD 3 Months Ago Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-3)
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-3)



            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales MTD 3 Months Ago Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-3)
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-3)

            '       GetDateForKPI("MTD 3 Months Ago Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)



            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            '***
        ElseIf KPINameTemp = "POS Sales MTD 4 Months Ago Yesterday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-4)
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-4)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
        ElseIf KPINameTemp = "POS Sales MTD 4 Months Ago Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-4)
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-4)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales MTD 4 Months Ago Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-4)
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddMonths(-4)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            '***
        ElseIf KPINameTemp = "POS Sales LYMTD Yesterday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            GetDateForKPI("LYMTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales LYMTD Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            GetDateForKPI("LYMTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales LYMTD Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            GetDateForKPI("LYMTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Yesterday Last Week" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Yesterday Last Week - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-7)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Yesterday Last Week, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-7)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"



            '*****
        ElseIf KPINameTemp = "POS Sales Yesterday 2 Weeks Ago" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-14)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-14)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Yesterday 2 Weeks Ago - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-14)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-14)

            GetDateForKPI("Yesterday 2 Weeks Ago", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Yesterday 2 Weeks Ago, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-14)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-14)

            GetDateForKPI("Yesterday 2 Weeks Ago", StartDateFrom01, StartDateTo01, DemoParameter)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            '*****
        ElseIf KPINameTemp = "POS Sales Yesterday 3 Weeks Ago" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-21)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-21)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Yesterday 3 Weeks Ago - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-21)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-21)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Yesterday 3 Weeks Ago, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-21)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-21)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            '*****
        ElseIf KPINameTemp = "POS Sales Yesterday 4 Weeks Ago" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '     NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-28)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-28)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Yesterday 4 Weeks Ago - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-28)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-28)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Yesterday 4 Weeks Ago, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddDays(-28)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-28)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            '****
        ElseIf KPINameTemp = "POS Sales Last Full Week from Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            'this goes back to Monday 
            'for testing
            '  DemoParameter = 0
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(6)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Last Full Week from Monday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '  DemoParameter = 0
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)

            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(6)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Last Full Week from Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '  DemoParameter = 0
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)

            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(6)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            '****
        ElseIf KPINameTemp = "POS Sales Last 2 Full Weeks from Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            'this goes back to Monday 
            'for testing
            '  DemoParameter = 0
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(6)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Last 2 Full Weeks from Monday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '  DemoParameter = 0

            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(6)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales Last 2 Full Weeks from Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '  DemoParameter = 0

            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(6)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            '****
        ElseIf KPINameTemp = "POS Sales Last 3 Full Weeks from Monday" Then
            'this goes back to Monday 
            'for testing
            '  DemoParameter = 0
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(6)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Last 3 Full Weeks from Monday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '  DemoParameter = 0

            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(6)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Last 3 Full Weeks from Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '  DemoParameter = 0

            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(6)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            '****
        ElseIf KPINameTemp = "POS Sales Last 4 Full Weeks from Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            'this goes back to Monday 
            'for testing
            '  DemoParameter = 0
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(6)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Last 4 Full Weeks from Monday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '  DemoParameter = 0

            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(6)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales Last 4 Full Weeks from Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            'this goes back to Monday 

            'for testing
            '  DemoParameter = 0

            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(6)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(-7)
            StartDateTo01 = StartDateTo01.AddDays(-7)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "" & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales Last Full Month - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Last Full Month, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales Last Full Month" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            '****
        ElseIf KPINameTemp = "POS Sales Last 2 Full Months - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-2)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Last 2 Full Months, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-2)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales Last 2 Full Months" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-2)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            '****
        ElseIf KPINameTemp = "POS Sales Last 3 Full Months - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-3)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Last 3 Full Months, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-3)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales Last 3 Full Months" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-3)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            '****
        ElseIf KPINameTemp = "POS Sales Last 4 Full Months - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-4)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Last 4 Full Months, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-4)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales Last 4 Full Months" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-4)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales Last Year Full Month - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)



            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Last Year Full Month, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)



            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales Last Year Full Month" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)

            StartDateTo01 = StartDateFrom01
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

            StartDateTo01 = StartDateTo01.AddDays(DaysintheMonth)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            '****
        ElseIf KPINameTemp = "POS Sales Last Year Full Week from Monday - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = StartDateFrom01
            StartDateTo01 = StartDateTo01.AddDays(6)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
        ElseIf KPINameTemp = "POS Sales Last Year Full Week from Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = StartDateFrom01
            StartDateTo01 = StartDateTo01.AddDays(6)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales Last Year Full Week from Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '   StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)

            StartDateTo01 = StartDateFrom01
            StartDateTo01 = StartDateTo01.AddDays(6)


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            '****
        ElseIf KPINameTemp = "POS WTD Yesterday % of Last Full Week" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & "   from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateTo02 = StartDateFrom02.AddDays(6)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS WTD Yesterday % of Last Full Week - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Reverse Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateTo02 = StartDateFrom02.AddDays(6)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "
        ElseIf KPINameTemp = "POS WTD Yesterday % of Last Full Week, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Reverse Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateTo02 = StartDateFrom02.AddDays(6)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "

            '****
        ElseIf KPINameTemp = "POS WTD Yesterday % of Last 2 Full Weeks" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & "   from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateTo02 = StartDateFrom02.AddDays(6)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
        ElseIf KPINameTemp = "POS WTD Yesterday % of Last 2 Full Weeks - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Reverse Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateTo02 = StartDateFrom02.AddDays(6)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS WTD Yesterday % of Last 2 Full Weeks, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Reverse Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateTo02 = StartDateFrom02.AddDays(6)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "

            '****
        ElseIf KPINameTemp = "POS WTD Yesterday % of Last 3 Full Weeks" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & "   from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateFrom02 = StartDateFrom02.AddDays(-14)
            StartDateTo02 = StartDateFrom02.AddDays(6)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                         " where cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS WTD Yesterday % of Last 3 Full Weeks - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Reverse Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateFrom02 = StartDateFrom02.AddDays(-14)
            StartDateTo02 = StartDateFrom02.AddDays(6)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS WTD Yesterday % of Last 3 Full Weeks, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Reverse Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateFrom02 = StartDateFrom02.AddDays(-14)
            StartDateTo02 = StartDateFrom02.AddDays(6)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "


            '****
        ElseIf KPINameTemp = "POS WTD Yesterday % of Last 4 Full Weeks" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & "   from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateFrom02 = StartDateFrom02.AddDays(-21)
            StartDateTo02 = StartDateFrom02.AddDays(6)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS WTD Yesterday % of Last 4 Full Weeks - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Reverse Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateFrom02 = StartDateFrom02.AddDays(-21)
            StartDateTo02 = StartDateFrom02.AddDays(6)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS WTD Yesterday % of Last 4 Full Weeks, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Reverse Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01
            StartDateFrom02 = StartDateFrom02.AddDays(-7)
            StartDateFrom02 = StartDateFrom02.AddDays(-21)
            StartDateTo02 = StartDateFrom02.AddDays(6)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "


            '****
        ElseIf KPINameTemp = "POS WTD Yesterday % of Last Year Full Week" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '    StartDateFrom01 = StartDateFrom01.AddYears(-1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '       StartDateTo01 = StartDateTo01.AddYears(-1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & "   from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddYears(-1)
            NumberDaysBack = StartDateFrom02.DayOfWeek - 1
            StartDateFrom02 = StartDateFrom02.AddDays(NumberDaysBack * -1)

            '        StartDateFrom02 = StartDateFrom02.AddDays(-7)
            'StartDateFrom02 = StartDateFrom02.AddDays(-21)
            StartDateTo02 = StartDateFrom02.AddDays(6)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                         " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS WTD Yesterday % of Last Year Full Week - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '    StartDateFrom01 = StartDateFrom01.AddYears(-1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '       StartDateTo01 = StartDateTo01.AddYears(-1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddYears(-1)
            NumberDaysBack = StartDateFrom02.DayOfWeek - 1
            StartDateFrom02 = StartDateFrom02.AddDays(NumberDaysBack * -1)

            '        StartDateFrom02 = StartDateFrom02.AddDays(-7)
            'StartDateFrom02 = StartDateFrom02.AddDays(-21)
            StartDateTo02 = StartDateFrom02.AddDays(6)
        ElseIf KPINameTemp = "POS WTD Yesterday % of Last Year Full Week, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            '    StartDateFrom01 = StartDateFrom01.AddYears(-1)
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            '       StartDateTo01 = StartDateTo01.AddYears(-1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' "
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddYears(-1)
            NumberDaysBack = StartDateFrom02.DayOfWeek - 1
            StartDateFrom02 = StartDateFrom02.AddDays(NumberDaysBack * -1)

            '        StartDateFrom02 = StartDateFrom02.AddDays(-7)
            'StartDateFrom02 = StartDateFrom02.AddDays(-21)
            StartDateTo02 = StartDateFrom02.AddDays(6)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                         " where cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                              "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "



        ElseIf KPINameTemp = "POS MTD Yesterday % of Last Full Month" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((Now.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)

            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)

            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS MTD Yesterday % of Last Full Month - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)

            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)

            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS MTD Yesterday % of Last Full Month, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)

            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)

            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS MTD Yesterday % of Last 2 Full Months" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)

            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)

            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS MTD Yesterday % of Last 2 Full Months - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)


            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)

            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS MTD Yesterday % of Last 2 Full Months, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)


            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)

            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS MTD Yesterday % of Last 3 Full Months" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)

            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)

            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS MTD Yesterday % of Last 3 Full Months - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)

            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)

            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS MTD Yesterday % of Last 3 Full Months, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)

            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)

            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS MTD Yesterday % of Last 4 Full Months" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)

            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)

            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS MTD Yesterday % of Last 4 Full Months - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)

            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)

            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS MTD Yesterday % of Last 4 Full Months, Total" Then

            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)
            StartDateFrom02 = StartDateFrom02.AddMonths(-1)

            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)

            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"




        ElseIf KPINameTemp = "POS MTD Yesterday % of Last Year Full Month" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)
            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS MTD Yesterday % of Last Year Full Month - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)
            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)


            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS MTD Yesterday % of Last Year Full Month, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Reverse Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")


            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateFrom02 = StartDateFrom02.AddDays((StartDateFrom02.Day * -1) + 1)
            StartDateTo02 = StartDateFrom02
            'works out how many days in the month
            DaysintheMonth = DateTime.DaysInMonth(StartDateFrom02.Year, StartDateFrom02.Month)
            StartDateTo02 = StartDateTo02.AddDays(DaysintheMonth)
            StartDateTo02 = StartDateTo02.AddDays(-1)


            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")


            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"




        ElseIf KPINameTemp = "POS Daily Sales Yesterday to LYDay Variance" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateFrom02 = StartDateFrom02.AddDays(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddYears(-1)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Daily Sales Yesterday to LYDay Variance - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateFrom02 = StartDateFrom02.AddDays(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddYears(-1)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'  "

        ElseIf KPINameTemp = "POS Daily Sales Yesterday to LYDay Variance, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateFrom02 = StartDateFrom02.AddDays(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddYears(-1)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'  "



            '***
        ElseIf KPINameTemp = "POS Daily Sales Yesterday to LYDay Variance %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateFrom02 = StartDateFrom02.AddDays(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddYears(-1)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Daily Sales Yesterday to LYDay Variance % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateFrom02 = StartDateFrom02.AddDays(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddYears(-1)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'  "


        ElseIf KPINameTemp = "POS Daily Sales Yesterday to LYDay Variance %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            'this is a comparison so has a second sql statement
            StartDateFrom02 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom02 = StartDateFrom02.AddYears(-1)
            StartDateFrom02 = StartDateFrom02.AddDays(-1)
            StartDateTo02 = Now.AddDays((DemoParameter) * -1)
            StartDateTo02 = StartDateTo02.AddYears(-1)
            StartDateTo02 = StartDateTo02.AddDays(-1)

            StartDateFromtext02 = Format(StartDateFrom02, "dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "dd/MMM/yyyy")

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'  "


            '****
        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 2 Weeks Ago WTD Sales" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-14)
            StartDateTo02 = StartDateTo01.AddDays(-14)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 2 Weeks Ago WTD Sales - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-14)
            StartDateTo02 = StartDateTo01.AddDays(-14)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 2 Weeks Ago WTD Sales, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-14)
            StartDateTo02 = StartDateTo01.AddDays(-14)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


            '****
        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 2 Weeks Ago WTD Sales %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-14)
            StartDateTo02 = StartDateTo01.AddDays(-14)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 2 Weeks Ago WTD Sales % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-14)
            StartDateTo02 = StartDateTo01.AddDays(-14)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 2 Weeks Ago WTD Sales %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-14)
            StartDateTo02 = StartDateTo01.AddDays(-14)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



            '****
        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 3 Weeks Ago WTD Sales" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-21)
            StartDateTo02 = StartDateTo01.AddDays(-21)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 3 Weeks Ago WTD Sales - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-21)
            StartDateTo02 = StartDateTo01.AddDays(-21)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 3 Weeks Ago WTD Sales, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-21)
            StartDateTo02 = StartDateTo01.AddDays(-21)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 3 Weeks Ago WTD Sales %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-21)
            StartDateTo02 = StartDateTo01.AddDays(-21)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 3 Weeks Ago WTD Sales % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-21)
            StartDateTo02 = StartDateTo01.AddDays(-21)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 3 Weeks Ago WTD Sales %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-21)
            StartDateTo02 = StartDateTo01.AddDays(-21)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


            '****
        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 4 Weeks Ago WTD Sales" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-28)
            StartDateTo02 = StartDateTo01.AddDays(-28)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 4 Weeks Ago WTD Sales - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-28)
            StartDateTo02 = StartDateTo01.AddDays(-28)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 4 Weeks Ago WTD Sales, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-28)
            StartDateTo02 = StartDateTo01.AddDays(-28)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 4 Weeks Ago WTD Sales %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-28)
            StartDateTo02 = StartDateTo01.AddDays(-28)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 4 Weeks Ago WTD Sales % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-28)
            StartDateTo02 = StartDateTo01.AddDays(-28)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance 4 Weeks Ago WTD Sales %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            NumberDaysBack = Now.DayOfWeek - 1
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement
            StartDateFrom02 = StartDateFrom01.AddDays(-28)
            StartDateTo02 = StartDateTo01.AddDays(-28)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance Last Year WTD Sales %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


            GetDateForKPI("WTD Last Year", StartDateFrom02, StartDateTo02, DemoParameter)


            'this is a comparison so has a second sql statement
            '     StartDateFrom02 = StartDateFrom01.AddDays(-28)
            '    StartDateTo02 = StartDateTo01.AddDays(-28)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance Last Year WTD Sales % - Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement

            GetDateForKPI("WTD Last Year", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance Last Year WTD Sales %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement

            GetDateForKPI("WTD Last Year", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


            '****
        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance Last Year WTD from Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            GetDateForKPI("WTD Last Year", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance Last Year WTD from Monday – Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement

            GetDateForKPI("WTD Last Year", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"
        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance Last Year WTD from Monday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement

            GetDateForKPI("WTD Last Year", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance Last Year WTD from Monday %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            GetDateForKPI("WTD Last Year", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance Last Year WTD from Monday % – Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement

            GetDateForKPI("WTD Last Year", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance Last Year WTD from Monday %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement

            GetDateForKPI("WTD Last Year", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


            '****
        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance LWTD Sales from Monday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"
            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            GetDateForKPI("LWTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance LWTD Sales from Monday – Total" Or
            UCase(KPINameTemp) = "POS SALES WTD YESTERDAY VARIANCE LWTD SALES FROM MONDAY – TOTAL" Or
            UCase(KPINameTemp) = "POS Sales WTD Yesterday Variance LWTD Sales from Monday, Total" Then

            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            '      KPINameTemp = "POS Sales WTD Yesterday Variance LWTD Sales from Monday, Total"

            ComparisonType = "Subtraction"
            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) As TotalSales, sum(COGS) As COGSTot " & " from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement

            GetDateForKPI("LWTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance LWTD Sales from Monday, Total" Or
            UCase(KPINameTemp) = "POS SALES WTD YESTERDAY VARIANCE LWTD SALES FROM MONDAY, TOTAL" Or
            UCase(KPINameTemp) = "POS Sales WTD Yesterday Variance LWTD Sales from Monday, Total" Then

            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            '      KPINameTemp = "POS Sales WTD Yesterday Variance LWTD Sales from Monday, Total"

            ComparisonType = "Subtraction"
            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) As TotalSales, sum(COGS) As COGSTot " & " from [POSSales] " &
                                 " where cast([Date Record] as date)  >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement

            GetDateForKPI("LWTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)
            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date)  >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"



        ElseIf KPINameTemp = "POS Sales WTD Yesterday Variance LWTD Sales from Monday %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"
            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot,  " & MeasuresSQLSelection & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            GetDateForKPI("LWTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot, " & MeasuresSQLSelection & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date) <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf UCase(KPINameTemp) = "POS SALES WTD YESTERDAY VARIANCE LWTD SALES FROM MONDAY % – TOTAL" Or
            UCase(KPINameTemp) = "POS SALES WTD YESTERDAY VARIANCE LWTD SALES FROM MONDAY % – TOTAL" Or
            UCase(KPINameTemp) = "POS SALES WTD YESTERDAY VARIANCE LWTD SALES FROM MONDAY %, TOTAL" Then

            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            KPINameTemp = "POS Sales WTD Yesterday Variance LWTD Sales from Monday %, Total"

            ComparisonType = "Percentage"

            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement

            GetDateForKPI("LWTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"

        ElseIf UCase(KPINameTemp) = "POS SALES WTD YESTERDAY VARIANCE LWTD SALES FROM MONDAY %, TOTAL" Or
            UCase(KPINameTemp) = "POS SALES WTD YESTERDAY VARIANCE LWTD SALES FROM MONDAY %, TOTAL" Or
            UCase(KPINameTemp) = "POS SALES WTD YESTERDAY VARIANCE LWTD SALES FROM MONDAY %, TOTAL" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)



            KPINameTemp = "POS Sales WTD Yesterday Variance LWTD Sales from Monday %, Total"

            ComparisonType = "Percentage"

            GetDateForKPI("WTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & " from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"
            'this is a comparison so has a second sql statement

            GetDateForKPI("LWTD Yesterday", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, sum(COGS) as COGSTot " & "  from [POSSales] " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Basket Size, Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01




            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Quantity Sold])/(count(distinct [Reference Number])) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

            ' where  cast([Date Record] as date) >= '11/Jan/2018' and  cast([Date Record] as date)  <= '11/Jan/2018'

        ElseIf KPINameTemp = "POS Basket Size, Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Quantity Sold])/(count(distinct [Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Basket Size, Yesterday last week, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Quantity Sold])/(count(distinct [Reference Number])) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

            ' where  cast([Date Record] as date) >= '11/Jan/2018' and  cast([Date Record] as date)  <= '11/Jan/2018'

        ElseIf KPINameTemp = "POS Basket Size, Yesterday last week" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)

            StartDateTo01 = StartDateFrom01

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Quantity Sold])/(count(distinct [Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Sales, Number of Invoices, Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select count(distinct [Reference Number]) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales, Number of Invoices, Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select count(distinct [Reference Number]) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales, Number of Invoices, Yesterday last week, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select count(distinct [Reference Number]) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales, Number of Invoices, Yesterday last week" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select count(distinct [Reference Number]) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection
            '***

        ElseIf KPINameTemp = "POS Sales, Number of Items Sold, Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Quantity Sold]) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales, Number of Items Sold, Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Quantity Sold]) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Sales, Number of Items Sold, Yesterday last week, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Quantity Sold]) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Sales, Number of Items Sold, Yesterday last week" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Quantity Sold]) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Basket Average Revenue (excluding tax), Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales])/(count(distinct [Reference Number])) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'  "
            Dim holder As Decimal = 0

        ElseIf KPINameTemp = "POS Basket Average Revenue (excluding tax), Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales])/(count(distinct [Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            Dim holder As Decimal = 0


        ElseIf KPINameTemp = "POS Basket Average Revenue (excluding tax), Yesterday last week, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)

            StartDateTo01 = StartDateFrom01

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales])/(count(distinct [Reference Number])) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'  "

        ElseIf KPINameTemp = "POS Basket Average Revenue (excluding tax), Yesterday last week" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)

            StartDateTo01 = StartDateFrom01

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales])/(count(distinct [Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Customer Count, Yesterday, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select count(distinct([Reference Number])) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Customer Count, Yesterday" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select count(distinct([Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Customer Count, Yesterday last week, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select count(distinct([Reference Number])) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


        ElseIf KPINameTemp = "POS Customer Count, Yesterday last week" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select count(distinct([Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Customer Count, Yesterday variance to last week" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)

            ComparisonType = "Subtraction"

            GetDateForKPI("Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select count(distinct([Reference Number])) As TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] As Date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            GetDateForKPI("Yesterday Last Week", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select count(distinct([Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Customer Count, Yesterday variance to last week, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            GetDateForKPI("Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select count(distinct([Reference Number])) As TotalSales  " & " from [POSSales]  " &
                                 " where  cast([Date Record] As Date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'  "

            'this is a comparison so has a second sql statement

            GetDateForKPI("Yesterday Last Week", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select count(distinct([Reference Number])) as TotalSales  " & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'  "

        ElseIf KPINameTemp = "POS Customer Count, Yesterday variance to last week %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            GetDateForKPI("Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select count(distinct([Reference Number])) As TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] As Date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'this is a comparison so has a second sql statement

            GetDateForKPI("Yesterday Last Week", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select count(distinct([Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Customer Count, Yesterday variance to last week %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            GetDateForKPI("Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select count(distinct([Reference Number])) As TotalSales  " & " from [POSSales]  " &
                                 " where  cast([Date Record] As Date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'  "

            'this is a comparison so has a second sql statement

            GetDateForKPI("Yesterday Last Week", StartDateFrom02, StartDateTo02, DemoParameter)


            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select count(distinct([Reference Number])) as TotalSales  " & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "'  "


        ElseIf KPINameTemp = "POS Basket Size, Yesterday variance to last week" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Quantity Sold])/(count(distinct [Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            StartDateFrom02 = Now.AddDays(-8)
            StartDateTo02 = Now.AddDays(-8)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Quantity Sold])/(count(distinct [Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            ' where  cast([Date Record] as date) >= '11/Jan/2018' and  cast([Date Record] as date)  <= '11/Jan/2018'

        ElseIf KPINameTemp = "POS Basket Size, Yesterday variance to last week, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Quantity Sold])/(count(distinct [Reference Number])) as TotalSales  " & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'  "


            StartDateFrom02 = Now.AddDays(-8)
            StartDateTo02 = Now.AddDays(-8)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Quantity Sold])/(count(distinct [Reference Number])) as TotalSales  " & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "

        ElseIf KPINameTemp = "POS Basket Size, Yesterday variance to last week %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01


            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Quantity Sold])/(count(distinct [Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            StartDateFrom02 = Now.AddDays(-8)
            StartDateTo02 = Now.AddDays(-8)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Quantity Sold])/(count(distinct [Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            ' where  cast([Date Record] as date) >= '11/Jan/2018' and  cast([Date Record] as date)  <= '11/Jan/2018'

        ElseIf KPINameTemp = "POS Basket Size, Yesterday variance to last week %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            '  ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Quantity Sold])/(count(distinct [Reference Number])) as TotalSales  " & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'  "


            StartDateFrom02 = Now.AddDays(-8)
            StartDateTo02 = Now.AddDays(-8)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Quantity Sold])/(count(distinct [Reference Number])) as TotalSales  " & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "


        ElseIf KPINameTemp = "POS Basket Average Revenue (excluding tax), Yesterday variance to last week, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales])/(count(distinct [Reference Number])) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'  "

            StartDateFrom02 = Now.AddDays(-8)
            StartDateTo02 = Now.AddDays(-8)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales])/(count(distinct [Reference Number])) as TotalSales " & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "



        ElseIf KPINameTemp = "POS Basket Average Revenue (excluding tax), Yesterday variance to last week" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Subtraction"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales])/(count(distinct [Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            StartDateFrom02 = Now.AddDays(-8)
            StartDateTo02 = Now.AddDays(-8)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales])/(count(distinct [Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

        ElseIf KPINameTemp = "POS Basket Average Revenue (excluding tax), Yesterday variance to last week %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales])/(count(distinct [Reference Number])) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'  "

            StartDateFrom02 = Now.AddDays(-8)
            StartDateTo02 = Now.AddDays(-8)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales])/(count(distinct [Reference Number])) as TotalSales " & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' "



        ElseIf KPINameTemp = "POS Basket Average Revenue (excluding tax), Yesterday variance to last week %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            ComparisonType = "Percentage"

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales])/(count(distinct [Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            StartDateFrom02 = Now.AddDays(-8)
            StartDateTo02 = Now.AddDays(-8)

            StartDateFromtext02 = Format(StartDateFrom02, "ddd dd/MMM/yyyy")
            StartDateTotext02 = Format(StartDateTo02, "ddd dd/MMM/yyyy")
            SelectionStatement02 = "Select sum([Total Net Sales])/(count(distinct [Reference Number])) as TotalSales,  " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom02, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo02, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection


        ElseIf KPINameTemp = "POS Month End Projection, Total" Then

            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)
            GetDateForKPI("MTD", StartDateFrom01, StartDateTo01, DemoParameter)
            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")
            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"

            'if the first of the month then all predictions
            If Now.Day = 1 Then
                SelectionStatement01 = ""
            End If

            Dim DaysInMonth As Int16 = System.DateTime.DaysInMonth(StartDateTo01.Year, StartDateTo01.Month)
            SelectionStatement02 = "Select sum([predicted_value_numeric]) as TotalSales from [Predictions] " &
                                " where  cast([predicted_date] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                     "' and  cast([predicted_date] as date)  <= '" & DaysInMonth & Format(StartDateTo01, "/MMM/yyyy") &
                                     "' and [predictions_name] ='Total Net Sales - best fit' and  [prediction_active] ='1'"
            ComparisonType = "Addition"


        ElseIf KPINameTemp = "POS Year End Projection, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01
            GetDateForKPI("YTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'"


            SelectionStatement02 = "Select sum([predicted_value_numeric]) as TotalSales from [Predictions] " &
                                " where  cast([predicted_date] as date) >= '" & Format(StartDateTo01.AddDays(1), "dd/MMM/yyyy") &
                                     "' and  cast([predicted_date] as date)  <= '" & Format(StartDateTo01, "31/Dec/yyyy") &
                                     "'and [predictions_name] ='Total Net Sales - best fit' and cast([prediction_created_on] as date)='" & Format(Now, "dd/MMM/yyyy") & "'"

            ComparisonType = "Addition"

        ElseIf KPINameTemp = "POS Month End Projection" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01
            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'needs work for model name
            Dim DaysInMonth As Int16 = System.DateTime.DaysInMonth(Now.Year, Now.Month)

            SelectionStatement02 = "Select sum([predicted_value_numeric]) as TotalSales , " & MeasuresSQLSelection & " from [Predictions] " &
                                " where  cast([predicted_date] as date) >= '" & Format(StartDateTo01.AddDays(1), "dd/MMM/yyyy") &
                                     "' and  cast([predicted_date] as date)  <= '" & DaysInMonth & Format(StartDateTo01, "/MMM/yyyy") &
                                     "' and [predictions_name] ='Total Net Sales - best fit' and cast([prediction_created_on] as date)='" &
                                     Format(Now, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            ComparisonType = "Addition"

        ElseIf KPINameTemp = "POS Month End Projection to Last Projection Variance %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01
            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'needs work for model name
            Dim DaysInMonth As Int16 = System.DateTime.DaysInMonth(Now.Year, Now.Month)

            SelectionStatement01Sub = "Select sum([predicted_value_numeric]) as TotalSales , " & MeasuresSQLSelection & " from [Predictions] " &
                                " where  cast([predicted_date] as date) >= '" & Format(StartDateTo01.AddDays(1), "dd/MMM/yyyy") &
                                     "' and  cast([predicted_date] as date)  <= '" & DaysInMonth & Format(StartDateTo01, "/MMM/yyyy") &
                                     "' and [predictions_name] ='Total Net Sales - best fit' and cast([prediction_created_on] as date)='" &
                                     Format(Now, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            '2nd selection

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            Dim DateTemp As Date = "13-Feb-2018"

            SelectionStatement02Sub = "Select sum([predicted_value_numeric]) as TotalSales , " & MeasuresSQLSelection & " from [Predictions] " &
                                " where  cast([predicted_date] as date) >= '" & Format(StartDateTo01.AddDays(1), "dd/MMM/yyyy") &
                                     "' and  cast([predicted_date] as date)  <= '" & DaysInMonth & Format(StartDateTo01, "/MMM/yyyy") &
                                     "' and [predictions_name] ='Total Net Sales - best fit' and cast([prediction_created_on] as date)='" &
                                     Format(DateTemp, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            ComparisonType = "Percentage"

        ElseIf KPINameTemp = "POS Year End Projection to Last Projection Variance %" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01
            GetDateForKPI("YTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            'needs work for model name
            Dim DaysInMonth As Int16 = System.DateTime.DaysInMonth(Now.Year, Now.Month)

            SelectionStatement01Sub = "Select sum([predicted_value_numeric]) as TotalSales , " & MeasuresSQLSelection & " from [Predictions] " &
                                " where  cast([predicted_date] as date) >= '" & Format(StartDateTo01.AddDays(1), "dd/MMM/yyyy") &
                                     "' and  cast([predicted_date] as date)  <= '" & "31/Dec/" & Format(StartDateTo01, "yyyy") &
                                     "' and [predictions_name] ='Total Net Sales - best fit' and cast([prediction_created_on] as date)='" &
                                     Format(Now, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            '2nd selection

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales, " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            Dim DateTemp As Date = "13-Feb-2018"

            SelectionStatement02Sub = "Select sum([predicted_value_numeric]) as TotalSales , " & MeasuresSQLSelection & " from [Predictions] " &
                                " where  cast([predicted_date] as date) >= '" & Format(StartDateTo01.AddDays(1), "dd/MMM/yyyy") &
                                     "' and  cast([predicted_date] as date)  <= '" & "31/Dec/" & Format(StartDateTo01, "yyyy") &
                                     "' and [predictions_name] ='Total Net Sales - best fit' and cast([prediction_created_on] as date)='" &
                                     Format(DateTemp, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            ComparisonType = "Percentage"




        ElseIf KPINameTemp = "POS Month End Projection to Last Projection Variance %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01
            GetDateForKPI("YTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'  "

            'needs work for model name
            Dim DaysInMonth As Int16 = System.DateTime.DaysInMonth(Now.Year, Now.Month)

            SelectionStatement01Sub = "Select sum([predicted_value_numeric]) as TotalSales  from [Predictions] " &
                                " where  cast([predicted_date] as date) >= '" & Format(StartDateTo01.AddDays(1), "dd/MMM/yyyy") &
                                     "' and  cast([predicted_date] as date)  <= '" & DaysInMonth & Format(StartDateTo01, "/MMM/yyyy") &
                                     "' and [predictions_name] ='Total Net Sales - best fit' and cast([prediction_created_on] as date)='" &
                                     Format(Now, "dd/MMM/yyyy") & "' "

            '2nd selection

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'  "

            Dim DateTemp As Date = "13-Feb-2018"

            SelectionStatement02Sub = "Select sum([predicted_value_numeric]) as TotalSales  from [Predictions] " &
                                " where  cast([predicted_date] as date) >= '" & Format(StartDateTo01.AddDays(1), "dd/MMM/yyyy") &
                                     "' and  cast([predicted_date] as date)  <= '" & DaysInMonth & Format(StartDateTo01, "/MMM/yyyy") &
                                     "' and [predictions_name] ='Total Net Sales - best fit' and cast([prediction_created_on] as date)='" &
                                     Format(DateTemp, "dd/MMM/yyyy") & "'  "

            ComparisonType = "Percentage"


        ElseIf KPINameTemp = "POS Year End Projection to Last Projection Variance %, Total" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01
            GetDateForKPI("MTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'  "

            'needs work for model name
            Dim DaysInMonth As Int16 = System.DateTime.DaysInMonth(Now.Year, Now.Month)

            SelectionStatement01Sub = "Select sum([predicted_value_numeric]) as TotalSales  from [Predictions] " &
                                " where  cast([predicted_date] as date) >= '" & Format(StartDateTo01.AddDays(1), "dd/MMM/yyyy") &
                                     "' and  cast([predicted_date] as date)  <= '" & "31/Dec/" & Format(StartDateTo01, "yyyy") &
                                     "' and [predictions_name] ='Total Net Sales - best fit' and cast([prediction_created_on] as date)='" &
                                     Format(Now, "dd/MMM/yyyy") & "' "

            '2nd selection

            SelectionStatement02 = "Select sum([Total Net Sales]) as TotalSales from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "'  "

            Dim DateTemp As Date = "13-Feb-2018"

            SelectionStatement02Sub = "Select sum([predicted_value_numeric]) as TotalSales  from [Predictions] " &
                                " where  cast([predicted_date] as date) >= '" & Format(StartDateTo01.AddDays(1), "dd/MMM/yyyy") &
                                     "' and  cast([predicted_date] as date)  <= '" & "31/Dec/" & Format(StartDateTo01, "yyyy") &
                                     "' and [predictions_name] ='Total Net Sales - best fit' and cast([prediction_created_on] as date)='" &
                                     Format(DateTemp, "dd/MMM/yyyy") & "'  "

            ComparisonType = "Percentage"




        ElseIf KPINameTemp = "POS Year End Projection" Then
            If CheckBoxKPITest.Checked = True Then MsgBox("Checking " & KPINameTemp)


            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)

            StartDateTo01 = StartDateFrom01
            GetDateForKPI("YTD Yesterday", StartDateFrom01, StartDateTo01, DemoParameter)

            StartDateFromtext01 = Format(StartDateFrom01, "ddd dd/MMM/yyyy")
            StartDateTotext01 = Format(StartDateTo01, "ddd dd/MMM/yyyy")

            SelectionStatement01 = "Select sum([Total Net Sales]) as TotalSales, " & MeasuresSQLSelection & " from [POSSales]  " &
                                 " where  cast([Date Record] as date) >= '" & Format(StartDateFrom01, "dd/MMM/yyyy") &
                                      "' and  cast([Date Record] as date)  <= '" & Format(StartDateTo01, "dd/MMM/yyyy") & "' Group by " & MeasuresSQLSelection

            SelectionStatement02 = "Select sum([predicted_value_numeric]) as TotalSales , " & MeasuresSQLSelection & " from [Predictions] " &
                                " where  cast([predicted_date] as date) >= '" & Format(StartDateTo01.AddDays(1), "dd/MMM/yyyy") &
                                     "' and  cast([predicted_date] as date)  <= '" & Format(StartDateTo01, "31/Dec/yyyy") &
                                     "'and [predictions_name] ='Total Net Sales - best fit'  and cast([prediction_created_on] as date)='" & Format(Now, "dd/MMM/yyyy") &
                                     "' Group by " & MeasuresSQLSelection

            ComparisonType = "Addition"



        Else

            '          If CheckBoxStopOnErrorsKPI.Checked = True Then
            MsgBox("KPI not defined " & ErrDesc)
            '       End If
            Exit Sub
        End If

        'clears the results array
        Array.Clear(ResultsArray, ResultsArray.GetLowerBound(0), ResultsArray.Length)
        NumResults = 0


        'writes to text file
        UpdateTextFile("KPI Date Log " & ListBoxCustomerInfo.SelectedItem, KPINameTemp, StartDateFrom01.ToShortDateString,
                       StartDateTo01.ToShortDateString, StartDateFrom02.ToShortDateString, StartDateTo02.ToShortDateString)


        LabelKPIInfo.Text = ""
        LabelKPIInfo.Refresh()

        'this puts the details in the box so they can be checked
        If CheckBoxKPITest.Checked = True Then
            If SelectionStatement02 = "" Then
                LabelKPIInfo.Text = "Customer " & ListBoxCustomerInfo.SelectedItem & ", KPI = '" & KPINameTemp & "'" & ControlChars.CrLf & ControlChars.CrLf &
                    "From " & ControlChars.Tab & ControlChars.Tab & ControlChars.Tab & Format(StartDateFrom01, "dd/MMM/yyyy") &
                ControlChars.CrLf & "To   " & ControlChars.Tab & ControlChars.Tab & ControlChars.Tab &
                Format(StartDateTo01, "dd/MMM/yyyy") & ControlChars.CrLf

            Else
                LabelKPIInfo.Text = "Customer " & ListBoxCustomerInfo.SelectedItem & ", KPI = '" & KPINameTemp & "'" & ControlChars.CrLf & ControlChars.CrLf &
                    "From " & ControlChars.Tab & ControlChars.Tab & ControlChars.Tab & Format(StartDateFrom01, "dd/MMM/yyyy") &
                ControlChars.CrLf & "To   " & ControlChars.Tab & ControlChars.Tab & ControlChars.Tab &
                Format(StartDateTo01, "dd/MMM/yyyy") & ControlChars.CrLf & "Compare From   " & ControlChars.Tab & Format(StartDateFrom02, "dd/MMM/yyyy") &
                ControlChars.CrLf & "Compare To " & ControlChars.Tab & ControlChars.Tab & Format(StartDateTo02, "dd/MMM/yyyy") &
                ControlChars.CrLf & ControlChars.CrLf

            End If

        End If

        Try
            records = erpdb.Execute(SelectionStatement01)
            If CheckBoxKPITest.Checked = True Then
                LabelKPIInfo.Text = LabelKPIInfo.Text & "1st Set" & ControlChars.CrLf
            End If


            While Not records.EOF
                Try
                    Salesyesetrday = records.Fields("TotalSales").Value.ToString.Trim
                Catch ex As Exception
                    Salesyesetrday = 0
                End Try
            
                Try
                    Measure01 = records.Fields(KPIMeasure01).Value.ToString.Trim
                    Measure02 = records.Fields(KPIMeasure02).Value.ToString.Trim
                    Measure03 = records.Fields(KPIMeasure03).Value.ToString.Trim
                    Measure04 = records.Fields(KPIMeasure04).Value.ToString.Trim
                    Measure05 = records.Fields(KPIMeasure05).Value.ToString.Trim

                Catch ex As Exception

                End Try
                Try
                    COGSTot = records.Fields("COGSTot").Value.ToString.Trim
                Catch ex As Exception
                    COGSTot = 0
                End Try

                If CheckBoxKPITest.Checked = True Then
                    If Measure01 <> "" Then
                        LabelKPIInfo.Text = LabelKPIInfo.Text & Measure01 & " = " & ControlChars.Tab & ControlChars.Tab &
                            ControlChars.Tab & Format(Salesyesetrday, "#,##0.####") & ControlChars.CrLf
                    Else
                        LabelKPIInfo.Text = LabelKPIInfo.Text & Format(Salesyesetrday, "#,##0.####") & ControlChars.CrLf

                    End If
                End If

                'can have a second sub statement
                Try
                    recordsSecond = erpdb.Execute(SelectionStatement01Sub)
                    SalesyesetrdaySecond = 0
                    While Not recordsSecond.EOF
                        Try
                            If recordsSecond.Fields("Outlet Name").Value.ToString.Trim = Measure01 Then
                                SalesyesetrdaySecond = recordsSecond.Fields("TotalSales").Value.ToString.Trim
                            End If

                        Catch ex As Exception
                            SalesyesetrdaySecond = 0
                        End Try

                        If Measure01 = "" Then
                            Try
                                SalesyesetrdaySecond = recordsSecond.Fields("TotalSales").Value.ToString.Trim
                            Catch ex As Exception
                                SalesyesetrdaySecond = 0
                            End Try

                        End If

                        recordsSecond.MoveNext()
                    End While
                    recordsSecond.Close()
                Catch ex As Exception

                End Try



                '         DateRecordtext = records.Fields("Date Record").Value.ToString.Trim
                ResultsArray(NumResults, 0) = Measure01
                ResultsArray(NumResults, 1) = Salesyesetrday + SalesyesetrdaySecond
                ResultsArray(NumResults, 5) = DateRecordtext
                ResultsArray(NumResults, 6) = Measure02
                ResultsArray(NumResults, 7) = Measure03
                ResultsArray(NumResults, 8) = Measure04
                ResultsArray(NumResults, 9) = COGSTot
                NumResults += 1
                records.MoveNext()
            End While
        Catch ex As Exception
            ErrDesc = Err.Description
            Salesyesetrday = 0
        End Try

        Try
            records.Close()
        Catch ex As Exception
        End Try

        Dim MatchedSales As Boolean = False
        Dim maxCounter As Int16 = 0
        'can have more results on the second side as a store might have sold someting in the 2nd comparison period and
        'not the first one so need to keep track of the number of results
        Dim NumResults2nd As Int16 = 0

        Dim Measure01Temp As String = ""
        Dim SalesyesetrdayTemp As Decimal = 0
        Dim COGSTotTemp As Decimal = 0
        Dim NumberExtraResults As Int16 = 0
        Dim ExtraPayments(200, 2)

        'can have 2nd side
        If SelectionStatement02 <> "" Then
            If CheckBoxKPITest.Checked = True Then
                LabelKPIInfo.Text = LabelKPIInfo.Text & ControlChars.CrLf & "2nd Set" & ControlChars.CrLf
            End If



            Try
                    records = erpdb.Execute(SelectionStatement02)
                    While Not records.EOF
                        Salesyesetrday = records.Fields("TotalSales").Value.ToString.Trim
                        Try
                            Measure01 = records.Fields(KPIMeasure01).Value.ToString.Trim
                            Measure02 = records.Fields(KPIMeasure02).Value.ToString.Trim
                            Measure03 = records.Fields(KPIMeasure03).Value.ToString.Trim
                            Measure04 = records.Fields(KPIMeasure04).Value.ToString.Trim
                            Measure05 = records.Fields(KPIMeasure05).Value.ToString.Trim
                        Catch ex As Exception
                        End Try
                        Try
                            COGSTot = records.Fields("COGSTot").Value.ToString.Trim
                        Catch ex As Exception
                            COGSTot = 0
                        End Try
                    If CheckBoxKPITest.Checked = True Then
                        If Measure01 <> "" Then
                            LabelKPIInfo.Text = LabelKPIInfo.Text & Measure01 & " = " & ControlChars.Tab & ControlChars.Tab & ControlChars.Tab & Format(Salesyesetrday, "#,##0.####") & ControlChars.CrLf
                        Else
                            LabelKPIInfo.Text = LabelKPIInfo.Text & Format(Salesyesetrday, "#,##0.####") & ControlChars.CrLf
                        End If
                    End If

                    'can have a second sub statement
                    Try
                        recordsSecond = erpdb.Execute(SelectionStatement02Sub)
                        SalesyesetrdaySecond = 0
                        While Not recordsSecond.EOF
                            Try
                                If recordsSecond.Fields("Outlet Name").Value.ToString.Trim = Measure01 Then
                                    SalesyesetrdaySecond = recordsSecond.Fields("TotalSales").Value.ToString.Trim
                                End If

                            Catch ex As Exception
                                SalesyesetrdaySecond = 0
                            End Try
                            Try
                                If Measure01 = "" Then
                                    SalesyesetrdaySecond = recordsSecond.Fields("TotalSales").Value.ToString.Trim
                                End If
                            Catch ex As Exception
                                SalesyesetrdaySecond = 0
                            End Try


                            recordsSecond.MoveNext()
                        End While
                        recordsSecond.Close()
                    Catch ex As Exception

                    End Try


                    'it is possible that the combination does not exists ie there are no sales for the dimensions on
                    'that date range so need to make sure the dimensions match
                    MatchedSales = False
                        For counter = 0 To LengthofArray
                        '           ResultsArray(NumResults, 0) = OutletName
                        '          ResultsArray(NumResults, 1) = Salesyesetrday
                        '         ResultsArray(NumResults, 5) = DateRecordtext
                        '        ResultsArray(NumResults, 6) = ItemName
                        '       ResultsArray(NumResults, 7) = Channel
                        '      ResultsArray(NumResults, 8) = MealPeriod
                        If ResultsArray(counter, 0) = Measure01 And ResultsArray(counter, 6) = Measure02 And
                            ResultsArray(counter, 7) = Measure03 And ResultsArray(counter, 8) = Measure04 Then
                            ResultsArray(counter, 2) = Measure01
                            ResultsArray(counter, 3) = Salesyesetrday + SalesyesetrdaySecond
                            ResultsArray(counter, 10) = COGSTot
                            MatchedSales = True
                            Exit For
                        End If
                    Next
                    'it is possible that there are more results in the 2nd set than the first set (a shop has sold something last period and nothing this period)
                    'so need to add that row
                    If MatchedSales = False Then
                        Measure01Temp = Measure01
                        SalesyesetrdayTemp = Salesyesetrday
                        COGSTotTemp = COGSTot
                        MatchedSales = True
                        NumberExtraResults += 1
                        ExtraPayments(NumberExtraResults, 0) = Salesyesetrday + SalesyesetrdaySecond
                        ExtraPayments(NumberExtraResults, 1) = Measure01
                        ExtraPayments(NumberExtraResults, 2) = COGSTot

                    End If

                    NumResults2nd += 1
                        records.MoveNext()
                    End While
                Catch ex As Exception
                    ErrDesc = Err.Description
                    SalesyesetrdayTemp = 0
                    COGSTotTemp = 0
                End Try

                Try
                    records.Close()
                Catch ex As Exception
                End Try
            End If


        'this is if the second sql has more results than the first sql
        If NumberExtraResults <> 0 Then
            For counterTemp1 = 0 To NumberExtraResults - 1
                ResultsArray(NumResults + counterTemp1, 0) = ExtraPayments(counterTemp1 + 1, 1)
                ResultsArray(NumResults + counterTemp1, 2) = ExtraPayments(counterTemp1 + 1, 1)
                ResultsArray(NumResults + counterTemp1, 3) = ExtraPayments(counterTemp1 + 1, 0)
                ResultsArray(NumResults + counterTemp1, 10) = ExtraPayments(counterTemp1 + 1, 2)
            Next
        End If

        'need to set the higher of the number of results
        If NumResults2nd > NumResults Then NumResults = NumResults2nd

        Dim UniqueIDTemt As Guid = System.Guid.NewGuid
        Dim DateUsed As Date = Now
        Dim YearCode, MonthCode, DayOfWeekNumber, DayOfYear, MonthCodeShort
        Dim DayOfWeekName, DayOfWeekNameShort, WeekNumber, Weekend, Weekday, Workday
        Dim NumberWorkDaysInMonth, NumberNonWorkDaysInMonth, PublicHoliday, NumberDaysInMonth, DayOfMonth


        GetDateCalculatedFields(DateUsed, YearCode, MonthCode, DayOfWeekNumber, DayOfYear, MonthCodeShort,
                                    DayOfWeekName, DayOfWeekNameShort, WeekNumber, Weekend, Weekday, Workday,
                                    NumberWorkDaysInMonth, NumberNonWorkDaysInMonth, PublicHoliday, _
                                NumberDaysInMonth, DayOfMonth, MonthNumber, MonthNumber2Digits)

        Dim TimeDayTemp As String = Format(DateUsed, "tt")
        If TimeDayTemp = "p.m." Then
            TimeDayTemp = "PM"
        Else
            TimeDayTemp = "AM"
        End If

        'now can write the result

        Dim UpdateSQLStringTemp As String = ""
        Dim result As Decimal = 0
        Dim resultText As String = ""

        'deletes all old ones first
        Dim DeleteSqlStatement As String = ""
        Dim SqlKPIStatement As String = ""

        SelectionStatementDelete = "Delete from [KPI Values] where [KPI Name] ='" & KPINameTemp & "'"
        SqlKPIStatement = KPINameTemp

        'will retry once as some timeouts occur
        Try
            rs.Open(SelectionStatementDelete, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception

            Delay(10)
            Try
                rs.Open(SelectionStatementDelete, strconnectSQLBizCoachCustomerDataSQL)
            Catch ex1 As Exception
                MsgBox("Error:    " & Err.Description)
            End Try
        End Try

        Dim SQLStringInsertFields As String = ""
        Dim SQLStringInsertValues As String = ""
        Dim GrossMargin As Decimal = 0
        Dim morningstring As String = ""
        Dim KPIGroup01ValueTemp As String = ""
        Dim KPIGroup02ValueTemp As String = ""
        Dim KPIGroup03ValueTemp As String = ""

        If NumResults > 0 Then
            ProgressBarConfiguration.Maximum = NumResults - 1
        Else
            ProgressBarConfiguration.Maximum = NumResults
        End If

        LabelConfigStatus.Text = ""
        LabelConfigStatus.Refresh()

        If CheckBoxKPITest.Checked = True Then
            LabelKPIInfo.Text = LabelKPIInfo.Text & ControlChars.CrLf & NumResults & " result,  type is '" & ComparisonType & "'" & ControlChars.CrLf
        End If


        For countertemp = 0 To NumResults - 1
            result = 0
            result = ResultsArray(countertemp, 1)
            GrossMargin = ResultsArray(countertemp, 1) - ResultsArray(countertemp, 9)
            'this is the different calculations
            ResultsArray(countertemp, 0) = Replace(ResultsArray(countertemp, 0), "'", "''")

            'can be a comparator
            If SelectionStatement02.Trim <> "" Then
                '((Sales(Yesterday) - Sales (Same day last week)) / Sales(Yesterday)) * 100
                Try
                    'default comparitor is % precentage
                    Try
                        result = Format((ResultsArray(countertemp, 1) - ResultsArray(countertemp, 3)) / ResultsArray(countertemp, 3) * 100, "0.##")
                    Catch ex As Exception

                    End Try
                    If ComparisonType = "Reverse Percentage" Then
                        'this is if the other way around 
                        result = Format((ResultsArray(countertemp, 1)) / ResultsArray(countertemp, 3) * 100, "0.##")
                    End If
                    'some comparitors are addition/subtraction
                    If ComparisonType = "Subtraction" Then
                        result = ResultsArray(countertemp, 1) - ResultsArray(countertemp, 3)
                    End If
                    If ComparisonType = "Addition" Then
                        result = ResultsArray(countertemp, 1) + ResultsArray(countertemp, 3)
                    End If
                Catch ex As Exception
                    result = 0
                End Try
            End If

            If CheckBoxKPITest.Checked = True Then
                LabelKPIInfo.Text = LabelKPIInfo.Text & countertemp + 1 & " " & " = " & ControlChars.Tab & Format(result, "#,##0.###") & ControlChars.CrLf
            End If


            UniqueIDTemt = System.Guid.NewGuid
            resultText = SqlKPIStatement & ", sales =" & ResultsArray(countertemp, 1) & ", COGS =" & ResultsArray(countertemp, 9) & " for " & ResultsArray(countertemp, 0) &
                " " & ResultsArray(countertemp, 6) &
            " " & ResultsArray(countertemp, 7) &
            " " & ResultsArray(countertemp, 8) & ", for " & StartDateFromtext01 & " to " & StartDateTotext01

            'can be a comparator
            If SelectionStatement02.Trim <> "" Then
                'if a comparator needs to gve the other side of the comparison
                If SelectionStatement02.Trim <> "" Then
                    resultText = resultText & ". Sales compare =" & ResultsArray(countertemp, 3) & ", COS =" & ResultsArray(countertemp, 3)
                End If
                resultText = resultText & ", comparison is " & StartDateFromtext02 & " to " & StartDateTotext02

            End If
            resultText = resultText & ", updated: " & Format(Now, "dd/MMM/yyyy h:mm tt")


            resultText = Replace(resultText, "'", "''")

            'update string is different depending on the number of dimensions

            SQLStringInsertFields = "[CompanyName], [Unique Identity], [KPI Name], [CalculationDetails], [KPI Value Number], " &
                "[Cost Of Sales], [Gross Margin], LastUpdated, YearCode, MonthCode, " &
                "DayOfMonth, [Day Of Month], DayOfWeekNumber, DayOfYear, MonthCodeShort, DayOfWeekName, DayOfWeekNameShort, HourCode, MinuteCode, " &
                "SecondCode, AMPM, [Outlet Name]"
            morningstring = Replace(Format(Now, "tt"), ".", "")

            'NEEDS WORK
            'May not have Outlet
            SQLStringInsertValues = ListBoxCustomerInfo.SelectedItem & "','" & UniqueIDTemt.ToString & "','" & SqlKPIStatement & "','" &
                resultText & "','" & result & "','" &
                ResultsArray(countertemp, 9) - ResultsArray(countertemp, 10) & "','" & GrossMargin & "','" & Format(Now, "dd/MMM/yyyy") & "','" & YearCode & "','" & MonthCode & "','" & DayOfMonth & "','" & DayOfMonth & "','" &
            DayOfWeekNumber & "','" & DayOfYear & "','" & MonthCodeShort & "','" & DayOfWeekName & "','" & DayOfWeekNameShort &
            "','" & Now.Hour & "','" & Now.Minute & "','" & Now.Second & "','" & morningstring & "','" & ResultsArray(countertemp, 0)
            If ResultsArray(countertemp, 6) <> "" Then
                SQLStringInsertFields = SQLStringInsertFields & ", KPIGroup01"
                KPIGroup01ValueTemp = Replace(ResultsArray(countertemp, 6), "'", "''")
                SQLStringInsertValues = SQLStringInsertValues & "','" & Mid(KPIGroup01ValueTemp, 1, 40)
            End If
            If ResultsArray(countertemp, 7) <> "" Then
                SQLStringInsertFields = SQLStringInsertFields & ", KPIGroup02"
                KPIGroup02ValueTemp = Replace(ResultsArray(countertemp, 7), "'", "''")
                SQLStringInsertValues = SQLStringInsertValues & "','" & Mid(KPIGroup02ValueTemp, 1, 40)
            End If
            If ResultsArray(countertemp, 8) <> "" Then
                SQLStringInsertFields = SQLStringInsertFields & ", KPIGroup03"
                KPIGroup03ValueTemp = Replace(ResultsArray(countertemp, 8), "'", "''")
                SQLStringInsertValues = SQLStringInsertValues & "','" & Mid(KPIGroup03ValueTemp, 1, 40)
            End If
            UpdateSQLStringTemp = "Insert into [KPI Values] (" & SQLStringInsertFields & ") " &
                " Values ('" & SQLStringInsertValues & "')"
            '           UpdateSQLStringTemp = "Insert into [KPI Values] ([CompanyName], [Unique Identity], [YearCode], [MonthCode], [DayOfWeekNumber], DayOfYear, MonthCodeShort, " &
            '           "DayOfWeekName, DayOfWeekNameShort, WeekNumber, Weekend, Weekday, Workday, [Number Work Days In Month], [Number NonWork Days In Month], PublicHoliday, " &
            '           "[Number Days In Month], [Day Of Month], [Date Record], HourCode, MinuteCode, SecondCode, AMPM, DayOfMonth, LastUpdated, [KPI Name], [KPI Value Number]) values ('" &
            '           ListBoxCustomersDemoConnectionTest.SelectedItem & "','" & UniqueIDTemt.ToString & "','" & YearCode & "','" & MonthCode & "','" & DayOfWeekNumber & "','" &
            '           DayOfYear & "','" & MonthCodeShort & "','" &
            '           DayOfWeekName & "','" & DayOfWeekNameShort & "','" & WeekNumber & "','" & Weekend & "','" & Weekday() & "','" & Workday & "','" &
            '           NumberWorkDaysInMonth & "','" & NumberNonWorkDaysInMonth & "','" & PublicHoliday & "','" & NumberDaysInMonth & "','" &
            '           DayOfMonth & "','" & Format(DateUsed, "d-MMM-yyyy") & "','" & Format(DateUsed, "hh") & "','" & Format(DateUsed, "mm") & "','" & Format(DateUsed, "ss") & "','" & _
            '            TimeDayTemp & "','" & DateUsed.Day & "','" & Format(DateUsed, "d-MMM-yyyy") & "','" & "Daily Sales vs Last Week Daily Sales" & "','" & result & "')"
            UpdateArchiveSQLStringTemp = "Insert into [KPI Values Archive] (" & SQLStringInsertFields & ", " & "[Date Of KPI]" & ") " &
                " Values ('" & SQLStringInsertValues & "','" & Format(Now, "dd-MMM-yyyy") & "')"
            Try
                rs.Open(UpdateSQLStringTemp, strconnectSQLBizCoachCustomerDataSQL)

                'also inserts a group one
                If Mid(KPINameTemp.ToString.Trim, Len(KPINameTemp.ToString.Trim) - 4, Len(KPINameTemp.ToString.Trim)) = "Total" Then

                    SQLStringInsertValues = ListBoxCustomerInfo.SelectedItem & "','" & UniqueIDTemt.ToString & "','" & SqlKPIStatement & "','" &
                resultText & "','" & result & "','" &
                ResultsArray(countertemp, 9) - ResultsArray(countertemp, 10) & "','" & GrossMargin & "','" & Format(Now, "dd/MMM/yyyy") & "','" & YearCode & "','" & MonthCode & "','" & DayOfMonth & "','" & DayOfMonth & "','" &
            DayOfWeekNumber & "','" & DayOfYear & "','" & MonthCodeShort & "','" & DayOfWeekName & "','" & DayOfWeekNameShort &
            "','" & Now.Hour & "','" & Now.Minute & "','" & Now.Second & "','" & morningstring & "','" & "Group"

                    SQLStringInsertFields = "[CompanyName], [Unique Identity], [KPI Name], [CalculationDetails], [KPI Value Number], " &
                "[Cost Of Sales], [Gross Margin], LastUpdated, YearCode, MonthCode, " &
                "DayOfMonth, [Day Of Month], DayOfWeekNumber, DayOfYear, MonthCodeShort, DayOfWeekName, DayOfWeekNameShort, HourCode, MinuteCode, " &
                "SecondCode, AMPM, [Outlet Name]"

                    UpdateSQLStringTemp = "Insert into [KPI Values] (" & SQLStringInsertFields & ") " &
                " Values ('" & SQLStringInsertValues & "')"

                    '             rs.Open(UpdateSQLStringTemp, strconnectSQLBizCoachCustomerDataSQL)
                End If

                'also inserts record into the archive
                rs.Open(UpdateArchiveSQLStringTemp, strconnectSQLBizCoachCustomerDataSQL)

            Catch ex As Exception

                'occasionally there are timeouts so try again
                Try
                    Delay(5)
                    rs.Open(UpdateSQLStringTemp, strconnectSQLBizCoachCustomerDataSQL)
                    'also inserts record into the archive

                    rs.Open(UpdateArchiveSQLStringTemp, strconnectSQLBizCoachCustomerDataSQL)

                Catch ex1 As Exception
                    MsgBox("Error: " & Err.Description)
                End Try



            End Try
            Console.WriteLine(SqlKPIStatement & ",  result=" & result & ", " & ResultsArray(countertemp, 0) & ", " & ResultsArray(countertemp, 6) & ", " &
                              ResultsArray(countertemp, 7) & ", " & ResultsArray(countertemp, 8) & ",  " & countertemp + 1 & " of " & NumResults)
            LabelConfigStatus.Text = ProgressBar2.Value & " of " & ProgressBar2.Maximum & ", " & SqlKPIStatement & ", " & countertemp + 1 & " of " & NumResults

            LabelConfigStatus.Refresh()
            ProgressBarConfiguration.Maximum = NumResults
            ProgressBarConfiguration.Value = countertemp + 1
            ProgressBarConfiguration.Refresh()
        Next
        'sometimes no results but still creta API

        If NumResults = 0 Then
            UniqueIDTemt = System.Guid.NewGuid
            morningstring = Replace(Format(Now, "tt"), ".", "")

            UpdateSQLStringTemp = "Insert into [KPI Values] (" & "[KPI Name],[KPI Value Number],[CalculationDetails]," &
                "[Unique Identity],[LastUpdated], CompanyName, [Outlet Name], YearCode, MonthCode, " &
                "DayOfMonth, [Day Of Month], DayOfWeekNumber, DayOfYear, MonthCodeShort, DayOfWeekName, DayOfWeekNameShort, HourCode, MinuteCode, " &
                "SecondCode, AMPM, [Gross Margin], [Cost Of Sales]) " &
                " Values ('" & KPINameTemp & "','0','" & KPINameTemp & " = No Results','" &
                UniqueIDTemt.ToString & "','" & Format(Now, "dd-MMM-yyyy") & "','" & ListBoxCustomerInfo.SelectedItem & "','" & "" & "','" & YearCode & "','" & MonthCode & "','" & DayOfMonth & "','" & DayOfMonth & "','" &
            DayOfWeekNumber & "','" & DayOfYear & "','" & MonthCodeShort & "','" & DayOfWeekName & "','" & DayOfWeekNameShort &
            "','" & Now.Hour & "','" & Now.Minute & "','" & Now.Second & "','" & morningstring & "','" & 0 & "','" & 0 & "')"


            Try
                rs.Open(UpdateSQLStringTemp, strconnectSQLBizCoachCustomerDataSQL)
            Catch ex As Exception
                MsgBox("Error: " & Err.Description)
            End Try
            Console.WriteLine(SqlKPIStatement & ",  result= None")
            LabelConfigStatus.Text = SqlKPIStatement & ", " & "no results"
            LabelConfigStatus.Refresh()
        End If

        Try
            erpdb.Close()
        Catch ex As Exception
        End Try

    End Sub



    Private Sub GetDateForKPI(ByVal DateTypeKPISent, ByRef StartDateFrom01, ByRef StartDateTo01, ByVal DemoParameter)

        Dim NumberDaysBack As Int16 = 0
        Dim CurrentDayOfWeek As Int16 = 0
        Dim PreviousPeriodDayOfWeek As Int16 = 0

        If DateTypeKPISent = "MTD Yesterday" Then
            '   StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = Now.AddDays((Now.Day * -1) + 1)
            '      StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = Now.AddDays(-1)
            'if first of the monthen then go back 1 month
            If Now.Day = 1 Then
                StartDateFrom01 = Now.AddMonths(-1)
                '      StartDateTo01 = Now.AddDays((DemoParameter) * -1)
                StartDateTo01 = Now.AddDays(-1)

            End If



        ElseIf DateTypeKPISent = "WTD 2 Weeks Ago Yesterday" Then
            '"2 Weeks Ago WTD Yesterday"
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            'gets number days to moday
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            If NumberDaysBack = 0 Then StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-14)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-14)
        ElseIf DateTypeKPISent = "WTD 3 Weeks Ago Yesterday" Then
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            'gets number days to moday
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            If NumberDaysBack = 0 Then StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-21)
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-21)
        ElseIf DateTypeKPISent = "WTD 4 Weeks Ago Yesterday" Then
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            'gets number days to moday
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            If NumberDaysBack = 0 Then StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-28)
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-28)
        ElseIf DateTypeKPISent = "WTD Yesterday" Then
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            'gets number days to moday
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            If NumberDaysBack = 0 Then StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
        ElseIf DateTypeKPISent = "Yesterday" Then
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays((DemoParameter) * -1)
        ElseIf DateTypeKPISent = "(same day last month)" Or DateTypeKPISent = "same day last month" Then
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddMonths(-1)
        ElseIf DateTypeKPISent = "(same day last week)" Or DateTypeKPISent = "same day last week" Then
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-7)
        ElseIf DateTypeKPISent = "Yesterday Last Week" Then
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-8)

        ElseIf DateTypeKPISent = "Yesterday 2 Weeks Ago" Then
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-8)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-8)
            StartDateTo01 = StartDateTo01.AddDays(-7)

        ElseIf DateTypeKPISent = "Yesterday Last Year" Then
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-1)
            StartDateFrom01 = StartDateFrom01.AddYears(-1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddYears(-1)
        ElseIf DateTypeKPISent = "YTD Yesterday" Then

            StartDateFrom01 = Now.AddDays(Now.DayOfYear * -1)
            StartDateFrom01 = StartDateFrom01.adddays(1)


            StartDateTo01 = Now.AddDays(-1)



        ElseIf DateTypeKPISent = "LYTD Yesterday" Then

            StartDateFrom01 = Now.AddYears(-1)
            StartDateFrom01 = StartDateFrom01.adddays((Now.DayOfYear * -1) + 1)
            If StartDateFrom01.isleapyear(StartDateFrom01.Year) Then
                StartDateFrom01 = StartDateFrom01.adddays(-1)
            End If
            StartDateTo01 = Now.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddYears(-1)

            'WTD Yesterday
        ElseIf DateTypeKPISent = "WTD Last Year" Then

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.Addyears(-1)
            'gets number days to moday
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            If NumberDaysBack = 0 Then StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            '        StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.Addyears(-1)
            CurrentDayOfWeek = Now.DayOfWeek
            PreviousPeriodDayOfWeek = StartDateTo01.DayOfWeek

            StartDateTo01 = StartDateFrom01.AddDays(CurrentDayOfWeek - 2)



        ElseIf DateTypeKPISent = "LWTD Yesterday" Then
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            'gets number days to moday
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            If NumberDaysBack = 0 Then StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddDays(-1)
            StartDateTo01 = StartDateTo01.AddDays(-7)



        ElseIf DateTypeKPISent = "LMTD Yesterday" Then

            StartDateFrom01 = Now.AddMonths(-1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddMonths(-1)
            StartDateTo01 = StartDateTo01.Adddays(-1)


            If Now.Day = 1 Then
                StartDateFrom01 = Now.AddMonths(-2)

                Dim DaysInMonth As Int16 = System.DateTime.DaysInMonth(StartDateFrom01.Year, StartDateFrom01.Month)

                StartDateTo01 = StartDateFrom01.AddDays(DaysInMonth - 1)

            End If


        ElseIf DateTypeKPISent = "LYMTD Yesterday" Then

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.Addyears(-1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.Addyears(-1)
            StartDateTo01 = StartDateTo01.Adddays(-1)

            If Now.Day = 1 Then
                StartDateFrom01 = Now.AddMonths(-1)
                StartDateFrom01 = StartDateFrom01.AddYears(-1)
                StartDateTo01 = Now.AddYears(-1)
                StartDateTo01 = StartDateTo01.AddDays(-1)

            End If


        ElseIf DateTypeKPISent = "LYWTD Yesterday" Then
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.Addyears(-1)
            'gets number days to moday
            NumberDaysBack = StartDateFrom01.DayOfWeek - 1
            If NumberDaysBack = 0 Then StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateFrom01 = StartDateFrom01.AddDays(NumberDaysBack * -1)
            '        StartDateFrom01 = StartDateFrom01.AddDays(-7)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.Addyears(-1)
            CurrentDayOfWeek = Now.DayOfWeek
            PreviousPeriodDayOfWeek = StartDateTo01.DayOfWeek

            StartDateTo01 = StartDateFrom01.AddDays(CurrentDayOfWeek - 2)



            '        StartDateTo01 = StartDateTo01.AddDays(-7)
            'NEEDS Work to get correct end of week

        ElseIf DateTypeKPISent = "MTD" Then

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)

        ElseIf DateTypeKPISent = "LMTD" Then

            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.AddMonths(-1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)

            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddMonths(-1)

        ElseIf DateTypeKPISent = "LYMTD" Then

            '        StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = StartDateFrom01.Addyears(-1)
            StartDateFrom01 = StartDateFrom01.AddDays((Now.Day * -1) + 1)
            StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.Addyears(-1)

        ElseIf DateTypeKPISent = "YTD" Then
            '      StartDateFrom01 = Now.AddDays((DemoParameter) * -1)


            StartDateFrom01 = Now.AddDays(Now.DayOfYear * -1)
            StartDateFrom01 = StartDateFrom01.adddays(1)

            StartDateTo01 = Now

        ElseIf DateTypeKPISent = "LYTD" Then
            '      StartDateFrom01 = Now.AddDays((DemoParameter) * -1)
            StartDateFrom01 = Now.AddYears(-1)
            StartDateFrom01 = StartDateFrom01.adddays(StartDateFrom01.dayofyear * -1)
            StartDateFrom01 = StartDateFrom01.adddays(1)

            '       StartDateTo01 = Now.AddDays((DemoParameter) * -1)
            StartDateTo01 = StartDateTo01.AddYears(-1)

        ElseIf DateTypeKPISent = "Week to Yesterday From Monday" Then
            StartDateFrom01 = Now.AddDays((DemoParameter) * -1)

            If Now.DayOfWeek = DayOfWeek.Monday Then
                StartDateFrom01 = Now.AddDays(-7)
                StartDateTo01 = Now.AddDays(-1)
            ElseIf Now.DayOfWeek = DayOfWeek.Tuesday Then
                StartDateFrom01 = Now.AddDays(-1)
                StartDateTo01 = Now.AddDays(-1)
            ElseIf Now.DayOfWeek = DayOfWeek.Wednesday Then
                StartDateFrom01 = Now.AddDays(-2)
                StartDateTo01 = Now.AddDays(-1)
            ElseIf Now.DayOfWeek = DayOfWeek.Thursday Then
                StartDateFrom01 = Now.AddDays(-3)
                StartDateTo01 = Now.AddDays(-1)
            ElseIf Now.DayOfWeek = DayOfWeek.Friday Then
                StartDateFrom01 = Now.AddDays(-4)
                StartDateTo01 = Now.AddDays(-1)
            ElseIf Now.DayOfWeek = DayOfWeek.Saturday Then
                StartDateFrom01 = Now.AddDays(-5)
                StartDateTo01 = Now.AddDays(-1)
            ElseIf Now.DayOfWeek = DayOfWeek.Sunday Then
                StartDateFrom01 = Now.AddDays(-6)
                StartDateTo01 = Now.AddDays(-1)

            End If

        Else
            MsgBox("No Date" & ControlChars.CrLf & DateTypeKPISent)
        End If
    End Sub

    Private Sub ButtonInsertBlankKPIs_Click(sender As Object, e As EventArgs) Handles ButtonInsertBlankKPIs.Click

        InsertBlankKPIs()

    End Sub

    Private Sub InsertBlankKPIs()
        ButtonInsertBlankKPIs.BackColor = Color.LightSalmon
        ButtonInsertBlankKPIs.Refresh()

        Dim UniqueIDTemt As Guid = System.Guid.NewGuid
        Dim DateUsed As Date = Now
        Dim YearCode, MonthCode, DayOfWeekNumber, DayOfYear, MonthCodeShort
        Dim DayOfWeekName, DayOfWeekNameShort, WeekNumber, Weekend, Weekday, Workday
        Dim NumberWorkDaysInMonth, NumberNonWorkDaysInMonth, PublicHoliday, NumberDaysInMonth, DayOfMonth

        '     GetDateCalculatedFields(DateUsed, YearCode, MonthCode, DayOfWeekNumber, DayOfYear, MonthCodeShort,
        '    DayOfWeekName, DayOfWeekNameShort, WeekNumber, Weekend, Weekday, Workday,
        '   NumberWorkDaysInMonth, NumberNonWorkDaysInMonth, PublicHoliday, NumberDaysInMonth, DayOfMonth, MonthNumber, MonthNumber2Digits)

        Dim InsertString As String = "Insert into [KPI Values] ([CompanyName], [Unique Identity], [KPI Name], [CalculationDetails], [KPI Value Number], " &
            "[Cost Of Sales], [Gross Margin], LastUpdated, YearCode, MonthCode, DayOfMonth, [Day Of Month], DayOfWeekNumber, DayOfYear, MonthCodeShort, " &
            "DayOfWeekName, DayOfWeekNameShort, HourCode, MinuteCode, SecondCode, AMPM, [Outlet Name])  " &
            "Values ('Gidumal & Sons Limited','656192a7-bf31-41cd-a6fa-94dfd084f053','POS Daily Sales (yesterday same day last week) - Total','POS Daily Sales (yesterday same day last week) - Total, sales =1255.000, COGS =491.148 for    , for 08/Jan/2018 to 08/Jan/2018, updated: 16/Jan/2018 5:08 p.m.','1255.000','491.148','763.852','16/Jan/2018','2018','January','16','16','2','16','Jan','Tuesday','Tue','17','8','36','pm','')"

        UniqueIDTemt = System.Guid.NewGuid

        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Average Revenue (excluding tax), Yesterday','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Average Revenue (excluding tax), Yesterday last week','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Average Revenue (excluding tax), Yesterday variance to last week','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Average Revenue (excluding tax), Yesterday variance to last week %','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Average Revenue (excluding tax), Yesterday variance to last week %, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Average Revenue (excluding tax), Yesterday variance to last week, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Average Revenue (excluding tax), Yesterday, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Size, Yesterday','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Size, Yesterday last week','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Size, Yesterday last week, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Size, Yesterday variance to last week','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Size, Yesterday variance to last week %','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Size, Yesterday variance to last week %, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Basket Size, Yesterday, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Customer Count, Yesterday','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Customer Count, Yesterday last week','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Customer Count, Yesterday last week, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Customer Count, Yesterday, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales, Number of Items Sold, Yesterday','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales, Number of Items Sold, Yesterday, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales LYMTD - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales LYTD - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales YTD - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Last Year Week to LYW Yesterday From Monday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Last Week to LW Yesterday From Monday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Week to Yesterday From Monday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales 2 Weeks Ago to Yesterday From Monday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales 3 Weeks Ago to Yesterday From Monday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales 4 Weeks Ago to Yesterday From Monday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales 5 Weeks Ago to Yesterday From Monday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD Yesterday Variance 2 Months Ago MTD Sales - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD Yesterday Variance 2 Months Ago MTD Sales % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD Yesterday Variance 3 Months Ago MTD Sales - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD Yesterday Variance 3 Months Ago MTD Sales % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD Yesterday Variance 4 Months Ago MTD Sales - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD Yesterday Variance 4 Months Ago MTD Sales % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD Yesterday Variance LMTD Sales - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD Yesterday Variance LMTD Sales % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Yesterday 2 Weeks Ago Variance to Yesterday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Yesterday 2 Weeks Ago Variance to Yesterday % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Yesterday 3 Weeks Ago Variance to Yesterday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Yesterday 3 Weeks Ago Variance to Yesterday % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Yesterday 4 Weeks Ago Variance to Yesterday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Yesterday 4 Weeks Ago Variance to Yesterday % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Yesterday Last Week Variance to Week Yesterday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Yesterday Last Week Variance to Week Yesterday % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD Yesterday LYMTD Sales - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD Yesterday Variance LYMTD Sales - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD Yesterday Variance LYMTD Sales % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD 2 Months Ago Yesterday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD 3 Months Ago Yesterday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD 4 Months Ago Yesterday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales LYMTD Yesterday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales LMTD Yesterday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Last Year Full Month - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Last Year Full Week from Monday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS MTD Yesterday % of Last 2 Full Months - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS MTD Yesterday % of Last 3 Full Months - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS MTD Yesterday % of Last 4 Full Months - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS MTD Yesterday % of Last Full Month - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS MTD Yesterday % of Last Year Full Month - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Last 2 Full Months - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Last 2 Full Weeks from Monday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Last 3 Full Months - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Last 3 Full Weeks from Monday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Last 4 Full Months - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Last 4 Full Weeks from Monday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Last Full Month - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Last Full Week from Monday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Daily Sales Yesterday to LYDay Variance - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Daily Sales Yesterday to LYDay Variance % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Yesterday 3 Weeks Ago - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Yesterday Last Week - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Yesterday 4 Weeks Ago - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales Yesterday 2 Weeks Ago - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS WTD Yesterday % of Last 2 Full Weeks - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS WTD Yesterday % of Last 3 Full Weeks - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS WTD Yesterday % of Last 4 Full Weeks - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS WTD Yesterday % of Last Full Week - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS WTD Yesterday % of Last Year Full Week - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales WTD Yesterday Variance Last Year WTD Sales % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales WTD Yesterday Variance 2 Weeks Ago WTD Sales - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales WTD Yesterday Variance 2 Weeks Ago WTD Sales % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales WTD Yesterday Variance 3 Weeks Ago WTD Sales % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales WTD Yesterday Variance 4 Weeks Ago WTD Sales - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales WTD Yesterday Variance 4 Weeks Ago WTD Sales % - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales MTD Yesterday - Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales WTD Yesterday Variance Last Year WTD from Monday – Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales WTD Yesterday Variance Last Year WTD from Monday % – Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales WTD Yesterday Variance LWTD Sales from Monday – Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales WTD Yesterday Variance LWTD Sales from Monday % – Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales WTD Yesterday Variance LWTD Sales from Monday % – Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales WTD Yesterday Variance LWTD Sales from Monday – Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales, Number of Invoices, Yesterday last week, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales, Number of Invoices, Yesterday, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales, Number of Items Sold, Yesterday last week, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")
        InsertKPIBlank("insert into [KPI Values] ([KPI Name], [KPI Value Number], [LastUpdated]) values ('POS Sales, Number of Items Sold, Yesterday, Total','0','" & Format(Now, "dd-MMM-yyyy") & "')")



        ButtonInsertBlankKPIs.BackColor = Color.LightGreen
        ButtonInsertBlankKPIs.Refresh()


    End Sub


    Private Sub InsertKPIBlank(ByVal InsertString As String)


        'this inserts blank KPI's into the database as dashgboards wont wrok without it

        'this is for the sql command connection
        If ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Standard" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachSQLStd" & ";PWD=" & "PaLm78jxY" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "awsrdsbizcoachsqlstandard.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433"
        ElseIf ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "ImpRDSBizCoach" & ";PWD=" & "impBiz16!" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "awsrdsbizcoach.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433"
        ElseIf ListBoxCluster.SelectedItem = "AWS Singapore EC2 RDS SQL Express - BizCoach2" Then
            strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachDataLoading" & ";PWD=" & "JaMyt45!ord" &
                ";DATABASE=" & "BizCoach" & CustomerDatabaseName &
             ";SERVER=" & "ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433"
        Else
            MsgBox("Invalid Cluster")
            Exit Sub
        End If




        Dim myCommand As String 'to store the sql command to be executed
        Dim cmd As SqlCommand = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution


        'sales order header
        myCommand = InsertString

        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUpdateStatus.Items.Add(InsertString & " : " & ListBoxCustomerInfo.SelectedItem)
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


    End Sub

    Private Sub FrmMain_Closing(sender As Object, e As CancelEventArgs) Handles Me.Closing

        Dim dlgres As DialogResult =
               MessageBox.Show("Exit System?",
               "Exit", MessageBoxButtons.YesNo,
               MessageBoxIcon.Question)
        If dlgres = DialogResult.No Then
            e.Cancel = True
        End If
        Dim WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode
        'axel
        '       SendTwillio("+85290910313", SMSMessage)
        'h.r
        '      SendTwillio("+85261102164", SMSMessage)
        '       WhatsAppNotification("Notification system shut down : " & Format(Now, "ddd dd-MMM H:MM tt"), "+85291961834", WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)
        '       WhatsAppNotification("Notification system shut down : " & Format(Now, "ddd dd-MMM H:MM tt"), "+85290910313", WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)
        '       WhatsAppNotification("Notification system shut down : " & Format(Now, "ddd dd-MMM H:MM tt"), "+85261102164", WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)


    End Sub

    Private Sub ListBoxNotificationType_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ListBoxNotificationType.SelectedIndexChanged


        'shows delivery method

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        Dim ErrDesc As String = ""
        Dim ReportName As String = ""
        ListBoxDeliveryMethod.Items.Clear()
        LabelReportDescription.Text = ""

        Try
            erpdb.Open(strconnectSQLBizCoachSettings)
            records = erpdb.Execute("Select * from NotificationDetails where NotificationName ='" & ListBoxNotificationType.SelectedItem & "' order by NotificationName")
            While Not records.EOF
                Try
                    ListBoxDeliveryMethod.Items.Add(records.Fields("DeliveryMethod").Value.ToString.Trim)
                Catch ex As Exception
                    ReportName = ""
                End Try
                LabelReportDescription.Text = records.Fields("ReportDescription").Value.ToString.Trim
                records.MoveNext()
            End While
            records.Close()
        Catch ex As Exception
            ErrDesc = Err.Description
            MsgBox(Err.Description)
        End Try
        Try
            erpdb.Close()
        Catch ex As Exception

        End Try

        'if only 1 then select it
        If ListBoxDeliveryMethod.Items.Count = 1 Then
            ListBoxDeliveryMethod.SelectedIndex = 0
        End If


        'this now gets any schedulkes for them
        GetNotificationSchedule()

    End Sub

    Private Sub TestPostRequestToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles TestPostRequestToolStripMenuItem.Click


        PostReq("http://localhost:8080/test?cus=" + "Willbutthead", "", "")

    End Sub


    Private Sub CreateSpeechtextOLD()

        'http://www.voicerss.org/
        'http://www.voicerss.org/api/documentation.aspx

        If ListBoxCustomerInfo.SelectedIndex = -1 Then
            MsgBox("Select Customer")
            Exit Sub
        End If


        Dim DateToUse As Date = DateTimePickerSpeechDate.Value
        Dim SpeechString As String = "Nothing was found to say on " & Format(DateToUse, "dddd")
        GetSpeechString(ListBoxCustomerInfo.SelectedItem, SpeechString)
    End Sub


    Private Sub GetSpeechString(ByVal CustomerName, ByRef SpeechString)


        Dim DateToUse As Date = DateTimePickerSpeechDate.Value


        Dim BizCoachCustomerInformation As ADODB.Connection
        Dim RecordsCustomers As ADODB._Recordset
        Dim RecordsOutletLookup As ADODB._Recordset
        BizCoachCustomerInformation = New ADODB.Connection

        Try
            BizCoachCustomerInformation.Open(strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MessageBox.Show("Problem connecting to database!", "Connection Issues")
            Exit Sub
        End Try

        Dim DateFrom As Date = Format(DateTimePickerSpeechDate.Value, "dd-MMM-yyyy")
        Dim DateTo As Date = Format(DateTimePickerSpeechDate.Value, "dd-MMM-yyyy")
        DateFrom = DateFrom.ToShortDateString
        DateTo = DateTo.ToShortDateString
        DateTo = DateTo.AddDays(-7)
        Dim sqlstring As String = "select sum([predicted_value_numeric])  as sumpred from [Predictions] where cast([predicted_date] as date) ='" &
            Format(Now, "dd-MMM-yyyy") & "' and [predictions_name] = 'Total Net Sales - best fit'"

        RecordsCustomers = BizCoachCustomerInformation.Execute(sqlstring)

        'cast([Date Record] as date) = '" & Format(DailyReportDate, "dd-MMM-yyyy") 

        'its now possible that there is a parent company so look up that also
        SpeechString = "BizCoach has projected this month end sales to be "

        Dim NumOutlets As Int16 = 0
        'only use 3 outlets as cant use too many characters
        Dim SalesPreviousPeriod As Decimal = 0
        Dim PreviousPeriod As Boolean = False
        Dim OverallSales As Decimal = 0
        Dim OverallSalesprevious As Decimal = 0
        Dim DateOfSales As Date = Now

        While Not RecordsCustomers.EOF
            Try
                OverallSales = RecordsCustomers.Fields("sumpred").Value
            Catch ex As Exception
                OverallSales = 0
            End Try

            RecordsCustomers.MoveNext()
        End While
        RecordsCustomers.Close()

        sqlstring = "select sum([Total Net Sales])  as sumpred from [POSSales] where cast([Date Record] as date) >='" &
            Format(Now, "01-MMM-yyyy") & "'"
        RecordsCustomers = BizCoachCustomerInformation.Execute(sqlstring)
        While Not RecordsCustomers.EOF
            Try
                OverallSales = OverallSales + RecordsCustomers.Fields("sumpred").Value
            Catch ex As Exception
                OverallSales = OverallSales
            End Try

            RecordsCustomers.MoveNext()
        End While

        RecordsCustomers.Close()


        Try
            SpeechString = SpeechString & Format(OverallSales, "#,###") & "$" & " for your business. "

        Catch ex As Exception
            MsgBox("speech error")
        End Try

        'now by outlet
        sqlstring = "select sum([predicted_value_numeric])  as sumpred, [Outlet Name] from [Predictions] where cast([predicted_date] as date) =" &
                "'" & Format(Now, "01-MMM-yyyy") & "' and [predictions_name] = 'Total Net Sales - best fit' group by [Outlet Name] order by [Outlet Name]"

        '    "select sum([Total Net Sales])  as sumpred from [POSSales] where cast([Date Record] as date) >='" &
        '       Format(Now, "01-MMM-yyyy") & "'"

        RecordsCustomers = BizCoachCustomerInformation.Execute(sqlstring)
        Dim counter01 As Int16 = 0
        Dim OutletFullNameTemp As String = ""

        While Not RecordsCustomers.EOF

            'looks up full outlet name if available
            RecordsOutletLookup = BizCoachCustomerInformation.Execute("select * from [Outlet Details] where [Outlet Name]='" & RecordsCustomers.Fields("Outlet Name").Value.ToString.Trim & "'")
            OutletFullNameTemp = ""
            While Not RecordsOutletLookup.EOF
                OutletFullNameTemp = RecordsOutletLookup.Fields("Description").Value
                RecordsOutletLookup.MoveNext()
            End While
            RecordsOutletLookup.Close()
            If OutletFullNameTemp = "" Then
                OutletFullNameTemp = RecordsCustomers.Fields("Outlet Name").Value.ToString.Trim
            End If

            'gets the actuals
            RecordsOutletLookup = BizCoachCustomerInformation.Execute("select sum([Total Net Sales]) as SumSales from [POSSales] where [Outlet Name]='" & RecordsCustomers.Fields("Outlet Name").Value.ToString.Trim &
                                                                      "' and cast([Date Record] as date)  <='" & Format(Now.AddDays(-1), "dd/MMM/yyyy") &
                                                                      "' and cast([Date Record] as date)  >='" & "01/" & Format(Now.AddDays(-1), "MMM/yyyy") & "'")
            OverallSales = 0
            While Not RecordsOutletLookup.EOF
                Try
                    OverallSales = RecordsOutletLookup.Fields("SumSales").Value
                Catch ex As Exception
                    OverallSales = 0
                End Try

                RecordsOutletLookup.MoveNext()
            End While
            RecordsOutletLookup.Close()

            '     OverallSales = OverallSales + RecordsCustomers.Fields("sumpred").Value
            If counter01 = 0 Then
                SpeechString = SpeechString & "Your Outlet " & OutletFullNameTemp & " has projection of " & Format(RecordsCustomers.Fields("sumpred").Value + OverallSales, "#,###") & "$. "
            Else
                SpeechString = SpeechString & "" & OutletFullNameTemp & " projection " & Format(RecordsCustomers.Fields("sumpred").Value + OverallSales, "#,###") & "$. "
            End If

            counter01 += 1

            RecordsCustomers.MoveNext()
        End While

        RecordsCustomers.Close()

        BizCoachCustomerInformation.Close()
        TextBoxSpeechText.Text = SpeechString



    End Sub

    Private Sub TestTwillioToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles TestTwillioToolStripMenuItem.Click

        ' Find your Account Sid and Auth Token at twilio.com/console

        Const accountSid As String = "AC1e0d11dff22f0b82a5229b9a3be68a9b"
        Const authToken As String = "8a66a1b5d5d1c5248089c71f42058b98"
        TwilioClient.Init(accountSid, authToken)
        '    Dim [to] = New PhoneNumber(ReceiversPhoneNumber)
        Dim [to] = New PhoneNumber("+85291961834")


        Dim message = MessageResource.Create([to], from:=New PhoneNumber("+14159156688"), body:="Voice")
        Console.WriteLine(message.Sid)

    End Sub



    Private Sub ButtonAWSSpeech_Click(sender As Object, e As EventArgs) Handles ButtonAWSSpeech.Click
        ButtonAWSSpeech.BackColor = Color.LightSalmon
        ButtonAWSSpeech.Refresh()

        AWSPollySpeak(TextBoxSpeechText.Text.Trim, "InitialSpeak")

        ButtonAWSSpeech.BackColor = Color.LightGreen
        ButtonAWSSpeech.Refresh()
    End Sub

    Private Sub createspeechhtml(ByVal Htmlforspeech, ByRef htmlforspeechpublish)
        htmlforspeechpublish = "<b>Your data is loaded, click on the link </b>" & "<br /><br />" &
            "<br /><br />" & "<a href=""" & Htmlforspeech & """>Sales information</a>" & "<br /><br /><br /><br />"

        'puts the bizcoach logo
        htmlforspeechpublish = htmlforspeechpublish & "    <img src = ""http://aagilitycom.ipage.com/wp-content/uploads/2017/12/BizCoach_small.png"" alt=""BizCoach"" ;  >"

    End Sub


    Private Sub ButtonPublishSpeechToFTP_Click(sender As Object, e As EventArgs) Handles ButtonPublishSpeechToFTP.Click

        If TextBoxSpeechText.Text.Trim = "" Then
            MsgBox("Generate speech")
            Exit Sub
        End If

        ButtonPublishSpeechToFTP.BackColor = Color.LightSalmon
        ButtonPublishSpeechToFTP.Refresh()


        PublishSpeechtoImpala(TextBoxSpeechText.Text.Trim, "Test")

        ButtonPublishSpeechToFTP.BackColor = Color.LightGreen
        ButtonPublishSpeechToFTP.Refresh()

    End Sub



    Private Sub SendInitialNotification(ByRef InitialDesktopNotificationText)
        'this send the initail notification to the new user
        Dim DailyReportHTMLEmailString = ""
        'creates the initial notification and the speech
        InitialCustomerNotification(DailyReportHTMLEmailString, Now.AddDays(-1), InitialDesktopNotificationText)

        Dim UpdateStatus As String = ""

        'gets the email list
        Dim EmailString As String = ""
        GetUserNamesBizCoach(ListBoxCustomerInfo.SelectedItem, EmailString)

        AutoEmailMessage365(DailyReportHTMLEmailString, "Sales Report", "Daily Sales Forecast", True, EmailString, "", "",
                            "Test", "", "", "applicationserver@impalacloud.com")

        UpdateCustomerLog(ListBoxCustomerInfo.SelectedItem, Now, Now,
                          "Ran OK", "Initial notification sent for " & ListBoxCustomerInfo.SelectedItem, Now, Now,
                              "Initial notification ran for " & ListBoxCustomerInfo.SelectedItem, "")

    End Sub


    Public Sub InitialCustomerNotification(ByRef DailyReportHTMLEmailString As String, ByRef DailyReportDate As Date,
                                           ByRef InitialDesktopNotificationText As String)

        'this is a daily report that is based upon yesterdays sales
        'it compares this to the monthly and last month figures

        'dont use KPIs now as may be a timing issue

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        Dim recordsLookup As ADODB._Recordset
        Dim RecordsCustomers As ADODB._Recordset
        Dim RecordsOutletLookup As ADODB._Recordset
        erpdb = New ADODB.Connection
        erpdb.Open(strconnectSQLBizCoachCustomerDataSQL)
        Dim SalesYesterday As Integer = 0
        Dim SalesMTDYesterday As Integer = 0
        Dim OutletName As String = ""
        Dim SalesYesterdayLastWeek As Integer = 0
        Dim SalesLastMonthVariance As Decimal = 0
        Dim SalesYesterdayLastWeekVariance As Decimal = 0
        Dim SalesLastMonthToDate As Integer = 0
        Dim StartDateFrom01 As Date = Now.ToShortDateString
        Dim StartDateTo01 As Date = Now.ToShortDateString
        Dim SQLStatement As String = ""
        Dim MonthEndSalesProjection As Decimal = 0
        DailyReportHTMLEmailString = ""

        'used for demo companies to go back 1 year

        Dim DemoParameter As Int16 = 0
        'uses UTC time so need to take away 8 hours or use HongKongLoginMoment

        DailyReportDate = DailyReportDate.ToShortDateString

        Dim DaysInMonth As Int16 = System.DateTime.DaysInMonth(Now.Year, Now.Month)

        'can have multiple prediction models so need to get the latest
        Dim sqlstring As String = "select cast([prediction_created_on] as date) as LatestDate from [Predictions] order by predicted_date desc"

        records = erpdb.Execute(sqlstring)
        Dim LatestDate As Date = Now.AddYears(-5)
        While Not records.EOF
            Try
                LatestDate = records.Fields("LatestDate").Value
                Exit While
            Catch ex As Exception
                MonthEndSalesProjection = 0
            End Try
            records.MoveNext()
        End While
        records.Close()
        'now has the latest predictions

        sqlstring = "select sum([predicted_value_numeric])  as sumpred from [Predictions] where cast([predicted_date] as date) >='" &
            Format(Now, "dd-MMM-yyyy") & "' and cast([predicted_date] as date) <='" & DaysInMonth & Format(Now, "-MMM-yyyy") &
            "' and [predictions_name] = 'Total Net Sales - best fit' and cast([prediction_created_on] as date) ='" & Format(LatestDate, "dd-MMM-yyyy") & "'"


        records = erpdb.Execute(sqlstring)


        SalesLastMonthToDate = 0
        Dim PredictionAvailable As Boolean = False
        While Not records.EOF
            Try
                MonthEndSalesProjection = records.Fields("sumpred").Value
                PredictionAvailable = True
            Catch ex As Exception
                MonthEndSalesProjection = 0
            End Try
            records.MoveNext()
        End While
        records.Close()


        sqlstring = "select sum([Total Net Sales])  as sumpred from [POSSales] where cast([Date Record] as date) <='" &
            Format(Now.AddDays(-1), "dd-MMM-yyyy") & "' and cast([Date Record] as date) >='" & Format(Now, "01-MMM-yyyy") & "'"

        records = erpdb.Execute(sqlstring)

        While Not records.EOF
            Try
                MonthEndSalesProjection = MonthEndSalesProjection + records.Fields("sumpred").Value
            Catch ex As Exception
                MonthEndSalesProjection = 0
            End Try
            records.MoveNext()
        End While
        records.Close()


        'text for desktop
        If PredictionAvailable = False Then
            InitialDesktopNotificationText = "Monthly sales US$ " & Format(MonthEndSalesProjection, "#,##0") & ", not yet enough history for predictions!"
        Else
            InitialDesktopNotificationText = "Full month prediction is US$ " & Format(MonthEndSalesProjection, "#,##0")
        End If


        'puts the bizcoach logo
        DailyReportHTMLEmailString = "    <img src = ""http://aagilitycom.ipage.com/wp-content/uploads/2017/12/BizCoach_small.png"" alt=""BizCoach"" ;  ><br /><br />"
        DailyReportHTMLEmailString = DailyReportHTMLEmailString & "BizCoach has forecasted this full month's sales to be " & Format(MonthEndSalesProjection, "US$ #,###,##0") & " for your business.<br /><br />"
        DailyReportHTMLEmailString = DailyReportHTMLEmailString & "<br />" & "<br />" &
                                                     "<table border=1><col width=""400""><col width=""250""><col width=""250""><col width=""250""><tr>" &
                                                     "<td><b>Outlet Sales (US$)</td>" &
                                                     "<td><b><p  style =""text-align:center"">Month Fcst</td>" &
                                                     "<td><b><p  style =""text-align:center"">MTD</b></td>" &
                                                      "<td><b><p  style =""text-align:center"">Yesterday</b></td>" &
                                                    "</b></tr>"
        'now gets the individual outlets
        'now sums up
        '     records = erpdb.Execute("Select sum([KPI Value Number]) as Sumsales, [Outlet Name] from [KPI Values] where [KPI Name] ='POS Daily Sales (today)' group by [Outlet Name] order by [Outlet Name]")


        'the initial speech
        'BizCoach has projected this month end sales to be 219,127$ for your business. Your Outlet I T S Boston has projection of 11,662$. I T S Los Angeles projection 80,991$. I T S Miami projection 16,278$. I T S Online projection 19,383$. 
        TextBoxSpeechText.Text = "BizCoach has projected this month end sales to be " & Format(MonthEndSalesProjection, "#,###,##0") & " $ for your business. "


        sqlstring = "select distinct [Outlet Name] from [Outlet Details]  order by [Outlet Name]"

        '    "select sum([Total Net Sales])  as sumpred from [POSSales] where cast([Date Record] as date) >='" &
        '       Format(Now, "01-MMM-yyyy") & "'"

        RecordsCustomers = erpdb.Execute(sqlstring)
        Dim counter01 As Int16 = 0
        Dim OutletFullNameTemp As String = ""
        Dim OverallSales As Decimal = 0

        While Not RecordsCustomers.EOF

            'looks up full outlet name if available
            RecordsOutletLookup = erpdb.Execute("select * from [Outlet Details] where [Outlet Name]='" & RecordsCustomers.Fields("Outlet Name").Value.ToString.Trim & "'")
            OutletFullNameTemp = ""
            While Not RecordsOutletLookup.EOF
                Try
                    OutletFullNameTemp = RecordsOutletLookup.Fields("Description").Value
                Catch ex As Exception
                    OutletFullNameTemp = ""
                End Try

                RecordsOutletLookup.MoveNext()
            End While
            RecordsOutletLookup.Close()
            If OutletFullNameTemp = "" Then
                OutletFullNameTemp = RecordsCustomers.Fields("Outlet Name").Value.ToString.Trim
            End If

            'gets the actuals
            sqlstring = "select sum([Total Net Sales]) as SumSales from [POSSales] where [Outlet Name]='" & RecordsCustomers.Fields("Outlet Name").Value.ToString.Trim &
                                                                      "' and cast([Date Record] as date)  <='" & Format(Now.AddDays(-1), "dd-MMM-yyyy") &
                                                                      "' and cast([Date Record] as date)  >='" & "01-" & Format(Now.AddDays(-1), "MMM-yyyy") & "'"

            RecordsOutletLookup = erpdb.Execute(sqlstring)
            OverallSales = 0
            While Not RecordsOutletLookup.EOF
                Try
                    SalesMTDYesterday = RecordsOutletLookup.Fields("SumSales").Value
                Catch ex As Exception
                    SalesMTDYesterday = 0
                End Try

                RecordsOutletLookup.MoveNext()
            End While
            RecordsOutletLookup.Close()



            sqlstring = "select sum([Total Net Sales]) as SumSales from [POSSales] where [Outlet Name]='" & RecordsCustomers.Fields("Outlet Name").Value.ToString.Trim &
                                                                      "' and cast([Date Record] as date)  ='" & Format(Now.AddDays(-1), "dd-MMM-yyyy") & "'"

            RecordsOutletLookup = erpdb.Execute(sqlstring)

            SalesYesterday = 0
            While Not RecordsOutletLookup.EOF
                Try
                    SalesYesterday = RecordsOutletLookup.Fields("SumSales").Value
                Catch ex As Exception
                    SalesYesterday = 0
                End Try

                RecordsOutletLookup.MoveNext()
            End While
            RecordsOutletLookup.Close()

            sqlstring = "select sum([predicted_value_numeric])  as sumpred from [Predictions] where cast([predicted_date] as date) >='" &
            Format(Now, "dd-MMM-yyyy") & "' and  cast([predicted_date] as date) <='" & DaysInMonth & Format(Now, "-MMM-yyyy") &
            "' and [predictions_name] = 'Total Net Sales - best fit' and [Outlet Name]='" & RecordsCustomers.Fields("Outlet Name").Value.ToString.Trim &
            "' and cast([prediction_created_on] as date) ='" & Format(LatestDate, "dd-MMM-yyyy") & "'"

            RecordsOutletLookup = erpdb.Execute(sqlstring)

            MonthEndSalesProjection = 0
            While Not RecordsOutletLookup.EOF
                Try
                    MonthEndSalesProjection = RecordsOutletLookup.Fields("sumpred").Value
                Catch ex As Exception
                    MonthEndSalesProjection = 0
                End Try
                RecordsOutletLookup.MoveNext()
            End While
            RecordsOutletLookup.Close()


            sqlstring = "select sum([Total Net Sales])  as sumpred from [POSSales] where cast([Date Record] as date) >='" &
            Format(Now, "01-MMM-yyyy") & "' and cast([Date Record] as date) <='" & Format(Now.AddDays(-1), "dd-MMM-yyyy") & "' and [Outlet Name]='" &
            RecordsCustomers.Fields("Outlet Name").Value.ToString.Trim & "'"
            RecordsOutletLookup = erpdb.Execute(sqlstring)

            While Not RecordsOutletLookup.EOF
                Try
                    MonthEndSalesProjection = MonthEndSalesProjection + RecordsOutletLookup.Fields("sumpred").Value
                Catch ex As Exception
                    MonthEndSalesProjection = 0
                End Try
                RecordsOutletLookup.MoveNext()
            End While
            RecordsOutletLookup.Close()




            DailyReportHTMLEmailString = DailyReportHTMLEmailString & "<tr><td>" & OutletFullNameTemp & "</td>" &
                                         "<td>" & "<p  style =""text-align:right"">" & Format(MonthEndSalesProjection, "#,###,###") & "</td>" &
                                         "<td>" & "<p  style =""text-align:right"">" & Format(SalesMTDYesterday, "#,###,###") & "</td>" &
                                        "<td>" & "<p  style =""text-align:right"">" & Format(SalesYesterday, "#,###,###") & "</tr>"

            'the initial speech
            'BizCoach has projected this month end sales to be 219,127$ for your business. Your Outlet I T S Boston has projection of 11,662$. I T S Los Angeles projection 80,991$. I T S Miami projection 16,278$. I T S Online projection 19,383$. 

            If counter01 = 0 Then
                TextBoxSpeechText.Text = TextBoxSpeechText.Text & " Your Outlet " & OutletFullNameTemp & " has a full month forecast of " & Format(MonthEndSalesProjection, "#,###,###") & " $. "
            Else
                TextBoxSpeechText.Text = TextBoxSpeechText.Text & OutletFullNameTemp & " forecast " & Format(MonthEndSalesProjection, "#,###,###") & " $. "
            End If

            counter01 += 1
            RecordsCustomers.MoveNext()
        End While
        RecordsCustomers.Close()
        erpdb.Close()

        'closes the table
        DailyReportHTMLEmailString = "" & DailyReportHTMLEmailString & "</table></span><br /><hr /><br />"

        'creates the speech text and publishes it
        AWSPollySpeak(TextBoxSpeechText.Text.Trim, "InitialSpeak")
        PublishSpeechtoImpala(TextBoxSpeechText.Text.Trim, "InitialSpeak")

        'encrypts the customer string and date so can be used for a lookup

        DailyReportHTMLEmailString = DailyReportHTMLEmailString & "If you would like BizCoach to read your projections click <a href=""http://aagilitycom.ipage.com/custview/" &
            TextBoxPublishLocationName.Text & """>here</a><br /><br />"

        DailyReportHTMLEmailString = DailyReportHTMLEmailString & "Please give feedback to support@impalacloud.com<br /><br />"

        DailyReportHTMLEmailString = DailyReportHTMLEmailString & "<br />"

    End Sub

    Private Sub InitialNotificationToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles InitialNotificationToolStripMenuItem.Click

        If ListBoxCustomerInfo.SelectedIndex = -1 Then
            MsgBox("Select customer")
            Exit Sub
        End If
        Dim InitialDesktopNotificationText As String = ""

        SendInitialNotification(InitialDesktopNotificationText)


        'sends desktop notification
        Dim DesktopMessageText As String = InitialDesktopNotificationText
        Dim DesktopMessageTitle As String = "Initial Notification"
        Dim DesktopMessageNotificationURL = "http://aagilitycom.ipage.com/custview/07Jan1801glorystores.htm"
        Dim CustomerName As String = ListBoxCustomerInfo.SelectedItem
        Dim DesktopNotificationStatus
        Dim DestktopStatus
        Dim DesktopReference

        DesktopNotification(DesktopMessageText, DesktopMessageTitle, DesktopMessageNotificationURL, CustomerName,
                                     DesktopNotificationStatus, DestktopStatus, DesktopReference)


        SendTwillio("+" & "85291961834", DesktopMessageText)



    End Sub


    Private Sub CopyG1toITSandTransform()

        '        G1  INS

        'TH6    ITSNYC
        'TH11    ITSBOS
        'TH4    ITSLAX
        'TH7    ITSMIA
        'TH10    ITSONL

        ButtonCopyG1toITS.BackColor = Color.LightSalmon
        ButtonCopyG1toITS.Refresh()

        ProgressBarG1Load.Maximum = 500
        ProgressBarG1Load.Value = 0
        ProgressBarG1Load.Refresh()

        Dim strconnectSQLBizCoachG1DataSQL As String = "UID=" & "ImpRDSBizCoach" & ";PWD=" & "impBiz16!" & ";DATABASE=" & "BizCoachDataGidumal" &
                        ";SERVER=awsrdsbizcoach.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433;Provider=SQLOLEDB"

        Dim strconnectSQLBizCoachITSDataSQL As String = "UID=" & "BizCoachSQLStd" & ";PWD=" & "PaLm78jxY" & ";DATABASE=" & "BizCoachDataInTheShade" &
                        ";SERVER=awsrdsbizcoachsqlstandard.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433;Provider=SQLOLEDB"

        Dim strconnectSQLBizCoachITSDataSQLexpress As String = "UID=" & "BizCoachDataLoading" & ";PWD=" & "JaMyt45!ord" & ";DATABASE=" & "BizCoachDataInTheShade" &
                        ";SERVER=ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433;Provider=SQLOLEDB"



        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        erpdb.Open(strconnectSQLBizCoachG1DataSQL)

        Dim countertemp As Int32 = 0
        Dim DateRecordTemp As Date = Now
        Dim ReferenceNumberTemp As String = ""
        Dim ReferenceNumberNewTemp As String = ""
        Dim OutletNameTemp As String = ""
        Dim OutletNameNewTemp As String = ""
        Dim BrandTemp As String = ""
        Dim BrandNewTemp As String = ""
        Dim TotalNetSalesTemp As String = ""
        Dim ItemNameTemp As String = ""
        Dim QuantitySoldTemp As String = ""
        Dim COGSTemp As String = ""
        Dim PaymentType01Temp As String = ""
        Dim DiscountTemp As Decimal = 0
        Dim sqldeletestatement As String = ""
        Dim sqlinsertstatement As String = ""
        '     Dim VoidedTemp As Boolean = False
        Dim LineNumberTemp As String = ""
        Dim PriceTemp As Decimal = 0
        Dim UniqueIDTemt As Guid = System.Guid.NewGuid
        Dim newhour As Int16 = 0
        Dim newMinute As Int16 = 0
        Dim DateTimeNew As Date = Now


        Dim SqlStatement As String = "Select * from POSSales where [Outlet Name] in ('TH6','TH11','TH4','TH7','TH10') and " &
            "[Date Record] >='" & Format(Now.AddDays(NumericUpDownDemoCopyDaysBack.Value * -1), "dd-MMM-yyyy") & "' order by [Date Record], [Reference Number], [Line Number]"

        records = erpdb.Execute(SqlStatement)

        While Not records.EOF

            DateRecordTemp = records.Fields("Date Record").Value
            'allocates a time
            Randomize()
            ' The program will generate a number from 0 to 50
            newhour = Int(Rnd() * 10) + 1
            newhour = newhour + 8
            newMinute = Int(Rnd() * 60) + 0
            DateTimeNew = DateRecordTemp.AddMinutes(newMinute)
            DateTimeNew = DateTimeNew.AddHours(newhour)
            DateRecordTemp = DateTimeNew

            ReferenceNumberTemp = records.Fields("Reference Number").Value.ToString.Trim
            OutletNameTemp = records.Fields("Outlet Name").Value.ToString.Trim
            Try
                BrandTemp = records.Fields("Brand").Value.ToString.Trim
            Catch ex As Exception
                BrandTemp = ""
            End Try

            TotalNetSalesTemp = records.Fields("Line Total").Value / 7.8
            ItemNameTemp = records.Fields("ItemName").Value.ToString.Trim
            QuantitySoldTemp = records.Fields("Quantity Sold").Value
            LineNumberTemp = records.Fields("Line Number").Value
            Try
                PriceTemp = records.Fields("Price").Value / 7.8
            Catch ex As Exception
                PriceTemp = 0
            End Try
            'does discount
            DiscountTemp = 0
            '     If records.Fields("Line_Discount_Value").Value <> 0 Then
            '        DiscountTemp = records.Fields("Line_Discount_Value").Value / 7.8
            '    End If
            '   If records.Fields("Line_Discount_Percent").Value <> 0 Then
            '       DiscountTemp = Val(records.Fields("Line_Discount_Percent").Value) * (PriceTemp / 100)
            '      DiscountTemp = DiscountTemp / 7.8
            '  End If
            Try
                COGSTemp = records.Fields("COGS").Value / 7.8
            Catch ex As Exception
                COGSTemp = 0
            End Try
            Try
                If LineNumberTemp = 1 Then
                    PaymentType01Temp = records.Fields("PaymentType01").Value.ToString.Trim
                End If
            Catch ex As Exception
                '            PaymentType01Temp = ""
            End Try
            If OutletNameTemp = "TH11" Then
                ReferenceNumberNewTemp = Replace(ReferenceNumberTemp, "TH11", "ITSBOS")
                OutletNameNewTemp = "ITSBOS"
            ElseIf OutletNameTemp = "TH6" Then
                ReferenceNumberNewTemp = Replace(ReferenceNumberTemp, "TH6", "ITSNYC")
                OutletNameNewTemp = "ITSNYC"
            ElseIf OutletNameTemp = "TH4" Then
                ReferenceNumberNewTemp = Replace(ReferenceNumberTemp, "TH4", "ITSLAX")
                OutletNameNewTemp = "ITSLAX"
            ElseIf OutletNameTemp = "TH7" Then
                ReferenceNumberNewTemp = Replace(ReferenceNumberTemp, "TH7", "ITSMIA")
                OutletNameNewTemp = "ITSMIA"

            ElseIf OutletNameTemp = "TH10" Then
                ReferenceNumberNewTemp = Replace(ReferenceNumberTemp, "TH10", "ITSONL")
                OutletNameNewTemp = "ITSONL"
            Else
                MsgBox("no outlet  " & OutletNameTemp)
            End If
            Try
                sqldeletestatement = "delete from POSSales where [Reference Number] ='" & ReferenceNumberNewTemp & "' and ItemName ='" & ItemNameTemp & "'"
                rs.Open(sqldeletestatement, strconnectSQLBizCoachITSDataSQL)
            Catch ex As Exception
                MsgBox(Err.Description)
            End Try

            Try
                sqldeletestatement = "delete from POSSales where [Reference Number] ='" & ReferenceNumberNewTemp & "' and ItemName ='" & ItemNameTemp & "'"
                rs.Open(sqldeletestatement, strconnectSQLBizCoachITSDataSQLexpress)
            Catch ex As Exception
                MsgBox(Err.Description)
            End Try




            'now inserts
            If BrandTemp = "Alessi" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Riedel Crystal" Then
                BrandNewTemp = "Ray-Block"
            ElseIf BrandTemp = "IFavine" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "A Anglada" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Maxwell & Williams" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Carrs" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Enesco" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Engraving" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Misc" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Nachtmann" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Nachtmann" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Accessories" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Adyr" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Ari D. Norman" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Armani" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Arora" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Arribas Brothers" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Nobile Art" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Noblesse Crystal" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Nude" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Nybro" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "OEM" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Oliver Weber" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "OnyXart" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Orchid" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Pacific China" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Barker Ellis" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Bohemia" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Bohemia Crystal" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Bottlepull" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Broadway" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Camelot" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Cantina" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Tee Maass" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Tengra" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "TH Credit Note" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "The Just Slate" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Thien Thuong" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Topazio" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Town House" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Transportation" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Trendglas" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Tyrone" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Unknown" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Valerie Graham" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Vilca" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Vimal / SSV" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Vogel" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Voucher" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Wentworth" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Wentworth Pewter" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Westplate" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Wildtrack" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Yes" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Zanetti" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Zanetto" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Zebra" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Form Glass" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Frazer & Haws" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Galway" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Gift Craft" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Grant of Dalvey" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Greggio" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Hagerty" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Halcyon Days" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Hanover House" Then
                BrandNewTemp = "Frucci"
            ElseIf BrandTemp = "Harmony Kingdom" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Hermann Bauer" Then
                BrandNewTemp = "Frada"
                ' GmbH	Frada
            ElseIf BrandTemp = "Hukka Design" Then
                BrandNewTemp = "Frada"
                '	Frada
            ElseIf BrandTemp = "Imperial" Then
                BrandNewTemp = "Frada"
                '	Frada
            ElseIf BrandTemp = "Jennifer Ulisse" Then
                BrandNewTemp = "Frada"
                '	Frada
            ElseIf BrandTemp = "John Beswick" Then
                BrandNewTemp = "Frada"
                '	Frada
            ElseIf BrandTemp = "John Jenkins" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Just Slate" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Konitz" Then
                BrandNewTemp = "Ray-Block"
            ElseIf BrandTemp = "Krosno" Then
                BrandNewTemp = "Ray-Block"
            ElseIf BrandTemp = "L Silver" Then
                BrandNewTemp = "Ray-Block"
            ElseIf BrandTemp = "L/SS" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Laguiole" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Local Silver" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "LSS" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Marcolin" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Marcolin Crystal" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "RO Nickel Plated" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Rodenhus" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Rogaska" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Roy Kirkham" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Royal Scot" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "S-Dream" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Seagull Pewter" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Clef du Vin" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Coupon" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Cristais Hering" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Crystal Art" Then
                BrandNewTemp = "Ray-Block"
                '	Ray-Block
            ElseIf BrandTemp = "Dartington" Then
                BrandNewTemp = "Ray-Block"
            ElseIf BrandTemp = "De Rosa Rinconada" Then
                BrandNewTemp = "Ray-Block"
            ElseIf BrandTemp = "Dear" Then
                BrandNewTemp = "Ray-Block"
            ElseIf BrandTemp = "Doozie" Then
                BrandNewTemp = "Ray-Block"
            ElseIf BrandTemp = "Duccio di Senga" Then
                BrandNewTemp = "Ray-Block"
            ElseIf BrandTemp = "Repair" Then
                BrandNewTemp = "Ray-Block"
            ElseIf BrandTemp = "Masini" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Massimo Lunardon" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Maxim Art" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Mesa" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Nambe" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Napoleon" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Noahs Creation" Then
                BrandNewTemp = "Oakleaf"
                ' 	Oakleaf
            ElseIf BrandTemp = "Selkirk" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Solo" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Special Order" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "SSV" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "St. Hillaire" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Suffolk" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Sushi" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Swarovski" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Swatkins" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Edinburgh Crystal" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Egizia" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Elia" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Elleffe Design" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Ercolano" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Fanny Argentine" Then
                BrandNewTemp = "Oakleaf"
                '	Oakleaf
            ElseIf BrandTemp = "Flamefield" Then
                BrandNewTemp = "Oakleaf"
            ElseIf BrandTemp = "Carrs Silverplated Cutlery" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Carrs Steel Cutlery" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Carrs Sterling Cutlery" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Casa Domani" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Casini  E Fantechi" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Casini E Fantechi" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Charlotte di Vita" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Churchill" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Classic Nouveau" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Packing" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Pernod Ricard Hong Kong & Macau" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "PL" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Premiere Collection" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Priss & Peach" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Pull It" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Raspini" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Regal" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Rental" Then
                BrandNewTemp = "Frada"
            ElseIf BrandTemp = "Casini e Fantechi" Then
                BrandNewTemp = "Frada"
            Else
                ListBoxUtilitiesInfo.Items.Add(ReferenceNumberNewTemp & ",  no Brand " & BrandTemp)
                ListBoxUtilitiesInfo.Refresh()
            End If
            'payment type mapping
            If PaymentType01Temp = "EPS" Then
                PaymentType01Temp = "Paypal"
            ElseIf PaymentType01Temp = "Receivables" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "VISA/MC"
                Else
                    PaymentType01Temp = "Credit"
                End If
            ElseIf PaymentType01Temp = "Cash" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "Paypal"
                Else
                    PaymentType01Temp = "Cash"
                End If
                'Voucher	    Cash	Paypal
            ElseIf PaymentType01Temp = "Voucher" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "Paypal"
                Else
                    PaymentType01Temp = "Cash"
                End If
                'Diners Club	American Express	American Express
            ElseIf PaymentType01Temp = "Diners Club" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "American Express"
                Else
                    PaymentType01Temp = "American Express"
                End If
                'Cheque	Cash	Paypal
            ElseIf PaymentType01Temp = "Cheque" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "Paypal"
                Else
                    PaymentType01Temp = "Cash"
                End If
                'Credit Note	Cash	Paypal
            ElseIf PaymentType01Temp = "Credit Note" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "Paypal"
                Else
                    PaymentType01Temp = "Cash"
                End If
                'Giftcard	    Cash	Paypal
            ElseIf PaymentType01Temp = "Giftcard" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "Paypal"
                Else
                    PaymentType01Temp = "Cash"
                End If
                'Sogo Coupon	Cash	
            ElseIf PaymentType01Temp = "Sogo Coupon" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "Paypal"
                Else
                    PaymentType01Temp = "Cash"
                End If
                'Sogo BOC	    VISA/MC	
            ElseIf PaymentType01Temp = "Sogo BOC" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "VISA/MC"
                Else
                    PaymentType01Temp = "VISA/MC"
                End If
            ElseIf PaymentType01Temp = "VISA/MC" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "VISA/MC"
                Else
                    PaymentType01Temp = "VISA/MC"
                End If
            ElseIf PaymentType01Temp = "Union Pay" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "Union Pay"
                Else
                    PaymentType01Temp = "Union Pay"
                End If
            ElseIf PaymentType01Temp = "Credit" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "Paypal"
                Else
                    PaymentType01Temp = "Cash"
                End If
            ElseIf PaymentType01Temp = "American Express" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "American Express"
                Else
                    PaymentType01Temp = "American Express"
                End If
            ElseIf PaymentType01Temp = "" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "Paypal"
                Else
                    PaymentType01Temp = "Cash"
                End If
            ElseIf PaymentType01Temp = "Paypal" Then
                If OutletNameNewTemp = "ITSONL" Then
                    PaymentType01Temp = "Paypal"
                Else
                    PaymentType01Temp = "Cash"
                End If
            Else
                MsgBox("no payment")
            End If
            UniqueIDTemt = System.Guid.NewGuid

            Try
                sqlinsertstatement = "Insert into [POSSales] (CompanyName, [ItemCode], [ItemName], " &
                                    "[Brand], [Outlet Name], [LastUpdated], [Reference Number],  " &
                                    "[Total Net Sales], [Quantity Sold], [COGS], [Date Record], " &
                                      "[Line Number], [PaymentType01], [Unique Identity], [Total Gross Sales], [POSSalesGroup18]" &
                                    ") Values ('" &
                                    "In The Shade" & "','" & Replace(ItemNameTemp, "'", "''") & "','" & Mid(Replace(ItemNameTemp, "'", "''"), 1, 30) & "','" &
                                    BrandNewTemp & "','" & "" & OutletNameNewTemp & "','" & Format(Now, "dd-MMM-yyyy") & "','" & ReferenceNumberNewTemp &
                                     "','" & TotalNetSalesTemp & "','" & QuantitySoldTemp & "','" & COGSTemp & "','" & Format(DateRecordTemp, "dd-MMM-yyyy HH:mm") &
                                     "','" & Val(LineNumberTemp) & "','" & PaymentType01Temp & "','" & UniqueIDTemt.ToString & "','" & TotalNetSalesTemp & "','" & ReferenceNumberTemp & "')"
                '     If VoidedTemp = False Then
                rs.Open(sqlinsertstatement, strconnectSQLBizCoachITSDataSQL)
                '    End If
            Catch ex As Exception
                MsgBox(Err.Description)
            End Try

            Try
                sqlinsertstatement = "Insert into [POSSales] (CompanyName, [ItemCode], [ItemName], " &
                                    "[Brand], [Outlet Name], [LastUpdated], [Reference Number],  " &
                                    "[Total Net Sales], [Quantity Sold], [COGS], [Date Record], " &
                                      "[Line Number], [PaymentType01], [Unique Identity], [Total Gross Sales], [POSSalesGroup18]" &
                                    ") Values ('" &
                                    "In The Shade" & "','" & Replace(ItemNameTemp, "'", "''") & "','" & Mid(Replace(ItemNameTemp, "'", "''"), 1, 30) & "','" &
                                    BrandNewTemp & "','" & "" & OutletNameNewTemp & "','" & Format(Now, "dd-MMM-yyyy") & "','" & ReferenceNumberNewTemp &
                                     "','" & TotalNetSalesTemp & "','" & QuantitySoldTemp & "','" & COGSTemp & "','" & Format(DateRecordTemp, "dd-MMM-yyyy HH:mm") &
                                     "','" & Val(LineNumberTemp) & "','" & PaymentType01Temp & "','" & UniqueIDTemt.ToString & "','" & TotalNetSalesTemp & "','" & ReferenceNumberTemp & "')"
                '     If VoidedTemp = False Then
                rs.Open(sqlinsertstatement, strconnectSQLBizCoachITSDataSQLexpress)
                '    End If
            Catch ex As Exception
                MsgBox(Err.Description)
            End Try


            countertemp += 1
            LabelG1Text.Text = countertemp & "  " & Format(DateRecordTemp, "d-MMM-yyyy")
            LabelG1Text.Refresh()
            If ProgressBarG1Load.Value = 499 Then ProgressBarG1Load.Value = 0
            ProgressBarG1Load.Value += 1
            ProgressBarG1Load.Refresh()
            records.MoveNext()
        End While
        records.Close()





        erpdb.Close()

        ButtonCopyG1toITS.BackColor = Color.LightGreen
        ButtonCopyG1toITS.Refresh()


    End Sub


    Private Sub DoRetimingOfInvoices()



        'no longer needed

        Exit Sub


        Dim strconnectSQLBizCoachG1DataSQL As String = "UID=" & "ImpRDSBizCoach" & ";PWD=" & "impBiz16!" & ";DATABASE=" & "BizCoachDataGidumal" &
                        ";SERVER=awsrdsbizcoach.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433;Provider=SQLOLEDB"

        Dim strconnectSQLBizCoachITSDataSQL As String = "UID=" & "BizCoachSQLStd" & ";PWD=" & "PaLm78jxY" & ";DATABASE=" & "BizCoachDataInTheShade" &
                        ";SERVER=awsrdsbizcoachsqlstandard.c5sz1nxmndnm.ap-southeast-1.rds.amazonaws.com,1433;Provider=SQLOLEDB"










        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        erpdb.Open(strconnectSQLBizCoachITSDataSQL)

        Dim countertemp As Int32 = 0
        Dim DateRecordTemp As Date = Now
        Dim ReferenceNumberTemp As String = ""
        Dim ReferenceNumberNewTemp As String = ""
        Dim OutletNameTemp As String = ""
        Dim OutletNameNewTemp As String = ""
        Dim BrandTemp As String = ""
        Dim BrandNewTemp As String = ""
        Dim TotalNetSalesTemp As String = ""
        Dim ItemNameTemp As String = ""
        Dim QuantitySoldTemp As String = ""
        Dim COGSTemp As String = ""
        Dim PaymentType01Temp As String = ""
        Dim DiscountTemp As Decimal = 0
        Dim sqldeletestatement As String = ""
        Dim sqlinsertstatement As String = ""
        '     Dim VoidedTemp As Boolean = False
        Dim LineNumberTemp As String = ""
        Dim PriceTemp As Decimal = 0
        Dim UniqueIDTemt As Guid = System.Guid.NewGuid
        Dim SqlStatement As String = ""

        Dim DateTimeNew As Date = Now
        Dim newhour As Int16 = 0
        Dim random1 As New Random
        Dim newMinute As Integer = 0
        Dim InvoiceArray(50000, 5)
        'loads all dates into an array
        Dim Counter001 As Integer = 0

        Dim maxVal As Integer = 0
        Dim minVal As Integer = 999999


        SqlStatement = "Select * from POSSales where [Date Record] >= '23/Jan/2018' order by [Date Record], [Reference Number], [Line Number]"

        records = erpdb.Execute(SqlStatement)
        While Not records.EOF

            DateRecordTemp = records.Fields("Date Record").Value
            ReferenceNumberTemp = records.Fields("Reference Number").Value.ToString.Trim
            OutletNameTemp = records.Fields("Outlet Name").Value.ToString.Trim
            Try
                BrandTemp = records.Fields("Brand").Value.ToString.Trim
            Catch ex As Exception
                BrandTemp = ""
            End Try

            '     TotalNetSalesTemp = records.Fields("Line Total").Value
            ItemNameTemp = records.Fields("ItemName").Value.ToString.Trim
            QuantitySoldTemp = records.Fields("Quantity Sold").Value
            LineNumberTemp = records.Fields("Line Number").Value
            If maxVal < Val(Mid(ReferenceNumberTemp, 8, 12)) Then
                maxVal = Val(Mid(ReferenceNumberTemp, 8, 12))
            End If

            If minVal > Val(Mid(ReferenceNumberTemp, 8, 12)) Then
                minVal = Val(Mid(ReferenceNumberTemp, 8, 12))
            End If

            Try
                If records.Fields("MonthNumber").Value <> "" Then


                    InvoiceArray(Counter001, 0) = ReferenceNumberTemp
                    InvoiceArray(Counter001, 1) = records.Fields("Line Number").Value
                    InvoiceArray(Counter001, 2) = records.Fields("YearCode").Value
                    InvoiceArray(Counter001, 3) = records.Fields("MonthNumber").Value
                    InvoiceArray(Counter001, 4) = records.Fields("DayOfMonth").Value
                    InvoiceArray(Counter001, 5) = OutletNameTemp
                    Counter001 += 1
                End If
            Catch ex As Exception

            End Try


            LabelG1Text.Text = Counter001
            LabelG1Text.Refresh()
            '    If ProgressBarG1Load.Value >= ProgressBarG1Load.Maximum Then ProgressBarG1Load.Value = 0
            '   ProgressBarG1Load.Value += 1
            '  ProgressBarG1Load.Refresh()

            records.MoveNext()
        End While
        records.Close()





        Dim edate = "10/12/2009"
        Dim expenddt As Date
        Dim format1() = {"dd/MM/yyyy", "d/M/yyyy", "dd-MM-yyyy"}



        Dim foundInvoice As Boolean = False
        ' OutletNameTemp = "ITSONL-"   now loaded

        'different way now
        '        For counter = minVal To maxVal

        For counter = 62091 To maxVal

            'gets the date from the array
            foundInvoice = False
            For Counter01 = 0 To 50000

                If InvoiceArray(Counter01, 0) = "ITSONL-" & counter Then
                    edate = InvoiceArray(Counter01, 4).ToString.Trim & "/" & InvoiceArray(Counter01, 3).ToString.Trim & "/" & InvoiceArray(Counter01, 2).ToString.Trim
                    '                 edate = "10/12/2009"

                    OutletNameTemp = InvoiceArray(Counter01, 5).ToString.Trim


                    Date.TryParseExact(edate, format1,
    System.Globalization.DateTimeFormatInfo.InvariantInfo,
    Globalization.DateTimeStyles.None, expenddt)



                    DateTimeNew = expenddt
                    foundInvoice = True
                    Exit For
                End If


                If InvoiceArray(Counter01, 0) = "ITSNYC-" & counter Then
                    edate = InvoiceArray(Counter01, 4).ToString.Trim & "/" & InvoiceArray(Counter01, 3).ToString.Trim & "/" & InvoiceArray(Counter01, 2).ToString.Trim
                    '     edate = "10/12/2009"

                    OutletNameTemp = InvoiceArray(Counter01, 5).ToString.Trim


                    Date.TryParseExact(edate, format1,
    System.Globalization.DateTimeFormatInfo.InvariantInfo,
    Globalization.DateTimeStyles.None, expenddt)



                    DateTimeNew = expenddt
                    foundInvoice = True
                    Exit For
                End If


                If InvoiceArray(Counter01, 0) = "ITSLAX-" & counter Then
                    edate = InvoiceArray(Counter01, 4).ToString.Trim & "/" & InvoiceArray(Counter01, 3).ToString.Trim & "/" & InvoiceArray(Counter01, 2).ToString.Trim
                    '      edate = "10/12/2009"

                    OutletNameTemp = InvoiceArray(Counter01, 5).ToString.Trim


                    Date.TryParseExact(edate, format1,
    System.Globalization.DateTimeFormatInfo.InvariantInfo,
    Globalization.DateTimeStyles.None, expenddt)



                    DateTimeNew = expenddt
                    foundInvoice = True
                    Exit For
                End If
                If InvoiceArray(Counter01, 0) = "ITSBOS-" & counter Then
                    edate = InvoiceArray(Counter01, 4).ToString.Trim & "/" & InvoiceArray(Counter01, 3).ToString.Trim & "/" & InvoiceArray(Counter01, 2).ToString.Trim
                    '       edate = "10/12/2009"

                    OutletNameTemp = InvoiceArray(Counter01, 5).ToString.Trim


                    Date.TryParseExact(edate, format1,
    System.Globalization.DateTimeFormatInfo.InvariantInfo,
    Globalization.DateTimeStyles.None, expenddt)



                    DateTimeNew = expenddt
                    foundInvoice = True
                    Exit For
                End If

                If InvoiceArray(Counter01, 0) = "ITSMIA-" & counter Then
                    edate = InvoiceArray(Counter01, 4).ToString.Trim & "/" & InvoiceArray(Counter01, 3).ToString.Trim & "/" & InvoiceArray(Counter01, 2).ToString.Trim
                    ' edate = "10/12/2009"

                    OutletNameTemp = InvoiceArray(Counter01, 5).ToString.Trim


                    Date.TryParseExact(edate, format1,
    System.Globalization.DateTimeFormatInfo.InvariantInfo,
    Globalization.DateTimeStyles.None, expenddt)



                    DateTimeNew = expenddt
                    foundInvoice = True
                    Exit For
                End If


            Next

            '           LabelG1Text.Text = counter
            '     LabelG1Text.Refresh()

            '         Console.WriteLine(counter)

            If foundInvoice = True Then


                Randomize()
                ' The program will generate a number from 0 to 50
                newhour = Int(Rnd() * 10) + 1
                newhour = newhour + 20
                newMinute = Int(Rnd() * 60) + 0
                DateTimeNew = DateTimeNew.AddMinutes(newMinute)
                DateTimeNew = DateTimeNew.AddHours(newhour)
                Try

                    If DateTimeNew > Now.AddYears(-10) Then



                        sqlinsertstatement = "Update [POSSales] set [Date Record] ='" & Format(DateTimeNew, "dd-MMM-yyyy H:mm") &
                        "', HourCode ='" & Val(Format(DateTimeNew, "HH")) & "', MinuteCode ='" & newMinute & "' where [Reference Number] ='" & OutletNameTemp & "-" & counter & "'"

                        '     If VoidedTemp = False Then
                        rs.Open(sqlinsertstatement, strconnectSQLBizCoachITSDataSQL)
                    End If

                    '    End If
                Catch ex As Exception
                    MsgBox(Err.Description)
                End Try

                LabelG1Text.Text = OutletNameTemp & counter
                LabelG1Text.Refresh()
                If ProgressBarG1Load.Value >= ProgressBarG1Load.Maximum Then ProgressBarG1Load.Value = 0
                ProgressBarG1Load.Value += 1
                ProgressBarG1Load.Refresh()
            End If


            LabelG1Text.Text = OutletNameTemp & "-" & counter
            LabelG1Text.Refresh()
        Next



        Exit Sub

        SqlStatement = "Select * from POSSales where [Outlet Name] in ('TH6','TH11','TH4','TH7','TH10') and " &
            "[Date Record] >='" & Format(Now.AddDays(-3), "dd-MMM-yyyy") & "' order by [Date Record], [Reference Number], [Line Number]"

        'this now goes through and allocates the time to any that dont have times

        SqlStatement = "Select * from POSSales where  " &
            "[Date Record] >='" & Format(Now.AddDays(-100), "dd-MMM-yyyy") & "' order by [Date Record], [Reference Number], [Line Number]"

        records = erpdb.Execute(SqlStatement)
        While Not records.EOF

            DateRecordTemp = records.Fields("Date Record").Value
            ReferenceNumberTemp = records.Fields("Reference Number").Value.ToString.Trim
            OutletNameTemp = records.Fields("Outlet Name").Value.ToString.Trim
            Try
                BrandTemp = records.Fields("Brand").Value.ToString.Trim
            Catch ex As Exception
                BrandTemp = ""
            End Try

            '     TotalNetSalesTemp = records.Fields("Line Total").Value
            ItemNameTemp = records.Fields("ItemName").Value.ToString.Trim
            QuantitySoldTemp = records.Fields("Quantity Sold").Value
            LineNumberTemp = records.Fields("Line Number").Value
            Try
                PriceTemp = records.Fields("Price").Value / 7.8
            Catch ex As Exception
                PriceTemp = 0
            End Try

            If DateRecordTemp.Hour = "0" And DateRecordTemp.Minute = "0" And DateRecordTemp.Second = "0" Then
                'this has no time


                Randomize()
                ' The program will generate a number from 0 to 50
                newhour = Int(Rnd() * 10) + 1
                newhour = newhour + 10
                newMinute = Int(Rnd() * 60) + 0
                DateTimeNew = DateRecordTemp.AddMinutes(newMinute)
                DateTimeNew = DateTimeNew.AddHours(newhour)
                Try
                    sqlinsertstatement = "Update [POSSales] set [Date Record] ='" & Format(DateTimeNew, "dd-MMM-yyyy H:mm") & "' where [Reference Number] ='" & ReferenceNumberTemp & "'"

                    '     If VoidedTemp = False Then
                    rs.Open(sqlinsertstatement, strconnectSQLBizCoachITSDataSQL)
                    '    End If
                Catch ex As Exception
                    MsgBox(Err.Description)
                End Try



            End If


            records.MoveNext()

        End While
        records.Close()

        erpdb.Close()

    End Sub


    Private Sub ButtonCopyG1toITS_Click(sender As Object, e As EventArgs) Handles ButtonCopyG1toITS.Click
        CopyG1toITSandTransform()
    End Sub



    Private Sub ButtonGetDBInstancesOnServer_Click(sender As Object, e As EventArgs) Handles ButtonGetDBInstancesOnServer.Click

        GetNumberInstances()

    End Sub

    Private Sub GetNumberInstances()


        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        '    Dim ErrDesc As String = ""
        '     Dim ReportName As String = ""
        '    ListBoxNotificationType.Items.Clear()

        Dim NumberOfInstances As Int16 = 0

        Try
            erpdb.Open(strconnectSQLBizCoachSettings)
        Catch ex As Exception
            ListBoxUtilitiesInfo.Items.Add("Failed to connect to DB instances; " & Err.Description)
            Exit Sub
        End Try



        records = erpdb.Execute("SELECT count(1) as NumDB FROM sys.databases")
        While Not records.EOF
            ListBoxUtilitiesInfo.Items.Add(records.Fields("NumDB").Value.ToString.Trim & " instances on " & ControlChars.Tab & ControlChars.Tab & Now)
            NumberOfInstances = Val(records.Fields("NumDB").Value)
            records.MoveNext()
        End While

        records.Close()
        erpdb.Close()

        If NumberOfInstances > 27 Then
            AutoEmailMessage365("Number Instances Now " & NumberOfInstances, "will.odwyer@impalacloud.com", "Number BizCoach Instances", False, "will.odwyer@impalacloud.com", "", "", "", "", "", "")
            SendTwillio("+85291961834", "Number Instances Now " & NumberOfInstances)
        End If

    End Sub


    Private Sub TimerNumberInstances_Tick(sender As Object, e As EventArgs) Handles TimerNumberInstances.Tick
        'this notifies if too many instances
        If VendCustomerUpdateRunning = True Then Exit Sub

        ListBoxUtilitiesInfo.Items.Add("Timer for instances ran at " & ControlChars.Tab & Now)
        GetNumberInstances()
        ListBoxUtilitiesInfo.SelectedIndex = ListBoxUtilitiesInfo.Items.Count - 1
        ListBoxUtilitiesInfo.Refresh()
    End Sub



    Private Sub ButtonTestEncrypt_Click(sender As Object, e As EventArgs) Handles ButtonTestEncrypt.Click

        EncryptText(TextBoxToEncypt.Text.Trim)

    End Sub

    Private Sub ButtonTestDecrypt_Click(sender As Object, e As EventArgs) Handles ButtonTestDecrypt.Click
        Dim cipherText As String = My.Computer.FileSystem.ReadAllText(
       My.Computer.FileSystem.SpecialDirectories.MyDocuments &
           "\cipherText.txt")
        cipherText = TextBoxEncypted.Text.Trim
        Dim password As String = TextBoxCypher.Text.Trim
        Dim wrapper As New Simple3Des(password)
        ' DecryptData throws if the wrong password is used.
        Try
            Dim plainText As String = wrapper.DecryptData(cipherText)
            '           MsgBox("The plain text is: " & plainText)
            TextBoxDecrypted.Text = plainText
        Catch ex As System.Security.Cryptography.CryptographicException
            MsgBox("The data could not be decrypted with the password.")
        End Try
    End Sub


    Private Sub DoAllNotifications()
        If ListBoxCustomerInfo.SelectedIndex = -1 Then
            ListBoxNotificationStatus.Items.Add("No customer selected")
            ButtonDoAllNotifyTypes.BackColor = Color.Red
            ButtonDoAllNotifyTypes.Refresh()
            Exit Sub
        End If
        If ListBoxNotificationType.SelectedIndex = -1 Then
            ListBoxNotificationStatus.Items.Add("No notification type selected")
            ButtonDoAllNotifyTypes.BackColor = Color.Red
            ButtonDoAllNotifyTypes.Refresh()
            Exit Sub
        End If
        If ListBoxDeliveryMethod.SelectedIndex = -1 Then
            ListBoxNotificationStatus.Items.Add("No notification method selected")
            ButtonDoAllNotifyTypes.BackColor = Color.Red
            ButtonDoAllNotifyTypes.Refresh()
            Exit Sub
        End If
        If ListBoxUsers.SelectedIndex = -1 Then
            ListBoxNotificationStatus.Items.Add("No email selected")
            ButtonDoAllNotifyTypes.BackColor = Color.Red
            ButtonDoAllNotifyTypes.Refresh()
            Exit Sub
        End If
        'this does all formats
        ButtonDoAllNotifyTypes.BackColor = Color.LightSalmon
        ButtonDoAllNotifyTypes.Refresh()

        'now all local level variables as they are reused

        '        Dim DailyReportHTMLEmailString As String = ""
        '        Dim UrlOfReport As String = ""
        '        Dim DesktopText As String = ""
        '        Dim TitleOfNotification As String = ""
        '        Dim DesktopReference As String = ""
        '        Dim SMSTest As String = ""
        '        'gets the email list
        '        Dim EmailString As String = ""
        '        Dim SpeechString As String = ""

        'if the report type hasent changed or the company hasent changed then no need to
        'redo the report as the royutine creates all
        'this can force a redo of the notification
        If CheckBoxRecalculateNotification.Checked = True Then NotificationCompanyOld = "" : NotificationTypeNameOld = ""

        If NotificationTypeNameOld = ListBoxNotificationType.SelectedItem And NotificationCompanyOld = ListBoxCustomerInfo.SelectedItem Then
            'dont process here as same data

        Else
            'proocess here as company or notification has changed
            NotificationCompanyOld = ListBoxCustomerInfo.SelectedItem

            DailyReportHTMLEmailString = ""
            UrlOfReport = ""
            DesktopText = ""
            TitleOfNotification = ""
            DesktopReference = ""
            SMSTest = ""

            EmailString = ""
            SpeechString = ""

            NotificationTypeNameOld = ListBoxNotificationType.SelectedItem

            If ListBoxNotificationType.SelectedItem = "Daily Sales Report (POS System) - Yesterday" Then

                If UCase(ListBoxDeliveryMethod.SelectedItem) = "DESKTOP NOTIFICATION" Or
                    UCase(ListBoxDeliveryMethod.SelectedItem) = "SPEECH" Or
                    UCase(ListBoxDeliveryMethod.SelectedItem) = "SMS" Or
                    UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP" Or
                    UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP SPEECH" Or
                    UCase(ListBoxDeliveryMethod.SelectedItem) = "EXCEL" Or
                    UCase(ListBoxDeliveryMethod.SelectedItem) = "EMAIL" Then

                    DailySalesReportPOSYesterdayDesktop(DailyReportHTMLEmailString, DateTimePickerPushFrom.Value,
                                                        CheckBoxDemoAccount.Checked, UrlOfReport, DesktopText,
                                                        ListBoxCustomerInfo.SelectedItem, SMSTest, SpeechString)
                    TitleOfNotification = "BizCoach Daily Sales Snapshot"
                Else
                    MsgBox("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.Items.Add("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1

                    ButtonDoAllNotifyTypes.BackColor = Color.LightGreen
                    ButtonDoAllNotifyTypes.Refresh()
                    Exit Sub
                End If


            ElseIf ListBoxNotificationType.SelectedItem = "Daily Sales Report (POS System) - MTD" Then

                If UCase(ListBoxDeliveryMethod.SelectedItem) = "DESKTOP NOTIFICATION" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SMS" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EXCEL" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EMAIL" Then

                    '         MsgBox("whoa")
                    DailySalesReportPOSYesterdayDesktop(DailyReportHTMLEmailString, DateTimePickerPushFrom.Value,
                                                        CheckBoxDemoAccount.Checked, UrlOfReport, DesktopText,
                                                        ListBoxCustomerInfo.SelectedItem, SMSTest, SpeechString)


                    TitleOfNotification = "Yesterdays Sales"
                Else
                    MsgBox("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.Items.Add("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1

                    ButtonDoAllNotifyTypes.BackColor = Color.LightGreen
                    ButtonDoAllNotifyTypes.Refresh()
                    Exit Sub
                End If


            ElseIf ListBoxNotificationType.SelectedItem = "Predictions (POS System) - Weekly" Then

                If UCase(ListBoxDeliveryMethod.SelectedItem) = "DESKTOP NOTIFICATION" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SMS" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EXCEL" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EMAIL" Then

                    PredictionsPOSSystemMonthly(DailyReportHTMLEmailString, DateTimePickerPushFrom.Value,
                                                        CheckBoxDemoAccount.Checked, UrlOfReport, DesktopText,
                                                        ListBoxCustomerInfo.SelectedItem, SMSTest, SpeechString)


                    TitleOfNotification = "Weekly Predictions"
                Else
                    MsgBox("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.Items.Add("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1

                    ButtonDoAllNotifyTypes.BackColor = Color.LightGreen
                    ButtonDoAllNotifyTypes.Refresh()
                    Exit Sub
                End If

            ElseIf ListBoxNotificationType.SelectedItem = "Inventory (POS System) - Weekly" Then

                If UCase(ListBoxDeliveryMethod.SelectedItem) = "DESKTOP NOTIFICATION" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SMS" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EXCEL" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EMAIL" Then

                    InventoryPOSSystemWeekly(DailyReportHTMLEmailString, DateTimePickerPushFrom.Value,
                                                        CheckBoxDemoAccount.Checked, UrlOfReport, DesktopText,
                                                        ListBoxCustomerInfo.SelectedItem, SMSTest, SpeechString)


                    TitleOfNotification = "Inventory"
                Else
                    MsgBox("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.Items.Add("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1

                    ButtonDoAllNotifyTypes.BackColor = Color.LightGreen
                    ButtonDoAllNotifyTypes.Refresh()
                    Exit Sub
                End If

            ElseIf ListBoxNotificationType.SelectedItem = "Sales By Item (POS System) - Weekly" Then

                If UCase(ListBoxDeliveryMethod.SelectedItem) = "DESKTOP NOTIFICATION" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SMS" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EXCEL" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EMAIL" Then

                    SalesByItemPOS(DailyReportHTMLEmailString, DateTimePickerPushFrom.Value,
                                                        CheckBoxDemoAccount.Checked, UrlOfReport, DesktopText,
                                                        ListBoxCustomerInfo.SelectedItem, SMSTest, SpeechString)


                    TitleOfNotification = "Inventory"
                Else
                    MsgBox("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.Items.Add("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1

                    ButtonDoAllNotifyTypes.BackColor = Color.LightGreen
                    ButtonDoAllNotifyTypes.Refresh()
                    Exit Sub
                End If

            ElseIf ListBoxNotificationType.SelectedItem = "Inventory Turnover (POS System) - Weekly" Then

                If UCase(ListBoxDeliveryMethod.SelectedItem) = "DESKTOP NOTIFICATION" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SMS" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EXCEL" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EMAIL" Then

                    InventoryTurnoverPOS(DailyReportHTMLEmailString, DateTimePickerPushFrom.Value,
                                                        CheckBoxDemoAccount.Checked, UrlOfReport, DesktopText,
                                                        ListBoxCustomerInfo.SelectedItem, SMSTest, SpeechString)

                    TitleOfNotification = "Inventory Turnover"
                Else
                    MsgBox("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.Items.Add("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1

                    ButtonDoAllNotifyTypes.BackColor = Color.LightGreen
                    ButtonDoAllNotifyTypes.Refresh()
                    Exit Sub
                End If


            ElseIf ListBoxNotificationType.SelectedItem = "Sales by hour (POS System) - Weekly" Then

                If UCase(ListBoxDeliveryMethod.SelectedItem) = "DESKTOP NOTIFICATION" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SMS" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EXCEL" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EMAIL" Then

                    SalesByHourPOS(DailyReportHTMLEmailString, DateTimePickerPushFrom.Value,
                                                        CheckBoxDemoAccount.Checked, UrlOfReport, DesktopText,
                                                        ListBoxCustomerInfo.SelectedItem, SMSTest, SpeechString)

                    TitleOfNotification = "Sales by hour"
                Else
                    MsgBox("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.Items.Add("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1

                    ButtonDoAllNotifyTypes.BackColor = Color.LightGreen
                    ButtonDoAllNotifyTypes.Refresh()
                    Exit Sub
                End If
            ElseIf ListBoxNotificationType.SelectedItem = "Customers by hour (POS System) - Weekly" Then

                If UCase(ListBoxDeliveryMethod.SelectedItem) = "DESKTOP NOTIFICATION" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SMS" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EXCEL" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EMAIL" Then

                    InvoicesByHourPOS(DailyReportHTMLEmailString, DateTimePickerPushFrom.Value,
                                                        CheckBoxDemoAccount.Checked, UrlOfReport, DesktopText,
                                                        ListBoxCustomerInfo.SelectedItem, SMSTest, SpeechString)

                    TitleOfNotification = "Customers by hour"
                Else
                    MsgBox("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.Items.Add("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1

                    ButtonDoAllNotifyTypes.BackColor = Color.LightGreen
                    ButtonDoAllNotifyTypes.Refresh()
                    Exit Sub
                End If

            ElseIf ListBoxNotificationType.SelectedItem = "Predictions (POS System) - Daily" Then

                If UCase(ListBoxDeliveryMethod.SelectedItem) = "DESKTOP NOTIFICATION" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "SMS" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP SPEECH" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EXCEL" Or
                  UCase(ListBoxDeliveryMethod.SelectedItem) = "EMAIL" Then

                    PredictionsPOSSystemDaily(DailyReportHTMLEmailString, DateTimePickerPushFrom.Value,
                                                        CheckBoxDemoAccount.Checked, UrlOfReport, DesktopText,
                                                        ListBoxCustomerInfo.SelectedItem, SMSTest, SpeechString)


                    TitleOfNotification = "Daily Predictions"
                Else
                    MsgBox("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.Items.Add("No Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1

                    ButtonDoAllNotifyTypes.BackColor = Color.LightGreen
                    ButtonDoAllNotifyTypes.Refresh()
                    Exit Sub
                End If


            Else
                MsgBox("No Report Format " & ListBoxNotificationType.SelectedItem)
                ListBoxNotificationStatus.Items.Add("No Report Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1

                Exit Sub
            End If
        End If

        'now is sent individually as each user can have different criteria
        EmailString = ListBoxUsers.SelectedItem
        'this detects if impalaclouduser
        Dim strArr() As String
        Dim count As Integer
        strArr = EmailString.Split("@")
        Dim ImpalaUser As Boolean = False
        If UCase(strArr(1).ToString.Trim) = "IMPALACLOUD.COM" Then
            ImpalaUser = True
        End If


        LabelWhatsApp.Text = SMSTest
        LabelSMS.Text = SMSTest

        'above the notification is created and
        'now send the notification using a standard routine
        Dim EmailTitle As String = ""
        'sometimes no need to send
        If CheckBoxDontSend.Checked = False Then

            'only send if something to send
            If DailyReportHTMLEmailString <> "" Then

                If UCase(ListBoxDeliveryMethod.SelectedItem) = "DESKTOP NOTIFICATION" Then
                    Dim DesktopMessageText As String = DesktopText
                    Dim DesktopMessageTitle As String = TitleOfNotification
                    Dim DesktopNotificationURL As String = UrlOfReport
                    Dim DesktopMessageStatus As String = "None"
                    DesktopNotification(DesktopMessageText, DesktopMessageTitle, DesktopNotificationURL, ListBoxCustomerInfo.SelectedItem, DesktopMessageStatus, DesktopMessageStatus, DesktopReference)

                ElseIf UCase(ListBoxDeliveryMethod.SelectedItem) = "EMAIL" Then
                    If CheckBoxBizC2TestWill.Checked = True Then
                        '          SendTwillio("+447902153928", SMSMessage)
                        '     PushNotifyEmail("will.odwyer@impalacloud.com", DailyReportHTMLEmailString, "Daily Sales", "", "")
                        If ListBoxNotificationType.SelectedItem = "Predictions (POS System) - Weekly" Then
                            EmailTitle = "Sales Predictions"
                        Else
                            MsgBox("No Type 001")
                        End If

                        AutoEmailMessage365(DailyReportHTMLEmailString, "Daily Sales Report - Yesterday", EmailTitle, True,
                                        "will.odwyer@impalacloud.com", "", "", "Test", "", "", "applicationserver@impalacloud.com")
                        UpdateCustomerLog(ListBoxCustomerInfo.SelectedItem, Now, Now,
                         "Ran OK", EmailTitle & " " & ListBoxCustomerInfo.SelectedItem, Now, Now,
                                     EmailTitle & " ran for " & ListBoxCustomerInfo.SelectedItem, "")
                    Else
                        If ListBoxNotificationType.SelectedItem = "Predictions (POS System) - Weekly" Then
                            EmailTitle = "Sales Predictions"
                        ElseIf ListBoxNotificationType.SelectedItem = "Daily Sales Report (POS System) - Yesterday" Then
                            EmailTitle = "BizCoach Daily Revenue Snapshot"
                        ElseIf ListBoxNotificationType.SelectedItem = "Inventory (POS System) - Weekly" Then
                            EmailTitle = "Inventory Value"
                        ElseIf ListBoxNotificationType.SelectedItem = "Sales By Item (POS System) - Weekly" Then
                            EmailTitle = "Sales by product/item"
                        ElseIf ListBoxNotificationType.SelectedItem = "Daily Sales Report (POS System) - MTD" Then
                            EmailTitle = "Daily Sales"
                        ElseIf ListBoxNotificationType.SelectedItem = "Sales by hour (POS System) - Weekly" Then
                            EmailTitle = "Sales by hour, past 30 days"
                        ElseIf ListBoxNotificationType.SelectedItem = "Customers by hour (POS System) - Weekly" Then
                            EmailTitle = "Customers by hour, past 30 days"
                        ElseIf ListBoxNotificationType.SelectedItem = "Predictions (POS System) - Daily" Then
                            EmailTitle = "BizCoach Daily Sales Predictions"
                        Else
                            MsgBox("No Type 001")
                        End If

                        'adds an extra section if an impalaclouduser
                        If ImpalaUser = True Then
                            '              DailyReportHTMLEmailString = DailyReportHTMLEmailString & "<b> Extra information for ImpalaCloud users (not shown on customers copy)</b><br />Customer is '" &
                            '             ListBoxCustomerInfo.SelectedItem & "'<br />Notification name is '" & ListBoxNotificationType.SelectedItem & "'"
                        End If

                        AutoEmailMessage365(DailyReportHTMLEmailString, "None", EmailTitle, True, EmailString, "", "", "Test", "", "", "applicationserver@impalacloud.com")

                        If EmailString.Trim <> "" Then
                            '          PushNotifyEmail(EmailString,
                            '         DailyReportHTMLEmailString, "Daily Sales", "", "")
                        Else
                            '       MsgBox("no customer email addresses")
                            ListBoxControlIssues.Items.Add("No customer email addresses " & ListBoxCustomerInfo.SelectedItem)
                            ListBoxControlIssues.Refresh()
                            UpdateCustomerLog(ListBoxCustomerInfo.SelectedItem, Now, Now,
                           "Didnt send", "No customer email addresses " & ListBoxCustomerInfo.SelectedItem, Now, Now,
                               "No customer email addresses " & ListBoxCustomerInfo.SelectedItem, "")
                        End If
                        'all
                        'will uk
                        '         SendTwillio("+85291961834", SMSMessage)
                        'igor
                        '        SendTwillio("+85290607750", SMSMessage)
                        'axel
                        '       SendTwillio("+85290910313", SMSMessage)
                        'h.r
                        '      SendTwillio("+85261102164", SMSMessage)
                        UpdateCustomerLog(ListBoxCustomerInfo.SelectedItem, Now, Now,
                              "Ran OK", EmailTitle & " sent for " & ListBoxCustomerInfo.SelectedItem, Now, Now,
                                 EmailTitle & " ran for " & ListBoxCustomerInfo.SelectedItem, "")
                    End If

                ElseIf UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP" Then

                    If CheckBoxBizC2TestWill.Checked = True Then
                        Dim WhatsappNotifyStatus
                        Dim StatusDescription
                        Dim WhatsAppresultCode
                        WhatsAppNotification(SMSTest, "+85291961834", WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)
                        '+85293448582
                        'daina.li@impalacloud.com
                        '+85290607750
                        'igor.zubov@impalacloud.com
                        '+85265762001
                        'dickson
                        '+85290910313
                        'axel.scholz@impalacloud.com
                        '+85261102164
                        'h.r.shiever@impalacloud.com
                    Else

                        Dim WhatsappNotifyStatus
                        Dim StatusDescription
                        Dim WhatsAppresultCode
                        WhatsAppNotification(SMSTest, LabelExistingMobile.Text.Trim, WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)

                    End If

                ElseIf UCase(ListBoxDeliveryMethod.SelectedItem) = "WHATSAPP SPEECH" Then

                    If CheckBoxBizC2TestWill.Checked = True Then
                        Dim WhatsappNotifyStatus
                        Dim StatusDescription
                        Dim WhatsAppresultCode
                        WhatsAppNotification("http://aagilitycom.ipage.com/custview/" & TextBoxPublishLocationName.Text, "+85291961834", WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)
                        '       WhatsAppNotification("http://aagilitycom.ipage.com/custview/" & TextBoxPublishLocationName.Text, "+85293448582", WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)

                        '+85293448582
                        'daina.li@impalacloud.com
                        '+85290607750
                        'igor.zubov@impalacloud.com
                        '+85265762001
                        'dickson
                        '+85290910313
                        'axel.scholz@impalacloud.com
                        '+85261102164
                        'h.r.shiever@impalacloud.com
                    Else
                        Dim WhatsappNotifyStatus
                        Dim StatusDescription
                        Dim WhatsAppresultCode
                        WhatsAppNotification("http://aagilitycom.ipage.com/custview/" & TextBoxPublishLocationName.Text, LabelExistingMobile.Text.Trim, WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)
                    End If

                ElseIf UCase(ListBoxDeliveryMethod.SelectedItem) = "SMS" Then

                    If CheckBoxBizC2TestWill.Checked = True Then
                        SendTwillio("+85291961834", SMSTest)
                        '+85293448582
                        'daina.li@impalacloud.com
                        '+85290607750
                        'igor.zubov@impalacloud.com
                        '+85265762001
                        'dickson
                        '+85290910313
                        'axel.scholz@impalacloud.com
                        '+85261102164
                        'h.r.shiever@impalacloud.com
                    Else
                        SendTwillio(LabelExistingMobile.Text.Trim, SMSTest)
                    End If

                Else
                    MsgBox("No Sending Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'")
                    UpdateCustomerLog(ListBoxCustomerInfo.SelectedItem, Now, Now,
                              "No Sending format", "No Sending Format for '" & ListBoxDeliveryMethod.SelectedItem & "', for '" & ListBoxNotificationType.SelectedItem & "'", Now, Now,
                                  "No sending format " & ListBoxCustomerInfo.SelectedItem, "")

                End If
            End If
        End If

        ButtonDoAllNotifyTypes.BackColor = Color.LightGreen
        ButtonDoAllNotifyTypes.Refresh()
    End Sub


    Private Sub ButtonDoAllNotifyTypes_Click(sender As Object, e As EventArgs) Handles ButtonDoAllNotifyTypes.Click
        DoAllNotifications()
    End Sub


    Private Sub DesktopNotification(ByVal DesktopMessageText, ByVal DesktopMessageTitle, ByVal DesktopMessageNotificationURL, ByVal CustomerName,
                                    ByRef DesktopNotificationStatus, ByRef DestktopStatus, ByRef DesktopReference)
        Dim request As WebRequest = WebRequest.Create("https://api.pushengage.com/apiv1/notifications")
        ' Set the Method property of the request to POST.  
        request.Method = "POST"
        ' Create POST data and convert it to a byte array.  
        Dim postData As String = "notification_title=" & DesktopMessageTitle & "&notification_message=" &
                                 DesktopMessageText &
                                 "&" & "notification_url=" & DesktopMessageNotificationURL &
                                 "&big_image_url=http://aagilitycom.ipage.com/bizcoachimages/BizCoachWholeLogoMedium.png"
        request.Headers("api_key") = "wnqovX8x4Bkyf1p1MN44T50YQj6tbAU1"
        Dim byteArray As Byte() = Encoding.UTF8.GetBytes(postData)
        request.ContentType = "application/x-www-form-urlencoded"
        request.ContentLength = byteArray.Length
        Dim dataStream As Stream = request.GetRequestStream()
        dataStream.Write(byteArray, 0, byteArray.Length)
        dataStream.Close()
        ' Get the response.  
        Dim response As WebResponse = request.GetResponse()
        Console.WriteLine(CType(response, HttpWebResponse).StatusDescription)
        dataStream = response.GetResponseStream()
        Dim reader As New StreamReader(dataStream)
        ' Read the content.  
        Dim responseFromServer As String = reader.ReadToEnd()
        Console.WriteLine(responseFromServer)
        reader.Close()
        dataStream.Close()
        response.Close()
        Dim obj = Newtonsoft.Json.JsonConvert.DeserializeObject(responseFromServer)
        Dim JsonresponseFirst = obj.first
        Dim JsonresponseLast = obj.last
        If UCase(JsonresponseFirst.name) = "SUCCESS" Then
            DestktopStatus = "Success"
            DesktopReference = JsonresponseLast.value
            UpdateCustomerLog(ListBoxCustomerInfo.SelectedItem, Now, Now,
                          "Ran OK", "Desktop sent for " & ListBoxCustomerInfo.SelectedItem, Now, Now,
                              "Desktop sent for " & ListBoxCustomerInfo.SelectedItem, "")
        Else
            DestktopStatus = "Failure"
            DesktopReference = JsonresponseLast.value
            UpdateCustomerLog(ListBoxCustomerInfo.SelectedItem, Now, Now,
                        "Ran OK", "Desktop FAILED for " & ListBoxCustomerInfo.SelectedItem, Now, Now,
                            "Desktop FAILED for " & ListBoxCustomerInfo.SelectedItem, "")
        End If
    End Sub


    Private Sub WhatsAppNotification(ByVal WhatsAppMessageText, ByVal WhatsAppNumber, ByRef WhatsAppNotificationStatus, ByRef WhatsAppStatusDescription, ByRef WhatsAppResultCode)

        Dim request As WebRequest = WebRequest.Create("http://panel.apiwha.com/send_message.php?apikey=U616PHW5HFMSGZ8GS68J&number=" & WhatsAppNumber & "&text=" & WhatsAppMessageText)
        ' Set the Method property of the request to POST.  
        request.Method = "POST"
        ' Create POST data and convert it to a byte array.  
        Dim postData As String = ""
        Dim byteArray As Byte() = Encoding.UTF8.GetBytes(postData)
        request.ContentType = "application/x-www-form-urlencoded"
        request.ContentLength = byteArray.Length
        Dim dataStream As Stream = request.GetRequestStream()
        dataStream.Write(byteArray, 0, byteArray.Length)
        dataStream.Close()
        ' Get the response.  
        Dim response As WebResponse = request.GetResponse()
        Console.WriteLine(CType(response, HttpWebResponse).StatusDescription)
        dataStream = response.GetResponseStream()
        Dim reader As New StreamReader(dataStream)
        ' Read the content.  
        Dim responseFromServer As String = reader.ReadToEnd()
        Console.WriteLine(responseFromServer)
        reader.Close()
        dataStream.Close()
        response.Close()
        Dim obj = Newtonsoft.Json.JsonConvert.DeserializeObject(responseFromServer)
        Dim JsonresponseFirst = obj.first
        Dim JsonresponseLast = obj.last
        Dim JsonresponseValue = obj.first.value
        Dim ErrorEmailResponse As String = ""
        If UCase(JsonresponseValue.ToString.Trim) = "TRUE" Then
            WhatsAppNotificationStatus = "Success"
            WhatsAppResultCode = JsonresponseLast.value
            UpdateCustomerLog(ListBoxCustomerInfo.SelectedItem, Now, Now,
                          "Whatsapps OK to " & WhatsAppNumber, "Whatsapp sent for " & WhatsAppNumber & ", " & WhatsAppMessageText, Now, Now,
                              "Whatsapp sent for " & WhatsAppNumber, "")
        Else
            WhatsAppNotificationStatus = "Failure"
            WhatsAppResultCode = JsonresponseLast.value
            UpdateCustomerLog(ListBoxCustomerInfo.SelectedItem, Now, Now,
                        "Whatsapp Failed", "Whatsapp FAILED for " & WhatsAppNumber & ", " & JsonresponseLast.root.ToString, Now, Now,
                            "Whatsapp FAILED for " & WhatsAppNumber, "")
            ListBoxNotificationStatus.Items.Add(WhatsAppNumber & ", " & JsonresponseLast.root.ToString)
            ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1
            ListBoxNotificationStatus.Refresh()
            'now sends an email to the user asking them to add the whatsapp number
            Dim ErrorDesc As String = WhatsAppResultCode.root.ToString
            If ErrorDesc.Contains("You cannot send messages to this number") Then
                ErrorEmailResponse = "    <img src = ""http://aagilitycom.ipage.com/wp-content/uploads/2017/12/BizCoach_small.png"" alt=""BizCoach"" ;  ><br /><br />
            You have selected to have Whatsapp alerts from BizCoach. <br /><br />In order to receive these please add the number :<br /><u><br /><b>+85267168615</b></u><br /><br /> 
            to your Whatsapp contacts and then send us any message!<br /><br />
            To add a contact click on the link below for some instructions<br /><a href=""https://faq.whatsapp.com/en/android/21082107/?category=5245236"" target=""_top"">Here is how to add contacts</a>
            <br /><br /><b>Please dont forget to send us any message or you will not be registered!</b><br /><br />Please give feedback to 
            <a href=""mailto:support@impalacloud.com"" target=""_top"">support@impalacloud.com</a><br /><br /><br />"
                AutoEmailMessage365(ErrorEmailResponse, "", "Add to Whatsapp", True, ListBoxUsers.SelectedItem, "", "",
                          "", "", "", "applicationserver@impalacloud.com")
            End If
        End If
    End Sub

    Private Sub TimerG1CopyToITS_Tick(sender As Object, e As EventArgs) Handles TimerG1CopyToITS.Tick

        If VendCustomerUpdateRunning = True Then Exit Sub

        '60000 is 1 minute
        '600000 is 10 minutes
        '6000000 is 100 minutes
        ListBoxUtilitiesInfo.Items.Add("G1 extract ran : " & Now)
        ListBoxUtilitiesInfo.Refresh()
        TabControlMain.SelectedIndex = 5
        TabControlMain.Refresh()
        'it will run if the day has changed
        If DateG1LastRan.Day <> Now.Day Then
            CopyG1toITSandTransform()
            'restes the date to the current date
            'this means it will only run once a day after 
            'midnight
            DateG1LastRan = Now
        End If
    End Sub

    Private Sub ExitToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ExitToolStripMenuItem.Click

        Dim WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode
        Dim dlgres As DialogResult =
               MessageBox.Show("Exit System?",
               "Exit", MessageBoxButtons.YesNo,
               MessageBoxIcon.Question)
        If dlgres = DialogResult.Yes Then
            'sends whats appp that system stopped

            WhatsAppNotification("Notification system shut down : " & Format(Now, "ddd dd-MMM H:MM tt"), "+85291961834", WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)
            WhatsAppNotification("Notification system shut down : " & Format(Now, "ddd dd-MMM H:MM tt"), "+85290910313", WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)
            WhatsAppNotification("Notification system shut down : " & Format(Now, "ddd dd-MMM H:MM tt"), "+85261102164", WhatsappNotifyStatus, StatusDescription, WhatsAppresultCode)


            End
        End If

    End Sub

    Private Sub ButtonAddNotifyEmail_Click(sender As Object, e As EventArgs) Handles ButtonAddNotifyEmail.Click

        'this adds the email to the customers email list
        'also inserts into customer settings
        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic

        Dim MobileNumberTemp As String = TextBoxAddMobileNumber.Text.Trim

        Dim ExistingMobileNumberTemp As String = LabelExistingMobile.Text.Trim()

        Dim NewEmailTemp As String = TextBoxNotifyEmailAdd.Text.Trim()



        If MobileNumberTemp = "" And NewEmailTemp = "" Then
            MsgBox("Enter at least 1!")


        ElseIf MobileNumberTemp <> "" And NewEmailTemp <> "" Then


            MobileNumberTemp = Replace(MobileNumberTemp, " ", "")

            'removes illegal characters
            Dim illegalChars As Char() = "~`|@#$^*{}'[]""_<>\/+.%?QERTYUIOPLKJHGFDSAXZXCVBNMqwertyuioplkjhgfdsazxcvbnm".ToCharArray()
            Try
                For Each ch As Char In illegalChars
                    MobileNumberTemp = MobileNumberTemp.Replace(ch, "")
                Next
            Catch ex As Exception
                Dim strErrMsg = "Oops! Something is wrong with verify special characters at IsThereAnySpecialCharacter"
                MessageBox.Show(strErrMsg & vbCrLf & "Err: " & ex.Message)
            End Try
            'puts the +
            MobileNumberTemp = "+" & MobileNumberTemp
            Try
                rs.Open("Insert into CustomerContacts (CustomerName, ActiveCustomer, CustomerEmail, " &
                        "BizCoachContact, MobilePhoneNumber) Values ('" &
                        ListBoxCustomerInfo.SelectedItem & "','" & "1" & "','" & NewEmailTemp & "','" &
                        "0" & "','" & MobileNumberTemp &
                        "')", strconnectSQLBizCoachCustomerInformationDatabase)
                ListBoxUsers.Items.Add(NewEmailTemp)


            Catch ex As Exception
                MsgBox("Update Error " & Err.Description)
            End Try

        ElseIf MobileNumberTemp = "" And NewEmailTemp <> "" Then

            Try
                rs.Open("Insert into CustomerContacts (CustomerName, ActiveCustomer, CustomerEmail, " &
                        "BizCoachContact) Values ('" &
                        ListBoxCustomerInfo.SelectedItem & "','" & "1" & "','" & NewEmailTemp & "','" &
                        "0" &
                        "')", strconnectSQLBizCoachCustomerInformationDatabase)
                ListBoxUsers.Items.Add(NewEmailTemp)


            Catch ex As Exception
                MsgBox("Update Error " & Err.Description)
            End Try

        ElseIf MobileNumberTemp <> "" And NewEmailTemp = "" Then
            'does an update

            Try
                rs.Open("Update CustomerContacts set MobilePhoneNumber ='" & MobileNumberTemp &
                        "' where CustomerEmail = '" & ListBoxUsers.SelectedItem & "'", strconnectSQLBizCoachCustomerInformationDatabase)
                '   ListBoxUsers.Items.Add(NewEmailTemp)
                TextBoxAddMobileNumber.Text = ""

            Catch ex As Exception
                MsgBox("Update Error " & Err.Description)
            End Try


        Else

            MsgBox("No Update!")




        End If



        If TextBoxNotifyEmailAdd.Text <> "" Then


        End If



    End Sub

    Private Sub AddPhoneNumber()

    End Sub

    Private Sub ButtonPlaySpeech_Click(sender As Object, e As EventArgs) Handles ButtonPlaySpeech.Click


        ButtonPlaySpeech.BackColor = Color.LightSalmon
        ButtonPlaySpeech.Refresh()


        Process.Start(TextBoxSpeechLocation.Text)

        ButtonPlaySpeech.BackColor = Color.LightGreen
        ButtonPlaySpeech.Refresh()


    End Sub

    Private Sub FillSpeechBoxToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles FillSpeechBoxToolStripMenuItem.Click


        TextBoxSpeechText.Text = "The quick brown fox jumps over the lazy dog on " & Format(Now, "dd-MMMM-yyyy") & " at " & Format(Now, "HH:mm")
    End Sub

    Private Sub CopyKPIResultsToClipboardToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CopyKPIResultsToClipboardToolStripMenuItem.Click
        If LabelKPIInfo.Text <> String.Empty Then
            Clipboard.SetText(LabelKPIInfo.Text)
        Else
            Clipboard.Clear()
        End If
    End Sub

    Private Sub ListBoxUsers_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ListBoxUsers.SelectedIndexChanged


        ButtonDoAllNotifyTypes.BackColor = Color.FromKnownColor(KnownColor.ControlLight)
        ButtonDoAllNotifyTypes.Refresh

        'this gets any the mobile number for the selected user
        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        LabelExistingMobile.Text = ""
        Try
            erpdb.Open(strconnectSQLBizCoachCustomerInformationDatabase)
            records = erpdb.Execute("Select * from [CustomerContacts] where [CustomerEmail] ='" & ListBoxUsers.SelectedItem &
                                    "' and [CustomerName] ='" & ListBoxCustomerInfo.SelectedItem & "'")
            While Not records.EOF
                Try
                    LabelExistingMobile.Text = records.Fields("MobilePhoneNumber").Value.ToString.Trim
                Catch ex As Exception
                    LabelExistingMobile.Text = ""
                End Try
                records.MoveNext()
            End While
            records.Close()
        Catch ex As Exception
            MsgBox(Err.Description)
        End Try
        Try
            erpdb.Close()
        Catch ex As Exception

        End Try

        'this now gets any schedulkes for them
        GetNotificationSchedule()

    End Sub


    Private Sub GetNotificationSchedule()

        'this gets any schhedules for the email/customer

        If ListBoxUsers.SelectedIndex = -1 Or ListBoxCustomerInfo.SelectedIndex = -1 Then
            Exit Sub
        End If

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection

        ListBoxNotificationStatus.Items.Clear()
        ListBoxNotificationStatus.Items.Add(ListBoxUsers.SelectedItem)
        ListBoxNotificationStatus.Refresh()

        Try
            erpdb.Open(strconnectSQLBizCoachSettings)
            records = erpdb.Execute("Select * from [NotificationCustomerSchedules] where [CustomerEmail] ='" & ListBoxUsers.SelectedItem &
                                    "' and [CustomerName] ='" & ListBoxCustomerInfo.SelectedItem & "'")
            While Not records.EOF
                Try

                    ListBoxNotificationStatus.Items.Add(records.Fields("NotificationName").Value.ToString.Trim & " : " &
                                                        records.Fields("DeliveryMethod").Value.ToString.Trim & " : " &
                                                        Format(records.Fields("TimeToSend").Value, "H:mm tt") & " : last : " & Format(records.Fields("LastRan").Value, "ddd dd/MMM/yyyy H:mm tt"))
                Catch ex As Exception

                End Try
                records.MoveNext()
            End While
            records.Close()
        Catch ex As Exception
            MsgBox(Err.Description)
        End Try


        DateTimePickerNotifyTime.Value = Now
        CheckBoxSendNotificationMonday.Checked = False
        CheckBoxSendNotificationTuesday.Checked = False
        CheckBoxSendNotificationWednesday.Checked = False
        CheckBoxSendNotificationThursday.Checked = False
        CheckBoxSendNotificationFriday.Checked = False
        CheckBoxSendNotificationSaturday.Checked = False
        CheckBoxSendNotificationSunday.Checked = False


        'if all are qualified then complete the notification settings box
        If ListBoxNotificationType.SelectedIndex = -1 Or ListBoxDeliveryMethod.SelectedIndex = -1 Then
            Try
                erpdb.Close()
            Catch ex As Exception
            End Try
            Exit Sub
        End If

        Try
            records = erpdb.Execute("Select * from [NotificationCustomerSchedules] where [CustomerEmail] ='" & ListBoxUsers.SelectedItem &
                                    "' and [CustomerName] ='" & ListBoxCustomerInfo.SelectedItem &
                                    "' and NotificationName ='" & ListBoxNotificationType.SelectedItem &
                                    "' and DeliveryMethod ='" & ListBoxDeliveryMethod.SelectedItem & "'")
            While Not records.EOF
                Try

                    DateTimePickerNotifyTime.Value = records.Fields("TimeToSend").Value
                    CheckBoxSendNotificationMonday.Checked = records.Fields("MondaySend").Value
                    CheckBoxSendNotificationTuesday.Checked = records.Fields("TuesdaySend").Value
                    CheckBoxSendNotificationWednesday.Checked = records.Fields("WednesdaySend").Value
                    CheckBoxSendNotificationThursday.Checked = records.Fields("ThursdaySend").Value
                    CheckBoxSendNotificationFriday.Checked = records.Fields("FridaySend").Value
                    CheckBoxSendNotificationSaturday.Checked = records.Fields("SaturdaySend").Value
                    CheckBoxSendNotificationSunday.Checked = records.Fields("SundaySend").Value


                Catch ex As Exception
                    MsgBox(Err.Description)
                End Try
                records.MoveNext()
            End While
            records.Close()
        Catch ex As Exception
            MsgBox(Err.Description)
        End Try



        Try
            erpdb.Close()
        Catch ex As Exception

        End Try
        ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1
        ListBoxNotificationStatus.Refresh()



    End Sub


    Private Sub ListBoxDeliveryMethod_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ListBoxDeliveryMethod.SelectedIndexChanged


        'this now gets any schedulkes for them
        GetNotificationSchedule()

    End Sub

    Private Sub DetermineIfNotificationistobeSent(ByVal CustomerEmail, ByVal CustomerName, ByVal NotificationName, ByVal DeliveryMethod, ByRef SendNotification, ByRef SendNotes)


        'this now gets the scehdule options
        'this gets any the mobile number for the selected user
        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        Dim recordsLookup As ADODB._Recordset
        erpdb = New ADODB.Connection

        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic


        Dim UpdateSQLStringTemp As String = ""

        '      LabelExistingMobile.Text = ""
        'notification details table
        Dim NotificationNameTemp As String = ""
        Dim DeliveryMethodTemp As String = ""
        Dim DateFromTemp
        Dim DateToTemp
        Dim DateTypeTemp
        Dim DatePeriodBackTemp
        Dim DatePeriodForwardTemp
        Dim RelativeDateTemp
        Dim RelativeDateTypeTemp
        Dim RelativePeriodBackTemp
        Dim RelativePeriodForwardTemp
        Dim RelativeComparatorDateTypeTemp
        Dim RelativeComparatorPeriodBackTemp
        Dim RelativeComparatorPeriodForwardTemp
        Dim DesignTemp As Boolean = False
        Dim ReportDescriptionTemp As String = ""
        Dim TimeToSendTemp As Date = Now.AddDays(-400)
        'this is the time the notification last ran
        Dim NotificationLastRanTemp As Date = Now.AddDays(-100)
        Dim MondaySendTemp As Boolean = False
        Dim TuesdaySendTemp As Boolean = False
        Dim WednesdaySendTemp As Boolean = False
        Dim ThursdaySendTemp As Boolean = False
        Dim FridaySendTemp As Boolean = False
        Dim SaturdaySendTemp As Boolean = False
        Dim SundaySendTemp As Boolean = False
        Dim ReasonNotSent As String = ""

        Dim MinutesDifference As Decimal = 0


        erpdb.Open(strconnectSQLBizCoachSettings)
        records = erpdb.Execute("Select * from [NotificationCustomerSchedules] where [CustomerEmail] ='" & CustomerEmail &
                                    "' and [CustomerName] ='" & CustomerName &
                                    "' and NotificationName ='" & NotificationName &
                                    "' and DeliveryMethod ='" & DeliveryMethod & "'")
        While Not records.EOF
            'looks up the standard notification settings
            recordsLookup = erpdb.Execute("Select * from [NotificationDetails] where NotificationName ='" & NotificationName &
                                              "' and DeliveryMethod ='" & DeliveryMethod & "'")
            While Not recordsLookup.EOF
                Try
                    NotificationNameTemp = recordsLookup.Fields("NotificationName").Value.ToString.Trim
                    DeliveryMethodTemp = recordsLookup.Fields("DeliveryMethod").Value.ToString.Trim
                    DateFromTemp = recordsLookup.Fields("DateFrom").Value.ToString.Trim
                    DateToTemp = recordsLookup.Fields("DateTo").Value.ToString.Trim
                    DateTypeTemp = recordsLookup.Fields("DateType").Value.ToString.Trim
                    DatePeriodBackTemp = recordsLookup.Fields("DatePeriodBack").Value.ToString.Trim
                    DatePeriodForwardTemp = recordsLookup.Fields("DatePeriodForward").Value.ToString.Trim
                    RelativeDateTemp = recordsLookup.Fields("RelativeDate").Value.ToString.Trim
                    RelativeDateTypeTemp = recordsLookup.Fields("RelativeDateType").Value.ToString.Trim
                    RelativePeriodBackTemp = recordsLookup.Fields("RelativePeriodBack").Value.ToString.Trim
                    RelativePeriodForwardTemp = recordsLookup.Fields("RelativePeriodForward").Value.ToString.Trim
                    RelativeComparatorDateTypeTemp = recordsLookup.Fields("RelativeComparatorDateType").Value.ToString.Trim
                    RelativeComparatorPeriodBackTemp = recordsLookup.Fields("RelativeComparatorPeriodBack").Value.ToString.Trim
                    RelativeComparatorPeriodForwardTemp = recordsLookup.Fields("RelativeComparatorPeriodForward").Value.ToString.Trim
                    DesignTemp = recordsLookup.Fields("Design").Value.ToString.Trim
                    ReportDescriptionTemp = recordsLookup.Fields("ReportDescription").Value.ToString.Trim

                Catch ex As Exception
                    MsgBox(Err.Description)
                End Try

                recordsLookup.MoveNext()
            End While
            recordsLookup.Close()

            Try
                'now have all the standard details of the notification and the delivery method
                Try
                    NotificationLastRanTemp = records.Fields("LastRan").Value
                Catch ex As Exception
                    NotificationLastRanTemp = Now.AddDays(-400)
                End Try
                Try
                    MondaySendTemp = records.Fields("MondaySend").Value
                Catch ex As Exception
                    MondaySendTemp = False
                End Try
                Try
                    TuesdaySendTemp = records.Fields("TuesdaySend").Value
                Catch ex As Exception
                    TuesdaySendTemp = False
                End Try
                Try
                    WednesdaySendTemp = records.Fields("WednesdaySend").Value
                Catch ex As Exception
                    WednesdaySendTemp = False
                End Try
                Try
                    ThursdaySendTemp = records.Fields("ThursdaySend").Value
                Catch ex As Exception
                    ThursdaySendTemp = False
                End Try
                Try
                    FridaySendTemp = records.Fields("FridaySend").Value
                Catch ex As Exception
                    FridaySendTemp = False
                End Try
                Try
                    SaturdaySendTemp = records.Fields("SaturdaySend").Value
                Catch ex As Exception
                    SaturdaySendTemp = False
                End Try
                Try
                    SundaySendTemp = records.Fields("SundaySend").Value
                Catch ex As Exception
                    SundaySendTemp = False
                End Try
                Try
                    TimeToSendTemp = records.Fields("TimeToSend").Value
                Catch ex As Exception
                    MsgBox(Err.Description)
                End Try
            Catch ex As Exception
                LabelExistingMobile.Text = ""
            End Try
            records.MoveNext()

        End While
        records.Close()
        Try
            erpdb.Close()
        Catch ex As Exception

        End Try

        'now we know when it last ran so can compare to the standard settings
        'dont send design ones 
        Dim SendNotificationDayTemp As Boolean = False
        Dim SendNotificationTimeTemp As Boolean = False

        If DesignTemp = False Then
            'sees if 
            ReasonNotSent = ""

            If UCase(DateTypeTemp) = "DAY" Then
                'compares the last time it was sent and the current time
                If Now.TimeOfDay >= TimeToSendTemp.TimeOfDay Then
                    If MondaySendTemp = True And Now.DayOfWeek = DayOfWeek.Monday Then
                        SendNotificationDayTemp = True
                    ElseIf TuesdaySendTemp = True And Now.DayOfWeek = DayOfWeek.Tuesday Then
                        SendNotificationDayTemp = True
                    ElseIf WednesdaySendTemp = True And Now.DayOfWeek = DayOfWeek.Wednesday Then
                        SendNotificationDayTemp = True
                    ElseIf ThursdaySendTemp = True And Now.DayOfWeek = DayOfWeek.Thursday Then
                        SendNotificationDayTemp = True
                    ElseIf FridaySendTemp = True And Now.DayOfWeek = DayOfWeek.Friday Then
                        SendNotificationDayTemp = True
                    ElseIf SaturdaySendTemp = True And Now.DayOfWeek = DayOfWeek.Saturday Then
                        SendNotificationDayTemp = True
                    ElseIf SundaySendTemp = True And Now.DayOfWeek = DayOfWeek.Sunday Then
                        SendNotificationDayTemp = True
                    Else
                        SendNotificationDayTemp = False
                    End If
                Else
                    ReasonNotSent = "Not time to send. "
                    SendNotes = "Not time to send. "
                End If



                'this is daily so need to check if the day is different and past the time to send
                '1440 minutes in a day
                'dont send if within 12 hours (not 24 as this may stop day run)
                If Now.ToShortTimeString >= TimeToSendTemp.ToShortTimeString And DateDiff(DateInterval.Minute, NotificationLastRanTemp, Now) >= 720 Then
                    SendNotificationTimeTemp = True

                Else
                    If SendNotificationDayTemp = False Then
                        ReasonNotSent = ReasonNotSent & " Not to be sent today. "
                        SendNotes = SendNotes & " Not to be sent today. "

                    ElseIf SendNotificationTimeTemp = False Then
                        ReasonNotSent = ReasonNotSent & " Less than 12 hours between last run. "
                        SendNotes = SendNotes & " Less than 12 hours between last run. "
                    Else

                    End If

                End If



                If SendNotificationTimeTemp = False Or SendNotificationDayTemp = False Then
                    ListBoxControlRunIssues.Items.Add("Not Sent " & ReasonNotSent & " : " & ListBoxCustomerInfo.SelectedItem & " : " & ListBoxNotificationType.SelectedItem &
                                                  " : " & ListBoxDeliveryMethod.SelectedItem & " : " & ListBoxUsers.Text.Trim)
                Else
                    'now send the notification
                    DoAllNotifications()
                    'updates the last sent date
                    UpdateSQLStringTemp = "Update NotificationCustomerSchedules set LastRan ='" & Format(Now, "dd-MMM-yyyy H:mm") & "' where [CustomerEmail] ='" & CustomerEmail &
                                    "' and [CustomerName] ='" & CustomerName &
                                    "' and NotificationName ='" & NotificationName &
                                    "' and DeliveryMethod ='" & DeliveryMethod & "'"
                    Try
                        rs.Open(UpdateSQLStringTemp, strconnectSQLBizCoachSettings)
                    Catch ex As Exception
                        MsgBox("Send error " & Err.Description)
                    End Try

                    ListBoxControlRunIssues.Items.Add("Sent     " & ListBoxCustomerInfo.SelectedItem & " : " & ListBoxNotificationType.SelectedItem &
                                                  " : " & ListBoxDeliveryMethod.SelectedItem & " : " & ListBoxUsers.Text.Trim)
                End If
                ListBoxControlRunIssues.SelectedItem = ListBoxControlRunIssues.Items.Count - 1
                ListBoxControlRunIssues.Refresh()


            End If


            ListBoxNotificationStatus.Items.Add("Notifications ran " & Format(Now, "ddd d-MMM-yyyy H:mm ss tt"))
            ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1
            ListBoxNotificationStatus.Refresh()

        End If






    End Sub

    Private Sub ToolStripMenuItemTimerOffAll_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItemTimerOffAll.Click
        'switches off all timers
        TimerRunningProgressBar.Enabled = False
        TimerVend.Enabled = False
        TimerNumberInstances.Enabled = False
        TimerG1CopyToITS.Enabled = False
        TimerNotifications.Enabled = False
        TimerKPIs.Enabled = False
        ToolStripMenuItemTimerOffAll.Checked = True
        ToolStripMenuItemTimerOnAll.Checked = False
    End Sub

    Private Sub ToolStripMenuItemTimerOnAll_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItemTimerOnAll.Click
        'switches on all timers
        TimerRunningProgressBar.Enabled = True
        TimerVend.Enabled = True
        TimerNumberInstances.Enabled = True
        TimerG1CopyToITS.Enabled = True
        TimerNotifications.Enabled = True
        TimerKPIs.Enabled = True
        ToolStripMenuItemTimerOffAll.Checked = False
        ToolStripMenuItemTimerOnAll.Checked = True
    End Sub

    Private Sub SeeIfNotificationShouldBeSentToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SeeIfNotificationShouldBeSentToolStripMenuItem.Click

        '        DetermineIfNotificationistobeSent()

    End Sub

    Private Sub ListBoxControlRunIssues_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ListBoxControlRunIssues.SelectedIndexChanged

        LabelControlStatus.Text = ListBoxControlRunIssues.SelectedItem

    End Sub

    Private Sub ButtonNotifyAutomatic_Click(sender As Object, e As EventArgs) Handles ButtonNotifyAutomatic.Click

        '60000 is 1 minute
        '600000 is 10 minutes
        '6000000 is 100 minutes


        ButtonNotifyAutomatic.BackColor = Color.FromKnownColor(KnownColor.ControlLight)
        ButtonNotifyAutomatic.Refresh()

        If TimerNotifications.Enabled = True Then
            TimerNotifications.Enabled = False
            ButtonNotifyAutomatic.BackColor = Color.LightSalmon
            ButtonNotifyAutomatic.Text = "Notify Timer" & ControlChars.CrLf & "Not Running"
            PictureBox2.BackColor = Color.Red
            PictureBox2.Refresh()
            LabelNotificationsNextRun.Text = "Not Running"
            LabelNotificationsNextRun.Refresh()
            ButtonNotifyAutomatic.Refresh()
            Exit Sub
        End If
        TimerNotifications.Enabled = True
        '      TimerAutoRun.Interval = 60000 * 30
        ButtonNotifyAutomatic.Text = "Notify Timer" & ControlChars.CrLf & "Next Run" & ControlChars.CrLf & Format(Now.AddSeconds(TimerNotifications.Interval / 1000), "H:mm:ss tt")
        ButtonNotifyAutomatic.BackColor = Color.LightGreen
        ButtonNotifyAutomatic.Refresh()
        PictureBox2.BackColor = Color.LightGreen
        PictureBox2.Refresh()
        LabelNotificationsNextRun.Text = Format(Now.AddSeconds(TimerNotifications.Interval / 1000), "H:mm:ss tt")
        LabelNotificationsNextRun.Refresh()


    End Sub


    Private Sub TimerNotifications_Tick(sender As Object, e As EventArgs) Handles TimerNotifications.Tick

        'dont run if vend update running as changes the connection screen
        If VendCustomerUpdateRunning = True Then Exit Sub


        'now sets the tab back to here
        TabControlMain.SelectedIndex = 3
        TabControlMain.Refresh()


        Dim start_time As DateTime = Now
        Dim elapsed_time As TimeSpan
        start_time = Now

        LabelNotificationInfo.Text = Now
        LabelNotificationInfo.Refresh()

        ExecuteCustomerNotifications()

        Dim stop_time As DateTime = Now

        elapsed_time = stop_time.Subtract(start_time)

        LabelNotificationInfo.Text = elapsed_time.TotalSeconds.ToString("0") & " secs"
        LabelNotificationInfo.Refresh()


        ButtonNotifyAutomatic.Text = "Notify Timer" & ControlChars.CrLf & "Next Run" & ControlChars.CrLf & Format(Now.AddSeconds(TimerNotifications.Interval / 1000), "H:mm:ss tt")
        ButtonNotifyAutomatic.Refresh()

        LabelNotificationsNextRun.Text = Format(Now.AddSeconds(TimerNotifications.Interval / 1000), "H:mm:ss tt")
        LabelNotificationsNextRun.Refresh()

        'now sets the tab back to here
        TabControlMain.SelectedIndex = 0
        TabControlMain.Refresh()

    End Sub


    Private Sub ExecuteCustomerNotifications()

        'switches off recalculations
        CheckBoxRecalculateNotification.Checked = False

        'this does all the notifications
        If NotificationsRunning = True Then
            ListBoxControlRunIssues.Items.Add("Notifications already running " & Format(Now, "ddd MMM H:mm:ss tt"))
            ListBoxControlRunIssues.SelectedIndex = ListBoxControlRunIssues.Items.Count - 1
            ListBoxControlRunIssues.Refresh()
            ListBoxNotificationStatus.Items.Add("Notifications already running " & Format(Now, "ddd MMM H:mm:ss tt"))
            ListBoxNotificationStatus.SelectedIndex = ListBoxNotificationStatus.Items.Count - 1
            ListBoxNotificationStatus.Refresh()
            Exit Sub
        End If

        NotificationsRunning = True

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        Dim recordsLookup As ADODB._Recordset
        erpdb = New ADODB.Connection

        'now goes through all notifications and runs them
        erpdb.Open(strconnectSQLBizCoachSettings)
        records = erpdb.Execute("Select * from [NotificationCustomerSchedules] order by [CustomerName], NotificationName, DeliveryMethod, [CustomerEmail] ")

        Dim CustomerNameTemp
        Dim ActiveCustomerTemp
        Dim CustomerEmailTemp
        Dim BizCoachContactTemp
        Dim MobilePhoneNumberTemp
        Dim IndexIDTemp
        Dim UniqueIDTemp
        Dim LastUpdatedTemp
        Dim NotificationNameTemp
        Dim DeliveryMethodTemp
        Dim LastRanTemp
        Dim ToleranceLimitHighTemp
        Dim ToleranceLimitLowTemp
        Dim ToleranceTypeTemp
        Dim TimeToSendTemp
        Dim MondaySendTemp
        Dim TuesdaySendTemp
        Dim WednesdaySendTemp
        Dim ThursdaySendTemp
        Dim FridaySendTemp
        Dim SaturdaySendTemp
        Dim SundaySendTemp
        Dim SendNotification As Boolean = False
        Dim SendNotes As String = ""


        While Not records.EOF

            CustomerNameTemp = records.Fields("CustomerName").Value
            'currently selects the list items so we can see the notifications going
            ListBoxCustomerInfo.SelectedItem = CustomerNameTemp

            ActiveCustomerTemp = records.Fields("ActiveCustomer").Value
            CustomerEmailTemp = records.Fields("CustomerEmail").Value
            ListBoxUsers.SelectedItem = CustomerEmailTemp

            BizCoachContactTemp = records.Fields("BizCoachContact").Value
            MobilePhoneNumberTemp = records.Fields("MobilePhoneNumber").Value
            IndexIDTemp = records.Fields("IndexID").Value
            UniqueIDTemp = records.Fields("UniqueID").Value
            LastUpdatedTemp = records.Fields("LastUpdated").Value

            NotificationNameTemp = records.Fields("NotificationName").Value
            ListBoxNotificationType.SelectedItem = NotificationNameTemp


            DeliveryMethodTemp = records.Fields("DeliveryMethod").Value
            ListBoxDeliveryMethod.SelectedItem = DeliveryMethodTemp


            LastRanTemp = records.Fields("LastRan").Value
            ToleranceLimitHighTemp = records.Fields("ToleranceLimitHigh").Value
            ToleranceLimitLowTemp = records.Fields("ToleranceLimitLow").Value
            ToleranceTypeTemp = records.Fields("ToleranceType").Value
            TimeToSendTemp = records.Fields("TimeToSend").Value
            MondaySendTemp = records.Fields("MondaySend").Value
            TuesdaySendTemp = records.Fields("TuesdaySend").Value
            WednesdaySendTemp = records.Fields("WednesdaySend").Value
            ThursdaySendTemp = records.Fields("ThursdaySend").Value
            FridaySendTemp = records.Fields("FridaySend").Value
            SaturdaySendTemp = records.Fields("SaturdaySend").Value
            SundaySendTemp = records.Fields("SundaySend").Value

            'this checks if the notification is to be sent
            'time is correct etc
            SendNotification = False
            SendNotes = ""

            DetermineIfNotificationistobeSent(CustomerEmailTemp, CustomerNameTemp, NotificationNameTemp,
                                          DeliveryMethodTemp, SendNotification, SendNotes)

            records.MoveNext()
        End While

        records.Close()

        erpdb.Close()

        'allows subsequent runnings
        NotificationsRunning = False

        ListBoxControlRunIssues.Items.Add("Notifications ran " & Now)
        ListBoxControlRunIssues.SelectedIndex = ListBoxControlRunIssues.Items.Count - 1
        ListBoxControlRunIssues.Refresh()



    End Sub

    Private Sub ButtonManualRunNotifications_Click(sender As Object, e As EventArgs) Handles ButtonManualRunNotifications.Click

        ButtonManualRunNotifications.BackColor = Color.LightSalmon
        ButtonManualRunNotifications.Refresh()

        Dim start_time As DateTime = Now
        Dim elapsed_time As TimeSpan
        start_time = Now


        LabelNotificationInfo.Text = Now
        LabelNotificationInfo.Refresh()

        ExecuteCustomerNotifications()
        Dim stop_time As DateTime = Now

        elapsed_time = stop_time.Subtract(start_time)

        LabelNotificationInfo.Text = elapsed_time.TotalSeconds.ToString("0") & " secs"
        LabelNotificationInfo.Refresh()
        ButtonManualRunNotifications.BackColor = Color.LightGreen
        ButtonManualRunNotifications.Refresh()

    End Sub

    Private Sub ResetNotificationsRunningToAllowRunningToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ResetNotificationsRunningToAllowRunningToolStripMenuItem.Click

        NotificationsRunning = False

        MsgBox("Notifications Allowed")

    End Sub

    Private Sub OnToolStripMenuItemNotifications_Click(sender As Object, e As EventArgs) Handles OnToolStripMenuItemNotifications.Click
        TimerNotifications.Enabled = True
        ToolStripMenuItemTimerOffAll.Checked = False
        ToolStripMenuItemTimerOnAll.Checked = False

    End Sub

    Private Sub OffToolStripMenuItemNotifications_Click(sender As Object, e As EventArgs) Handles OffToolStripMenuItemNotifications.Click
        TimerNotifications.Enabled = False
        ToolStripMenuItemTimerOffAll.Checked = False
        ToolStripMenuItemTimerOnAll.Checked = False
    End Sub

    Private Sub TimerKPIs_Tick(sender As Object, e As EventArgs) Handles TimerKPIs.Tick
        'this runs the company KPIs'
        If VendCustomerUpdateRunning = True Then Exit Sub

        If KPIUpdateRunning = True Then Exit Sub

        '60000 is 1 minute
        '600000 is 10 minutes
        '6000000 is 100 minutes
        ListBoxUtilitiesInfo.Items.Add("KPIs ran : " & Now)
        ListBoxUtilitiesInfo.Refresh()
        TabControlMain.SelectedIndex = 2
        TabControlMain.Refresh()
        'it will run if the day has changed
        If DateKPIsLastRan.Day <> Now.Day Then
            'also run after set time
            If Now.Hour >= 5 Then
                CheckBoxExcludeFreshEats.Checked = True
                CheckBoxAllCustomerKPI.Checked = True
                CheckBoxKPITest.Checked = False
                RunKPIs()
                'restes the date to the current date
                'this means it will only run once a day after 
                '6am
                DateKPIsLastRan = Now
            End If
        End If
    End Sub

    Private Sub ButtonSaveNotifySchedule_Click(sender As Object, e As EventArgs) Handles ButtonSaveNotifySchedule.Click

        'this saves a scheduled notification
        If ListBoxCustomerInfo.SelectedIndex = -1 Or ListBoxUsers.SelectedIndex = -1 Or ListBoxNotificationType.SelectedIndex = -1 Or ListBoxDeliveryMethod.SelectedIndex = -1 Then
            MsgBox("Select all items!")
            Exit Sub
        End If

        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic



        '                ParentCompany   nvarchar(255)	Checked
        'CustomerName    nvarchar(255)	Checked
        'ActiveCustomer  bit	Checked
        'CustomerEmail   nvarchar(150)	Checked
        'BizCoachContact bit	Checked
        '                MobilePhoneNumber   nvarchar(50)	Checked
        'IndexID Int	Checked
        'UniqueID    uniqueidentifier	Checked
        'LastUpdated smalldatetime	Checked
        'NotificationName    nvarchar(150)	Unchecked
        '                DeliveryMethod  nvarchar(50)	Unchecked
        'LastRan smalldatetime	Checked
        'ToleranceLimitHigh  Decimal(18, 4)	Checked
        'ToleranceLimitLow   Decimal(18, 4)	Checked
        'ToleranceType   nchar(10)	Checked
        '                TimeToSend  smalldatetime	Checked
        'MondaySend  bit	Checked
        'TuesdaySend bit	Checked
        'WednesdaySend   bit	Checked
        'ThursdaySend    bit	Checked
        '                FridaySend  bit	Checked
        'SaturdaySend    bit	Checked
        'SundaySend  bit	Checked

        Try
            rs.Open("Insert into NotificationCustomerSchedules (CustomerName, CustomerEmail, NotificationName, " &
                                "BizCoachContact, DeliveryMethod, TimeToSend, " &
                                "MondaySend, TuesdaySend, WednesdaySend, " &
                                "ThursdaySend, FridaySend, SaturdaySend, " &
                                "SundaySend, MobilePhoneNumber, ActiveCustomer, " &
                                "LastRan) Values ('" &
                                ListBoxCustomerInfo.SelectedItem & "','" & ListBoxUsers.SelectedItem & "','" & ListBoxNotificationType.SelectedItem & "','" &
                                "0" & "','" & ListBoxDeliveryMethod.SelectedItem & "','" & Format(DateTimePickerNotifyTime.Value, "dd-MMM-yyyy HH:mm") & "','" &
                                CheckBoxSendNotificationMonday.Checked & "','" & CheckBoxSendNotificationTuesday.Checked & "','" & CheckBoxSendNotificationWednesday.Checked & "','" &
                                CheckBoxSendNotificationThursday.Checked & "','" & CheckBoxSendNotificationFriday.Checked & "','" & CheckBoxSendNotificationSaturday.Checked & "','" &
                                CheckBoxSendNotificationSunday.Checked & "','" & TextBoxAddMobileNumber.Text.Trim & "','" & "1" & "','" &
                                Format(Now.AddYears(-2), "dd/MMM/yyyy") &
                                "')", strconnectSQLBizCoachSettings)

        Catch ex As Exception
            MsgBox(Err.Description)
        End Try


    End Sub

    Private Sub ButtonRetimeITS_Click(sender As Object, e As EventArgs) Handles ButtonRetimeITS.Click
        'this puts time on the pos records
        DoRetimingOfInvoices()
    End Sub

    Private Sub NewSQLExpressToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles NewSQLExpressToolStripMenuItem.Click
        Dim ParentCompanyName As String = ""
        Dim CustomerCluster As String = "AWS Singapore EC2 RDS SQL Express - BizCoach2"
        'this gets the logon string for the database

        'AWS Singapore EC2 RDS SQL Express - BizCoach2


        CreateSQLConnection(ListBoxCustomerInfo.SelectedItem, ListBoxCustomerInfo.SelectedIndex, "True", "", CustomerCluster)

        'selects the cluster
        ListBoxCluster.SelectedItem = CustomerCluster
        ListBoxCluster.Refresh()

        'gets the user names associated with the customer
        Dim EmailString As String = ""

        GetUserNamesBizCoach(ListBoxCustomerInfo.SelectedItem, EmailString)

        TextBoxNotifyEmailAdd.Text = ""
        TextBoxAddMobileNumber.Text = ""
        LabelExistingMobile.Text = ""
        TextBoxNotifyEmailAdd.Refresh()
        TextBoxAddMobileNumber.Refresh()
        LabelExistingMobile.Refresh()

    End Sub

    Private Sub ButtonDeleteNotifySchedule_Click(sender As Object, e As EventArgs) Handles ButtonDeleteNotifySchedule.Click
        'deletes the schedule for individual customer/email

        If ListBoxCustomerInfo.SelectedIndex = -1 Or ListBoxUsers.SelectedIndex = -1 Or ListBoxNotificationType.SelectedIndex = -1 Or ListBoxDeliveryMethod.SelectedIndex = -1 Then
            MsgBox("Select all items!")
            Exit Sub
        End If

        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic

        Try
            rs.Open("Delete from NotificationCustomerSchedules where CustomerName='" & ListBoxCustomerInfo.SelectedItem &
                                          "' and CustomerEmail ='" & ListBoxUsers.SelectedItem &
                                          "' and  NotificationName ='" & ListBoxNotificationType.SelectedItem &
                                          "' and  DeliveryMethod ='" & ListBoxDeliveryMethod.SelectedItem &
                                          "'", strconnectSQLBizCoachSettings)
        Catch ex As Exception
            MsgBox(Err.Description)
        End Try


    End Sub

    Private Sub ButtonModifyNotification_Click(sender As Object, e As EventArgs) Handles ButtonModifyNotification.Click

        'updates the notification settings

        If ListBoxCustomerInfo.SelectedIndex = -1 Or ListBoxUsers.SelectedIndex = -1 Or ListBoxNotificationType.SelectedIndex = -1 Or ListBoxDeliveryMethod.SelectedIndex = -1 Then
            MsgBox("Select all items!")
            Exit Sub
        End If

        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic

        Try
            rs.Open("Update NotificationCustomerSchedules set TimeToSend ='" & Format(DateTimePickerNotifyTime.Value, "dd-MMM-yyyy HH:mm") &
                                "', MondaySend  ='" & CheckBoxSendNotificationMonday.Checked &
                                "', TuesdaySend  ='" & CheckBoxSendNotificationTuesday.Checked &
                                "', WednesdaySend ='" & CheckBoxSendNotificationWednesday.Checked &
                                "', ThursdaySend ='" & CheckBoxSendNotificationThursday.Checked &
                                "', FridaySend ='" & CheckBoxSendNotificationFriday.Checked &
                                "', SaturdaySend ='" & CheckBoxSendNotificationSaturday.Checked &
                                "', SundaySend ='" & CheckBoxSendNotificationSunday.Checked &
                                "' where CustomerName='" & ListBoxCustomerInfo.SelectedItem &
                                "' and CustomerEmail ='" & ListBoxUsers.SelectedItem &
                                "' and  NotificationName ='" & ListBoxNotificationType.SelectedItem &
                                "' and  DeliveryMethod ='" & ListBoxDeliveryMethod.SelectedItem &
                                "'", strconnectSQLBizCoachSettings)

        Catch ex As Exception
            MsgBox(Err.Description)
        End Try



    End Sub

    Private Sub ReloadCustomersToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ReloadCustomersToolStripMenuItem.Click
        LoadCustomers()
    End Sub

    Private Sub NumericUpDownVendNewCustomerCheckTimerSettings_ValueChanged(sender As Object, e As EventArgs) Handles NumericUpDownVendNewCustomerCheckTimerSettings.ValueChanged

        My.Settings.VendnewCustomerTimer = NumericUpDownVendNewCustomerCheckTimerSettings.Value
        My.Settings.Save()
        '      Me.Close()
    End Sub

    Private Sub NumericUpDownNotificationTimerSettings_ValueChanged(sender As Object, e As EventArgs) Handles NumericUpDownNotificationTimerSettings.ValueChanged
        My.Settings.NotificationsTimer = NumericUpDownNotificationTimerSettings.Value
        My.Settings.Save()
        '       Me.Close()
    End Sub

    Private Sub NumericUpDownVendKPIRunTimerSettings_ValueChanged(sender As Object, e As EventArgs) Handles NumericUpDownVendKPIRunTimerSettings.ValueChanged
        My.Settings.KPIRunTimer = NumericUpDownVendKPIRunTimerSettings.Value
        My.Settings.Save()
        '        Me.Close()

    End Sub

    Private Sub NumericUpDownVendCopyG1DataTimerSettings_ValueChanged(sender As Object, e As EventArgs) Handles NumericUpDownVendCopyG1DataTimerSettings.ValueChanged

        My.Settings.CopyG1DataTimer = NumericUpDownVendCopyG1DataTimerSettings.Value

        My.Settings.Save()
        '     Me.Close()

    End Sub

    Private Sub ButtonCopyPredictionsData_Click(sender As Object, e As EventArgs) Handles ButtonCopyPredictionsData.Click

        If ListBoxCustomerInfo.SelectedIndex = -1 Then
            MsgBox("select cust")
            Exit Sub
        End If


        'this copys the predictions data and adds month and group

        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection

        erpdb.Open(strconnectSQLBizCoachCustomerDataSQL)

        'holds the predictions
        Dim PredictionsStore(20000, 4)

        'this deletes the predictions that are old
        Dim SqlStatement As String = "Select * from [Predictions]  where predictions_active = '1' order by predicted_date desc"
        records = erpdb.Execute(SqlStatement)

        SqlStatement = "Select * from [Predictions Consolidated]  where predictions_name is not null order by predicted_date desc"

        records = erpdb.Execute(SqlStatement)
        Dim predicted_date As Date = Now
        Dim predicted_value_numeric As Decimal = 0
        Dim OutletName As String = ""
        Dim predictions_name As String = ""
        Dim numRecords As Integer = 0
        Dim GroupTotal As Decimal = 0
        Dim PredicteddateOld As Date = Now

        While Not records.EOF
            predicted_date = records.Fields("predicted_date").Value
            predicted_value_numeric = records.Fields("predicted_value_numeric").Value
            OutletName = records.Fields("Outlet Name").Value
            predictions_name = records.Fields("predictions_name").Value
            If PredicteddateOld.ToShortDateString = predicted_date.ToShortDateString Then
                GroupTotal = GroupTotal + predicted_value_numeric
                PredictionsStore(numRecords, 0) = predicted_date.ToShortDateString
                PredictionsStore(numRecords, 1) = predicted_value_numeric
                PredictionsStore(numRecords, 2) = OutletName
                PredictionsStore(numRecords, 3) = predictions_name
                PredictionsStore(numRecords, 4) = GroupTotal
                PredicteddateOld = predicted_date.ToShortDateString
            Else
                GroupTotal = 0
                PredictionsStore(numRecords, 0) = predicted_date.ToShortDateString
                PredictionsStore(numRecords, 1) = predicted_value_numeric
                PredictionsStore(numRecords, 2) = OutletName
                PredictionsStore(numRecords, 3) = predictions_name
                PredictionsStore(numRecords, 4) = GroupTotal
                PredicteddateOld = predicted_date.ToShortDateString
                GroupTotal = 0
            End If
            numRecords += 1
            records.MoveNext()
        End While
        records.Close()

        Dim UniqueIDTemt As Guid = System.Guid.NewGuid
        Dim sqlinsertstatement As String = ""

        'this inserts the dates
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set MonthCode ='January', MonthNumber ='1', MonthNumber2Digits ='01', Month ='Jan', MonthCodeShort ='Jan'" &
                    " where month(predicted_date) ='1'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set MonthCode ='February', MonthNumber ='2', MonthNumber2Digits ='02', Month ='Feb', MonthCodeShort ='Feb'" &
                    " where month(predicted_date) ='2'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set MonthCode ='March', MonthNumber ='3', MonthNumber2Digits ='03', Month ='Mar', MonthCodeShort ='Mar'" &
                    " where month(predicted_date) ='3'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set MonthCode ='April', MonthNumber ='4', MonthNumber2Digits ='04', Month ='Apr', MonthCodeShort ='Apr'" &
                    " where month(predicted_date) ='4'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try

        Try
            sqlinsertstatement = "update [Predictions Consolidated] set MonthCode ='May', MonthNumber ='5', MonthNumber2Digits ='05', Month ='May', MonthCodeShort ='May'" &
                    " where month(predicted_date) ='5'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set MonthCode ='June', MonthNumber ='6', MonthNumber2Digits ='06', Month ='Jun', MonthCodeShort ='Jun'" &
                    " where month(predicted_date) ='6'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set MonthCode ='July', MonthNumber ='7', MonthNumber2Digits ='07', Month ='Jul', MonthCodeShort ='Jul'" &
                    " where month(predicted_date) ='7'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set MonthCode ='August', MonthNumber ='8', MonthNumber2Digits ='08', Month ='Aug', MonthCodeShort ='Aug'" &
                    " where month(predicted_date) ='8'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set MonthCode ='September', MonthNumber ='9', MonthNumber2Digits ='09', Month ='Sep', MonthCodeShort ='Sep'" &
                    " where month(predicted_date) ='9'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set MonthCode ='October', MonthNumber ='10', MonthNumber2Digits ='10', Month ='Oct', MonthCodeShort ='Oct'" &
                    " where month(predicted_date) ='10'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set MonthCode ='November', MonthNumber ='11', MonthNumber2Digits ='11', Month ='Nov', MonthCodeShort ='Nov'" &
                    " where month(predicted_date) ='11'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set MonthCode ='December', MonthNumber ='12', MonthNumber2Digits ='12', Month ='Dec', MonthCodeShort ='Dec'" &
                    " where month(predicted_date) ='12'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try

        Try
            sqlinsertstatement = "update [Predictions Consolidated] set Year ='2015'" &
                    " where year(predicted_date) ='2015'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set Year ='2016'" &
                    " where year(predicted_date) ='2016'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set Year ='2017'" &
                    " where year(predicted_date) ='2017'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set Year ='2018'" &
                    " where year(predicted_date) ='2018'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set Year ='2019'" &
                    " where year(predicted_date) ='2019'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try
        Try
            sqlinsertstatement = "update [Predictions Consolidated] set Year ='2020'" &
                    " where year(predicted_date) ='2020'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try

        Dim TotalNetSalesTemp As Decimal = 0
        Dim TotalGrossSalesTemp As Decimal = 0
        Dim OutLetNameTemp As String = ""
        Dim StartDateOfTheWeek As Date = Now

        UniqueIDTemt = System.Guid.NewGuid
        Dim PredictDate As Date = Now
        ProgressBarG1Load.Maximum = numRecords

        For counter = 0 To numRecords
            'this updates week number
            PredictDate = PredictionsStore(counter, 0)
            PredictDate = PredictDate.ToShortDateString
            OutLetNameTemp = PredictionsStore(counter, 2)
            'works out the start of the week
            'WeekStartsOn is the variable for the start of the week for the customer

            If PredictDate.DayOfWeek = DayOfWeek.Monday Then
                StartDateOfTheWeek = PredictDate
            ElseIf PredictDate.DayOfWeek = DayOfWeek.Tuesday Then
                StartDateOfTheWeek = PredictDate.AddDays(-1)
            ElseIf PredictDate.DayOfWeek = DayOfWeek.Wednesday Then
                StartDateOfTheWeek = PredictDate.AddDays(-2)
            ElseIf PredictDate.DayOfWeek = DayOfWeek.Thursday Then
                StartDateOfTheWeek = PredictDate.AddDays(-3)
            ElseIf PredictDate.DayOfWeek = DayOfWeek.Friday Then
                StartDateOfTheWeek = PredictDate.AddDays(-4)
            ElseIf PredictDate.DayOfWeek = DayOfWeek.Saturday Then
                StartDateOfTheWeek = PredictDate.AddDays(-5)
            ElseIf PredictDate.DayOfWeek = DayOfWeek.Sunday Then
                StartDateOfTheWeek = PredictDate.AddDays(-6)
            End If


            Try
                sqlinsertstatement = "update [Predictions Consolidated] set [Week Number] = datepart(wk,'" & Format(PredictDate, "dd/MMM/yyyy") & "')" &
                                            ", [Date Record] ='" & Format(PredictDate, "dd/MMM/yyyy") &
                                            "', [Week Start] ='" & Format(StartDateOfTheWeek, "dd/MMM/yyyy") &
                                            "'  where predicted_date ='" & Format(PredictDate, "dd/MMM/yyyy") & "'"
                rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
            Catch ex As Exception
                MsgBox("Test " & Err.Description)
            End Try

            'only do this is sales exist ie if no in the furtue
            If DateDiff(DateInterval.Day, PredictDate, Now) > 1 Then
                'now gets the total Net sales and total gross sales per outlet
                records = erpdb.Execute("select sum([Total Net Sales]) as TotNS, sum([Total Gross Sales]) as TotGS from [POSSales] 
                            where cast([Date Record] as date) ='" & Format(PredictDate, "dd/MMM/yyyy") & "' and [Outlet Name] ='" & OutLetNameTemp & "'")
                TotalNetSalesTemp = 0
                TotalGrossSalesTemp = 0
                While Not records.EOF
                    TotalNetSalesTemp = 0
                    TotalGrossSalesTemp = 0
                    Try
                        TotalNetSalesTemp = records.Fields("TotNS").Value
                    Catch ex As Exception
                    End Try
                    Try
                        TotalGrossSalesTemp = records.Fields("TotGS").Value
                    Catch ex As Exception
                    End Try
                    records.MoveNext()
                End While
                records.Close()
                Try
                    sqlinsertstatement = "update [Predictions Consolidated] set [Total Net Sales] = '" & TotalNetSalesTemp & "'" &
                                ", [Total Gross Sales] ='" & TotalGrossSalesTemp & "'  where predicted_date ='" & Format(PredictDate, "dd/MMM/yyyy") &
                    "' and [Outlet Name] ='" & OutLetNameTemp & "'"

                    rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
                Catch ex As Exception
                    MsgBox("Test " & Err.Description)
                End Try
            End If
            If ProgressBarG1Load.Value = ProgressBarG1Load.Maximum Then ProgressBarG1Load.Maximum = ProgressBarG1Load.Maximum + 100
            ProgressBarG1Load.Value = counter
            ProgressBarG1Load.Refresh()
            LabelG1Text.Text = PredictDate
            LabelG1Text.Refresh()
        Next


        'delete old ones for totl net sales 
        Try
            sqlinsertstatement = "delete from [Predictions Consolidated] where model_name='Sales' and cast([predicted_date] as date) <='" &
                    Format(Now.AddDays(-40), "dd-MMM-yyyy") & "'"
            rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
        Catch ex As Exception
            MsgBox("Test " & Err.Description)
        End Try


        'now add the sum of total net sales
        SqlStatement = "select sum([Total Net Sales]) as SumSales, sum([Total Gross Sales]) as GrossSales, [Outlet Name], cast([Date Record] as date) 
as Date1 from [POSSalesView]  where [Date Record] >='20-Jan-2018' group by [Outlet Name], cast([Date Record] as date) order by cast([Date Record] as date) desc"

        records = erpdb.Execute(SqlStatement)

        Dim dateNew As Date = Now
        Dim Numrecs As Int16 = 0
        While Not records.EOF


            dateNew = records.Fields("Date1").Value

            'deletes the old one first
            Try

                sqlinsertstatement = "delete from [Predictions Consolidated] where model_name='Sales' and cast([predicted_date] as date) ='" &
                    Format(dateNew, "dd-MMM-yyyy") & "' and [Outlet Name] ='" & records.Fields("Outlet Name").Value & "'"


                rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
            Catch ex As Exception
                MsgBox("Test " & Err.Description)
            End Try


            If dateNew.DayOfWeek = DayOfWeek.Monday Then
                StartDateOfTheWeek = dateNew
            ElseIf dateNew.DayOfWeek = DayOfWeek.Tuesday Then
                StartDateOfTheWeek = dateNew.AddDays(-1)
            ElseIf dateNew.DayOfWeek = DayOfWeek.Wednesday Then
                StartDateOfTheWeek = dateNew.AddDays(-2)
            ElseIf dateNew.DayOfWeek = DayOfWeek.Thursday Then
                StartDateOfTheWeek = dateNew.AddDays(-3)
            ElseIf dateNew.DayOfWeek = DayOfWeek.Friday Then
                StartDateOfTheWeek = dateNew.AddDays(-4)
            ElseIf dateNew.DayOfWeek = DayOfWeek.Saturday Then
                StartDateOfTheWeek = dateNew.AddDays(-5)
            ElseIf dateNew.DayOfWeek = DayOfWeek.Sunday Then
                StartDateOfTheWeek = dateNew.AddDays(-6)
            End If

            Try

                sqlinsertstatement = "Insert into [Predictions Consolidated] ([Total Net Sales], [Total Gross Sales], [predicted_date], " &
                        "[Outlet Name], model_name, predicted_value_numeric, " &
                        "prediction_active, [Week Start], Month, Year, " &
                        "[Date Record], MonthCode, MonthCodeShort, " &
                        "MonthNumber, monthNumber2Digits) Values ('" &
                    records.Fields("SumSales").Value & "','" & records.Fields("GrossSales").Value & "','" & Format(dateNew, "dd-MMM-yyyy") & "','" &
                    records.Fields("Outlet Name").Value & "','" & "Sales" & "','" & records.Fields("SumSales").Value &
                     "','" & "1" & "','" & Format(StartDateOfTheWeek, "dd/MMM/yyyy") & "','" & Format(dateNew, "MMM") & "','" & Format(dateNew, "yyyy") &
                     "','" & Format(dateNew, "dd-MMM-yyyy") & "','" & Format(dateNew, "MMMM") & "','" & Format(dateNew, "MMM") &
                     "','" & Val(Format(dateNew, "MM")) & "','" & Format(dateNew, "MM") & "')"


                rs.Open(sqlinsertstatement, strconnectSQLBizCoachCustomerDataSQL)
            Catch ex As Exception
                MsgBox("Test " & Err.Description)
            End Try

            If ProgressBarG1Load.Value = ProgressBarG1Load.Maximum Then ProgressBarG1Load.Maximum = ProgressBarG1Load.Maximum + 100
            ProgressBarG1Load.Value = Numrecs
            ProgressBarG1Load.Refresh()
            LabelG1Text.Text = dateNew.ToShortDateString
            LabelG1Text.Refresh()

            Numrecs += 1

            records.MoveNext()
        End While
        records.Close()



        erpdb.Close()

    End Sub

    Private Sub ShowNotificationSchedulesInNotificationTabToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ShowNotificationSchedulesInNotificationTabToolStripMenuItem.Click

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        erpdb.Open(strconnectSQLBizCoachSettings)


        'DailyReportHTMLEmailString = "Notification Schedules for : " & Format(Now, "ddd dd MMM yyyy") &
        '                                               "<br />" & "<br />" &
        '                                              "<table border=1><col width=""300""><col width=""150""><col width=""150""><tr>" &
        '                                             "<td><b>Name</td>" &
        '                                            "<td><b><p  style =""text-align:center"">#</td>" &
        '                                           "<td><b><p  style =""text-align:center"">Email</td>" &
        '                                          "<td><b><p  style =""text-align:center"">Name</b></td>" &
        '                                         "<td><b><p  style =""text-align:center"">Method</b></td>" &
        '                                        "</b></tr>"



        DailyReportHTMLEmailString = "Notification Schedules for : " & Format(Now, "ddd dd MMM yyyy") &
                                                        "<br />" & "<br />" &
                                                        "<table border=1><tr>" &
                                                        "<td><b>#</td>" &
                                                        "<td><b><p  style =""text-align:center"">Customer</td>" &
                                                        "<td><b><p  style =""text-align:center"">Email</td>" &
                                                        "<td><b><p  style =""text-align:center"">Name</b></td>" &
                                                        "<td><b><p  style =""text-align:center"">Method</b></td>" &
                                                        "<td><b><p  style =""text-align:center"">Time</b></td>" &
                                                        "</b></tr>"
        Dim NumRecs As Integer = 1

        Dim SqlStatement As String = "Select * from [NotificationCustomerSchedules] order by [CustomerName], [CustomerEmail], [NotificationName]"
        records = erpdb.Execute(SqlStatement)
        While Not records.EOF

            DailyReportHTMLEmailString = DailyReportHTMLEmailString & "<tr>" &
                                                                        "<td>" & NumRecs & "</td>" &
                                                                        "<td>" & records.Fields("CustomerName").Value & "</td>" &
                                                                        "<td>" & records.Fields("CustomerEmail").Value & "</td>" &
                                                                        "<td>" & records.Fields("NotificationName").Value & "</td>" &
                                                                         "<td>" & records.Fields("DeliveryMethod").Value & "</td>" &
                                                                       "<td>" & Format(records.Fields("TimeToSend").Value, "H:mm") & "</tr>"

            NumRecs += 1

            records.MoveNext()
        End While
        records.Close()




        'closes the table
        DailyReportHTMLEmailString = "" & DailyReportHTMLEmailString & "</table></span><br /><hr /><br />"
        DailyReportHTMLEmailString = DailyReportHTMLEmailString & "<br />"



        erpdb.Close()

        'publish to the web browser on the notifications page
        Dim document As System.Windows.Forms.HtmlDocument = WebBrowserNotification.Document
        WebBrowserNotification.DocumentText = DailyReportHTMLEmailString

    End Sub

    Private Sub Buttonremove_Click(sender As Object, e As EventArgs) Handles Buttonremove.Click

        MsgBox("No longer used!")

        Exit Sub

        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        erpdb.Open(strconnectSQLBizCoachCustomerDataSQL)

        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic


        Buttonremove.BackColor = Color.Red
        Buttonremove.Refresh()
        Dim NumRecs As Integer = 0

        Dim SqlStatement As String = "Select * from [ItemDetails] order by [ItemCode]"
        records = erpdb.Execute(SqlStatement)

        Dim ItemCode
        Dim ItemCodeOld
        ListBoxUtilitiesInfo.Items.Clear()

        While Not records.EOF
            ItemCode = records.Fields("ItemCode").Value.ToString.Trim
            If ItemCode = ItemCodeOld Then
                '     MsgBox("stop")
                ListBoxUtilitiesInfo.Items.Add(ItemCode)
                ListBoxUtilitiesInfo.Refresh()
            End If
            ItemCodeOld = ItemCode
            NumRecs += 1
            If ProgressBarG1Load.Value >= ProgressBarG1Load.Maximum Then ProgressBarG1Load.Maximum = ProgressBarG1Load.Maximum + 100
            ProgressBarG1Load.Value = ProgressBarG1Load.Value + 1
            ProgressBarG1Load.Refresh()
            records.MoveNext()
        End While
        records.Close()


        'now deletes the duplicated
        For counter = 0 To ListBoxUtilitiesInfo.Items.Count - 1
            ListBoxUtilitiesInfo.SelectedIndex = counter
            ListBoxUtilitiesInfo.Refresh()

            If ListBoxCustomerInfo.SelectedItem = "In The Shade" Then
                Try
                    rs.Open("Delete from  ItemDetails where ItemCode ='" & ListBoxUtilitiesInfo.SelectedItem & "'", strconnectSQLBizCoachCustomerDataSQL)
                Catch ex As Exception
                    MsgBox("Epdate Error " & Err.Description)
                End Try
            End If


        Next

        Buttonremove.BackColor = Color.LightGreen
        Buttonremove.Refresh()

        erpdb.Close()

    End Sub

    Private Sub TestToPostresSQLToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles TestToPostresSQLToolStripMenuItem.Click
        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        Try
            erpdb.Open(strconnectPostGresSQLUsers)
            ListBoxControlRunIssues.Items.Add("PostGresSQL connected OK")
            ListBoxControlRunIssues.SelectedIndex = ListBoxControlRunIssues.Items.Count - 1
            ListBoxControlRunIssues.Refresh()
        Catch ex As Exception
            MessageBox.Show("An error occured connecting to the Postgres server, the error was:" & ControlChars.CrLf & Err.Description, "Connection error")
        End Try




    End Sub

    Private Sub ButtonRestrictKPIs_Click(sender As Object, e As EventArgs) Handles ButtonRestrictKPIs.Click

        MsgBox("No longer used")
        Exit Sub

        Dim str As String =
       "POS Month End Projection, Total#
        POS Daily Sales (yesterday) - Total# 
        POS Daily Sales (yesterday same day last week) - Total#
        POS Sales MTD - Total#
        POS Sales LMTD Yesterday - Total#
        POS Sales LMTD - Total#
        POS Sales YTD - Total#
        POS Sales LYTD - Total# 
        POS Daily Sales Yesterday to LW Same Day Variance - Total#
        POS Daily Sales Yesterday to LW Same Day Variance (%) - Total#
        POS Sales MTD Yesterday Variance LMTD Sales, Total#
        POS Sales MTD Yesterday Variance LMTD Sales % - Total#
        POS Daily Sales YTD to LYTD Variance - Total#
        POS Daily Sales YTD to LYTD Variance (%) - Total#
        POS Sales Week to Yesterday From Monday - Total#
        POS Sales Last Week to LW Yesterday From Monday - Total#
        POS Sales WTD Yesterday Variance LWTD Sales from Monday, Total#
        POS Sales WTD Yesterday Variance LWTD Sales from Monday %, Total# 
        POS Customer Count, Yesterday, Total#
        POS Customer Count, Yesterday last week, Total#
        POS Customer Count, Yesterday variance to last week, Total#
        POS Customer Count, Yesterday variance to last week %, Total# 
        POS Basket Average Revenue (excluding tax), Yesterday, Total# 
        POS Basket Average Revenue (excluding tax), Yesterday last week, Total#
        POS Basket Average Revenue (excluding tax), Yesterday variance to last week, Total#
        POS Basket Average Revenue (excluding tax), Yesterday variance to last week %, Total# 
        POS Basket Size, Yesterday, Total#
        POS Basket Size, Yesterday last week, Total#
        POS Basket Size, Yesterday variance to last week, Total#
        POS Basket Size, Yesterday variance to last week %, Total# 
        POS Daily Sales (yesterday)#
        POS Daily Sales (yesterday same day last week)#
        POS Sales MTD by Dimensions#
        POS Sales LMTD Yesterday#
        POS Sales LMTD#
        POS Sales YTD by Dimensions#
        POS Sales LYTD by Dimensions#
        POS Daily Sales Yesterday to LW Same Day Variance#
        POS Daily Sales Yesterday to LW Same Day Variance (%)#
        POS Sales MTD Yesterday Variance LMTD Sales# 
        POS Daily Sales MTD to LMTD Variance#
        POS Sales MTD Yesterday Variance LMTD Sales %#
        POS Daily Sales YTD to LYTD Variance#
        POS Daily Sales YTD to LYTD Variance (%)#
        POS Sales Week to Yesterday From Monday#
        POS Sales Last Week to LW Yesterday From Monday#
        POS Sales WTD Yesterday Variance LWTD Sales from Monday#
        POS Sales WTD Yesterday Variance LWTD Sales from Monday %#
        POS Customer Count, Yesterday#
        POS Customer Count, Yesterday last week#
        POS Customer Count, Yesterday variance to last week#
        POS Customer Count, Yesterday variance to last week %#
        POS Basket Average Revenue (excluding tax), Yesterday#
        POS Basket Average Revenue (excluding tax), Yesterday last week#
        POS Basket Average Revenue (excluding tax), Yesterday variance to last week#
        POS Basket Average Revenue (excluding tax), Yesterday variance to last week %#
        POS Basket Size, Yesterday#
        POS Basket Size, Yesterday last week#
        POS Basket Size, Yesterday variance to last week#
        POS Basket Size, Yesterday variance to last week %#"
        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic
        Dim strArr() As String
        Dim count As Integer
        strArr = str.Split("#")
        For count = 0 To strArr.Length - 1
            '   MsgBox(strArr(count))
            Try
                rs.Open("Update [KPIFormulaes] set [BizCoach2Kpi] = '1' where KPIName = '" & strArr(count).Trim & "'", strconnectSQLBizCoachSettings)
            Catch ex As Exception
                MsgBox("Update Error " & Err.Description)
            End Try
        Next
    End Sub

    Private Sub ShowSystemStatusLogToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ShowSystemStatusLogToolStripMenuItem.Click

        ButtonDoAllNotifyTypes.BackColor = Color.LightSalmon
        ButtonDoAllNotifyTypes.Refresh()

        'this shows the system status log
        Dim erpdb As ADODB.Connection
        Dim records As ADODB._Recordset
        erpdb = New ADODB.Connection
        erpdb.Open(strconnectSQLBizCoachCustomerInformationDatabase)

        TabControlMain.SelectedIndex = 3
        TabControlMain.Refresh()

        DailyReportHTMLEmailString = "<!DOCTYPE html><html> Notification Schedules for : " & Format(Now, "ddd dd MMM yyyy") &
                                                        "<br />" & "<br />" &
                                                        "<table border=1><tr>" &
                                                        "<td><b><p  style =""text-align:center"">Date</td>" &
                                                        "<td><b><p  style =""text-align:center"">Customer</td>" &
                                                        "<td><b><p  style =""text-align:center"">Event Type</td>" &
                                                        "<td><b><p  style =""text-align:center""> </b>Description</td>" &
                                                        "<td><b><p  style =""text-align:center""> </b></td>" &
                                                        "<td><b><p  style =""text-align:center""> </b></td>" &
                                                        "</b></tr>"

        'create a excel spreadsheet
        'This is the excel export
        Dim xlApp As Excel.Application = New Microsoft.Office.Interop.Excel.Application()

        If xlApp Is Nothing Then
            ListBoxNotificationStatus.Items.Add("Excel is not properly installed!!")
            ButtonDoAllNotifyTypes.BackColor = Color.Red
            ButtonDoAllNotifyTypes.Refresh()
            Exit Sub
        End If

        Dim xlWorkBook As Excel.Workbook
        Dim xlWorkSheet As Excel.Worksheet
        Dim xlWorkSheet1 As Excel.Worksheet
        Dim misValue As Object = System.Reflection.Missing.Value

        xlWorkBook = xlApp.Workbooks.Add(misValue)

        Dim worksheets As Excel.Sheets = xlWorkBook.Worksheets
        Dim xlNewSheet = DirectCast(worksheets.Add(worksheets(1), Type.Missing, Type.Missing, Type.Missing), Excel.Worksheet)

        xlWorkSheet = xlWorkBook.Sheets("Sheet1")
        xlWorkSheet1 = xlWorkBook.Sheets("Sheet2")
        With xlWorkBook
            .Sheets("Sheet1").Select()
            .Sheets("Sheet1").Name = "Main"
            .Sheets("Sheet2").Name = "Data"
            '   .Sheets("Sheet3").Name = "Taroko #2"
            .Worksheets.Add(After:= .Worksheets(2)) 'INSERT AFTER WORKSHEET 3 ( "Taroko #2" )
            '    .Worksheets("Sheet4").Select()
            '     xlApp.Visible = True
        End With
        xlWorkBook.Sheets("Main").select

        'this writes the data
        'row, column

        xlWorkSheet.Cells(1, 1) = "Group Daily Sales for "
        xlWorkSheet.Cells(2, 1) = Format(Now, "ddd d MMM yyyy")

        'now builds the html/excel
        Dim NumRecs As Integer = 1
        Dim DateRecord As Date = Now.AddDays(-1)
        Dim SqlStatement As String = "Select * from [CustomerStatusLog] where [Date Record] >='" & Format(DateRecord, "dd/MMM/yyyy") & "' order by [DateTimeStarted] desc, [CompanyName], [EventType]"
        records = erpdb.Execute(SqlStatement)

        While Not records.EOF
            DateRecord = records.Fields("DateTimeStarted").Value
            DailyReportHTMLEmailString =
                DailyReportHTMLEmailString & "<tr>" &
                                             "<td>" & Format(DateRecord, "ddd d MMM HH:mm") & "</td>" &
                                             "<td>" & records.Fields("CompanyName").Value & "</td>" &
                                             "<td>" & records.Fields("EventType").Value & "</td>" &
                                             "<td>" & records.Fields("EventLongText").Value & "</td>" &
                                             "<td>" & "" & "</td>" &
                                             "<td>" & "" & "</tr>"
            xlWorkSheet.Cells(NumRecs + 4, 1) = Format(DateRecord, "ddd d MMM HH:mm")
            xlWorkSheet.Cells(NumRecs + 4, 2) = records.Fields("CompanyName").Value
            xlWorkSheet.Cells(NumRecs + 4, 3) = records.Fields("EventType").Value
            xlWorkSheet.Cells(NumRecs + 4, 4) = records.Fields("EventLongText").Value
            NumRecs += 1
            LabelNotificationInfo.Text = NumRecs
            LabelNotificationInfo.Refresh()
            records.MoveNext()
        End While
        records.Close()
        erpdb.Close()

        '       xlWorkSheet.Cells(4, 1) = ExcelHeaderLine0401
        '       xlWorkSheet.Cells(5, 1) = ExcelHeaderLine0501

        xlWorkSheet.Range("A1:X1").EntireColumn.AutoFit()

        'this adds the data
        '     xlWorkBook.Sheets("Data").select
        '    xlWorkBook.Sheets("Data").select
        '      xlWorkBook.Sheets(1).Select
        xlWorkBook.Sheets("Data").Activate

        xlWorkSheet.Cells(1, 1) = "bbs in Data"
        xlWorkSheet.Cells(2, 1) = "ooiiue"

        Dim ExcelFileName As String = "c:\impalacustomers\reportexcel\" + "System Status Log " + Format(Now, "ddMMMyyyyHHmm")

        xlApp.DisplayAlerts = False
        xlWorkBook.SaveAs(ExcelFileName, Excel.XlFileFormat.xlWorkbookNormal, misValue, misValue, misValue, misValue,
         Excel.XlSaveAsAccessMode.xlExclusive)
        xlWorkBook.Close(True, misValue)
        xlApp.Quit()

        releaseObject(xlWorkSheet)
        releaseObject(xlWorkBook)
        releaseObject(xlApp)

        ButtonDoAllNotifyTypes.BackColor = Color.LightGreen
        ButtonDoAllNotifyTypes.Refresh()

        'closes the table
        DailyReportHTMLEmailString = "" & DailyReportHTMLEmailString & "</table></span><br /><hr /><br />"
        DailyReportHTMLEmailString = DailyReportHTMLEmailString & "<br />"

        'publish to the web browser on the notifications page
        Dim document As System.Windows.Forms.HtmlDocument = WebBrowserNotification.Document
        WebBrowserNotification.DocumentText = DailyReportHTMLEmailString

    End Sub

    Private Sub releaseObject(ByVal obj As Object)
        Try
            System.Runtime.InteropServices.Marshal.ReleaseComObject(obj)
            obj = Nothing
        Catch ex As Exception
            obj = Nothing
        Finally
            GC.Collect()
        End Try
    End Sub

    Private Sub ButtonResetTestDatabase_Click(sender As Object, e As EventArgs) Handles ButtonResetTestDatabase.Click

        'this resets the test database

        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic

        strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachDataLoading" & ";PWD=" & "JaMyt45!ord" &
                ";DATABASE=" & "BizCoachCustomers" &
             ";SERVER=" & "ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433"

        'strconnectSQLBizCoachSettings
        'strconnectSQLBizCoachCustomerInformationDatabase
        Try
            rs.Open("Delete from CustomerContacts where CustomerName = '" & "GloryStores_20180212034218" & "'", strconnectSQLBizCoachCustomerInformationDatabase)
            ListBoxUtilitiesInfo.Items.Add("Contacts for " & "GloryStores_20180212034218 removed")
            ListBoxUtilitiesInfo.SelectedIndex = ListBoxUtilitiesInfo.Items.Count - 1
            ListBoxUtilitiesInfo.Refresh()
        Catch ex As Exception
            MsgBox("Update Error " & Err.Description)
        End Try

        Try
            rs.Open("Delete from CustomerNames where CustomerName = '" & "GloryStores_20180212034218" & "'", strconnectSQLBizCoachCustomerInformationDatabase)
            ListBoxUtilitiesInfo.Items.Add("Customer for " & "GloryStores_20180212034218 removed")
            ListBoxUtilitiesInfo.SelectedIndex = ListBoxUtilitiesInfo.Items.Count - 1
            ListBoxUtilitiesInfo.Refresh()
        Catch ex As Exception
            MsgBox("Update Error " & Err.Description)
        End Try


        Try
            rs.Open("Delete from [NotificationCustomerSchedules] where CustomerName = '" & "GloryStores_20180212034218" & "'", strconnectSQLBizCoachSettings)
            ListBoxUtilitiesInfo.Items.Add("NotificationCustomerSchedules for " & "GloryStores_20180212034218 removed")
            ListBoxUtilitiesInfo.SelectedIndex = ListBoxUtilitiesInfo.Items.Count - 1
            ListBoxUtilitiesInfo.Refresh()
        Catch ex As Exception
            MsgBox("Update Error " & Err.Description)
        End Try

        'deletes from notification schedules
        Dim myCommand As String 'to store the sql command to be executed
        Dim cmd As SqlCommand = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        myCommand = "alter database " & "BizCoachDataGloryStores_20180212034218" & " set single_user with rollback immediate"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUtilitiesInfo.Items.Add("Database " & "BizCoachDataGloryStores_20180212034218 closed connections")
            ListBoxUtilitiesInfo.SelectedIndex = ListBoxUtilitiesInfo.Items.Count - 1
            ListBoxUtilitiesInfo.Refresh()

        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = " DROP DATABASE " & "BizCoachDataGloryStores_20180212034218"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUtilitiesInfo.Items.Add("Dropped database " & "BizCoachDataGloryStores_20180212034218")
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        Dim rs_PostGres As ADODB.Recordset
        rs_PostGres = New ADODB.Recordset
        rs_PostGres.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs_PostGres.LockType = ADODB.LockTypeEnum.adLockOptimistic

        Try
            rs_PostGres.Open("Update create_db_job_schedule set job_done ='False'  where user_id ='" & "351" & "'", strconnectPostGresSQLUsers)
        Catch ex As Exception
            MsgBox("Epdate Error " & Err.Description)
        End Try

        'reloads the customers
        'as 1 has been removed
        LoadCustomers()

    End Sub

    Private Sub ButtonTestWillBob3_20180227061920_Click(sender As Object, e As EventArgs) Handles ButtonTestWillBob3_20180227061920.Click


        'this resets the test database

        Dim rs As ADODB.Recordset
        rs = New ADODB.Recordset
        rs.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs.LockType = ADODB.LockTypeEnum.adLockOptimistic

        strconnectSQLCommandTypeControl.ConnectionString = "UID=" & "BizCoachDataLoading" & ";PWD=" & "JaMyt45!ord" &
                ";DATABASE=" & "BizCoachCustomers" &
             ";SERVER=" & "ec2-13-229-212-138.ap-southeast-1.compute.amazonaws.com,1433"

        'strconnectSQLBizCoachSettings
        'strconnectSQLBizCoachCustomerInformationDatabase
        Try
            rs.Open("Delete from CustomerContacts where CustomerName = '" & "TestWillBob3_20180227061920" & "'", strconnectSQLBizCoachCustomerInformationDatabase)
            ListBoxUtilitiesInfo.Items.Add("Contacts for " & "TestWillBob3_20180227061920 removed")
            ListBoxUtilitiesInfo.SelectedIndex = ListBoxUtilitiesInfo.Items.Count - 1
            ListBoxUtilitiesInfo.Refresh()
        Catch ex As Exception
            MsgBox("Update Error " & Err.Description)
        End Try

        Try
            rs.Open("Delete from CustomerNames where CustomerName = '" & "TestWillBob3_20180227061920" & "'", strconnectSQLBizCoachCustomerInformationDatabase)
            ListBoxUtilitiesInfo.Items.Add("Customer for " & "TestWillBob3_20180227061920 removed")
            ListBoxUtilitiesInfo.SelectedIndex = ListBoxUtilitiesInfo.Items.Count - 1
            ListBoxUtilitiesInfo.Refresh()
        Catch ex As Exception
            MsgBox("Update Error " & Err.Description)
        End Try

        Try
            rs.Open("Delete from [NotificationCustomerSchedules] where CustomerName = '" & "TestWillBob3_20180227061920" & "'", strconnectSQLBizCoachSettings)
            ListBoxUtilitiesInfo.Items.Add("NotificationCustomerSchedules for " & "TestWillBob3_20180227061920 removed")
            ListBoxUtilitiesInfo.SelectedIndex = ListBoxUtilitiesInfo.Items.Count - 1
            ListBoxUtilitiesInfo.Refresh()
        Catch ex As Exception
            MsgBox("Update Error " & Err.Description)
        End Try

        'deletes from notification schedules
        Dim myCommand As String 'to store the sql command to be executed
        Dim cmd As SqlCommand = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        myCommand = "alter database " & "BizCoachDataTestWillBob3_20180227061920" & " set single_user with rollback immediate"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUtilitiesInfo.Items.Add("Database " & "BizCoachDataTestWillBob3_20180227061920 closed connections")
            ListBoxUtilitiesInfo.SelectedIndex = ListBoxUtilitiesInfo.Items.Count - 1
            ListBoxUtilitiesInfo.Refresh()

        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        myCommand = " DROP DATABASE " & "BizCoachDataTestWillBob3_20180227061920"
        cmd = New SqlCommand(myCommand, strconnectSQLCommandTypeControl) ' creating command for execution
        Try
            cmd.Connection.Open()
            cmd.ExecuteNonQuery()
            ListBoxUtilitiesInfo.Items.Add("Dropped database " & "BizCoachDataTestWillBob3_20180227061920")
            ListBoxUpdateStatus.SelectedIndex = ListBoxUpdateStatus.Items.Count - 1
            ListBoxUpdateStatus.Refresh()
            '      Delay(5)
        Catch
            'error 5 = duplicate
            If Err.Number <> 5 Then
                MessageBox.Show("'" & myCommand & "'" & ControlChars.CrLf & Err.Description, "Cant Update", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If
        End Try
        cmd.Connection.Close()


        Dim rs_PostGres As ADODB.Recordset
        rs_PostGres = New ADODB.Recordset
        rs_PostGres.CursorType = ADODB.CursorTypeEnum.adOpenDynamic
        rs_PostGres.LockType = ADODB.LockTypeEnum.adLockOptimistic

        Try
            rs_PostGres.Open("Update create_db_job_schedule set job_done ='False'  where user_id ='" & "374" & "'", strconnectPostGresSQLUsers)
        Catch ex As Exception
            MsgBox("Epdate Error " & Err.Description)
        End Try

        'reloads the customers
        'as 1 has been removed
        LoadCustomers()

    End Sub

End Class



'the encyption class
Public NotInheritable Class Simple3Des

    Private TripleDes As New TripleDESCryptoServiceProvider

    Private Function TruncateHash(
        ByVal key As String,
        ByVal length As Integer) As Byte()

        Dim sha1 As New SHA1CryptoServiceProvider

        ' Hash the key.
        Dim keyBytes() As Byte =
            System.Text.Encoding.Unicode.GetBytes(key)
        Dim hash() As Byte = sha1.ComputeHash(keyBytes)

        ' Truncate or pad the hash.
        ReDim Preserve hash(length - 1)
        Return hash
    End Function

    Sub New(ByVal key As String)
        ' Initialize the crypto provider.
        TripleDes.Key = TruncateHash(key, TripleDes.KeySize \ 8)
        TripleDes.IV = TruncateHash("", TripleDes.BlockSize \ 8)
    End Sub

    Public Function EncryptData(
        ByVal plaintext As String) As String
        ' Convert the plaintext string to a byte array.
        Dim plaintextBytes() As Byte =
            System.Text.Encoding.Unicode.GetBytes(plaintext)
        ' Create the stream.
        Dim ms As New System.IO.MemoryStream
        ' Create the encoder to write to the stream.
        Dim encStream As New CryptoStream(ms,
            TripleDes.CreateEncryptor(),
            System.Security.Cryptography.CryptoStreamMode.Write)
        ' Use the crypto stream to write the byte array to the stream.
        encStream.Write(plaintextBytes, 0, plaintextBytes.Length)
        encStream.FlushFinalBlock()
        ' Convert the encrypted stream to a printable string.
        Return Convert.ToBase64String(ms.ToArray)
    End Function


    Public Function DecryptData(
    ByVal encryptedtext As String) As String
        ' Convert the encrypted text string to a byte array.
        Dim encryptedBytes() As Byte = Convert.FromBase64String(encryptedtext)
        ' Create the stream.
        Dim ms As New System.IO.MemoryStream
        ' Create the decoder to write to the stream.
        Dim decStream As New CryptoStream(ms,
                TripleDes.CreateDecryptor(),
                System.Security.Cryptography.CryptoStreamMode.Write)
        ' Use the crypto stream to write the byte array to the stream.
        decStream.Write(encryptedBytes, 0, encryptedBytes.Length)
        decStream.FlushFinalBlock()
        ' Convert the plaintext stream to a string.
        Return System.Text.Encoding.Unicode.GetString(ms.ToArray)
    End Function

End Class

'***********************************
'*********** end of encryption class
